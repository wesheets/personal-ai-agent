{
  "phase_id": 27,
  "phase_title": "Phase 27: Multi-Stance Planning, Active Invariant Enforcement & Refactor Actioning",
  "batches": [
    {
      "batch_id": "27.0",
      "title": "Enable Multi-Stance Plan Generation & Introduce Comparison Surface",
      "prompt": "Objective: Enable generation of multiple plans based on different emotional stances and initialize comparison surface.\n1. **Dependency Check:** Ensure Phase 26 (specifically 26.4) is complete. Ensure `apply_emotion_profile.py` exists and emotion influence is active (from 25.1/25.2). Ensure complexity/risk estimation mechanisms (from 22.3, 23.1) are functional.\n2. **Enable Multi-Stance Generation:** Modify `loop_controller.py` to optionally request plans from Architect using different emotional parameter overrides.\n3. **Build Comparison Surface:** Create `app/memory/multi_plan_comparison.json` and schema (`app/schemas/multi_plan_comparison.schema.json`). Define structure.\n4. **Integrate Complexity/Risk Estimation:** Ensure Architect/Pessimist provide estimated complexity/risk scores for each variant. Store in `multi_plan_comparison.json`.\n5. **Integration & Test:** Run loop (`loop_0049`) triggering multi-stance planning.\n6. **Functional Validation:** Verify `multi_plan_comparison.json` populated correctly.\n7. **Log Wiring & Validate:** Follow standard procedures.\n8. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug controller logic, Architect integration, or comparison surface/schema.",
      "components_to_build_or_verify": [
        "app/controllers/loop_controller.py",
        "app/agents/architect_agent.py",
        "app/agents/pessimist_agent.py",
        "app/memory/multi_plan_comparison.json",
        "app/schemas/multi_plan_comparison.schema.json"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/multi_plan_comparison.json",
        "/home/ubuntu/personal-ai-agent/app/schemas/multi_plan_comparison.schema.json",
        "/home/ubuntu/logs/loop_0049_execution.log"
      ],
      "verification_steps": [
        "Confirm comparison surface/schema created.",
        "Confirm competing plans with stance, complexity, risk stored.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 27.0 to `true`."
      ],
      "dependencies": [
        "26.4",
        "25.1",
        "25.2",
        "22.3",
        "23.1"
      ],
      "verified": false
    },
    {
      "batch_id": "27.1",
      "title": "Implement Plan Comparison and Selection Logic",
      "prompt": "Objective: Implement logic to compare competing plans and select the optimal one based on multiple criteria, including active invariant checks.\n1. **Dependency Check:** Ensure batch 27.0 is `verified: true`. Ensure active invariant checking (from 25.3) is functional.\n2. **Implement Comparison Logic:** Modify Critic/Pessimist/Controller to analyze plans in `multi_plan_comparison.json`. Criteria: risk, complexity, belief alignment, *active* invariant adherence check (using 25.3 logic), impact, confidence, emotional state.\n3. **Implement Selection Logic:** Based on comparison, select the optimal plan. Log selection, agent, and detailed justification (referencing criteria, emotional context, *active* invariant check results) to `multi_plan_comparison.json` and `loop_justification_log.json`.\n4. **Integration & Test:** Run loop (`loop_0050`) with competing plans requiring selection.\n5. **Functional Validation:** Verify `multi_plan_comparison.json` updated with selection. Verify justification log contains detailed rationale including *active* invariant check results.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug comparison/selection logic or justification logging.",
      "components_to_build_or_verify": [
        "app/agents/critic_agent.py",
        "app/agents/pessimist_agent.py",
        "app/controllers/loop_controller.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/multi_plan_comparison.json",
        "/home/ubuntu/personal-ai-agent/app/memory/loop_justification_log.json",
        "/home/ubuntu/logs/loop_0050_execution.log"
      ],
      "verification_steps": [
        "Confirm selection details updated in comparison surface.",
        "Confirm justification log contains detailed rationale including active invariant check results.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 27.1 to `true`."
      ],
      "dependencies": [
        "27.0",
        "25.3"
      ],
      "verified": false
    },
    {
      "batch_id": "27.2",
      "title": "Activate Cognitive Invariant Violation Enforcement",
      "prompt": "Objective: Activate enforcement (halt/escalate) based on the *already active* cognitive invariant checks from Phase 25.\n1. **Dependency Check:** Ensure batches 23.3 (Invariant Ledger), 25.3 (Active Invariant Checks) are `verified: true`.\n2. **Implement Enforcement Logic:** Modify components performing invariant checks (`loop_controller.py`, `mutation_guard.py`). If a violation is detected by the *existing* check logic, *now* enforce the consequence: Halt loop, escalate to Operator Review Gate (Phase 32), or trigger corrective action based on invariant definition.\n3. **Log Enforcement:** Log the enforcement action (halt, escalate, corrective action ID), violated invariant ID, and loop details to `invariant_violation_log.json`.\n4. **Integration & Test:** Run loop (`loop_0051`) designed to violate a defined invariant and trigger *active enforcement*.\n5. **Functional Validation:** Verify loop halted/escalated as expected. Verify `invariant_violation_log.json` logs the enforcement action correctly.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug enforcement logic or violation logging.",
      "components_to_build_or_verify": [
        "app/controllers/loop_controller.py",
        "app/validators/mutation_guard.py",
        "app/memory/invariant_violation_log.json"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/invariant_violation_log.json",
        "/home/ubuntu/logs/loop_0051_execution.log",
        "Potentially /home/ubuntu/review_queue/plan_0051.json"
      ],
      "verification_steps": [
        "Confirm loop actively halted/escalated due to invariant violation enforcement.",
        "Confirm enforcement action logged correctly.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 27.2 to `true`."
      ],
      "dependencies": [
        "23.3",
        "25.3"
      ],
      "verified": false
    },
    {
      "batch_id": "27.3",
      "title": "Implement Refactor Trigger Actioning",
      "prompt": "Objective: Prioritize and action refactoring suggestions based on cognitive health monitoring.\n1. **Dependency Check:** Ensure batches 20.0 (Mutation Backlog), 26.2 (Refactor Suggestions) are `verified: true`.\n2. **Implement Actioning Logic:** Modify Architect/Simplification Agent/Controller. When a high-priority suggestion exists in `refactor_suggestion_log.json`, prioritize generating/selecting plans that address it or directly add a task to `mutation_backlog.json` or Operator review queue.\n3. **Update Suggestion Status:** Update the status of the actioned suggestion in `refactor_suggestion_log.json`.\n4. **Integration & Test:** Seed `refactor_suggestion_log.json` with a high-priority suggestion. Run loop (`loop_0052`) where addressing the suggestion is relevant or triggers direct actioning.\n5. **Functional Validation:** Verify plan prioritizes suggestion OR task added to backlog/queue. Verify suggestion status updated.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug prioritization/actioning logic or status update.",
      "components_to_build_or_verify": [
        "app/agents/architect_agent.py",
        "app/agents/simplification_agent.py",
        "app/controllers/loop_controller.py",
        "app/memory/refactor_suggestion_log.json",
        "app/memory/mutation_backlog.json"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/refactor_suggestion_log.json",
        "/home/ubuntu/personal-ai-agent/app/memory/mutation_backlog.json",
        "/home/ubuntu/logs/loop_0052_execution.log"
      ],
      "verification_steps": [
        "Confirm refactor suggestion prioritized or actioned (task created).",
        "Confirm suggestion status updated in log.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 27.3 to `true`."
      ],
      "dependencies": [
        "20.0",
        "26.2"
      ],
      "verified": false
    },
    {
      "batch_id": "27.4",
      "title": "Phase 27 Mini-Validation: Multi-Stance Selection & Active Invariant Enforcement",
      "prompt": "Objective: Validate the functionality of Multi-Stance Plan Selection (27.1) and Active Invariant Enforcement (27.2).\n1. **Dependency Check:** Ensure batches 27.1, 27.2 are `verified: true`.\n2. **Define Scenario:** Create a test loop scenario (`loop_0053`) designed to: a) generate multiple plans under different stances, requiring selection based on criteria including active invariant checks, b) attempt an action that violates an invariant, triggering active enforcement (halt/escalation).\n3. **Execute Scenario:** Run `loop_0053`. Monitor relevant surfaces.\n4. **Functional Validation:** Analyze logs and surfaces (`multi_plan_comparison.json`, `loop_justification_log.json`, `invariant_violation_log.json`). Verify that: a) plan selection occurred correctly, referencing active invariant checks in justification, b) invariant violation was detected and *actively enforced* (halt/escalate), c) enforcement action was logged correctly.\n5. **Log Wiring & Validate:** Follow standard procedures.\n6. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug plan selection (27.1) or invariant enforcement (27.2) logic.",
      "components_to_build_or_verify": [
        "Loop execution environment",
        "Logging surfaces",
        "Multi-stance selection logic",
        "Active invariant enforcement logic"
      ],
      "expected_artifacts": [
        "/home/ubuntu/logs/loop_0053_execution.log",
        "Updated comparison/justification/violation logs demonstrating correct functionality."
      ],
      "verification_steps": [
        "Confirm loop scenario executed.",
        "Confirm logs show correct plan selection referencing invariant checks.",
        "Confirm logs show active invariant enforcement (halt/escalate) and logging.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 27.4 to `true`."
      ],
      "dependencies": [
        "27.1",
        "27.2"
      ],
      "verified": false
    }
  ]
}

