{
  "phase_id": 33,
  "batch_id": "33.0",
  "title": "Phase 33.0: Core Cognitive Loop Activation & UI Integration",
  "description": "Activates the core cognitive loop (Orchestrator -> Governance Pre-Check -> Build -> Governance Post-Check -> Package) using existing agents and governance mechanisms. Integrates the audit-confirmed UI shell with core memory surfaces for real-time visualization. Enforces strict drift-lock alignment and governance integration.",
  "prompt": "Operator Directive: Execute Phase 33.0. Activate the core cognitive loop for SaaS vertical generation. Integrate the existing UI shell for real-time visualization. Strictly adhere to drift-lock: use only audit-confirmed assets (agents in /app/agents/, UI components in /src/, existing schemas/surfaces). Ensure all Phase 16-32 governance mechanisms (Trust, Justification, Emotion, Complexity, Invariants, Mutation Control, Operator Intervention) are actively queried and logged throughout the loop, even if their initial influence is basic. Output a downloadable package containing the generated scaffold and essential logs. Goal: Demonstrate a functional, governed, traceable cognitive loop connected to a live UI.",
  "components": [
    {
      "id": "33.0.1",
      "task": "Implement Core Loop Controller Logic",
      "details": "Develop/update 'vertical_loop_controller.py' to orchestrate the agent sequence: Orchestrator -> Pessimist/Critic (Pre) -> Forge/HAL -> Critic/Sage (Post). Implement basic state management using 'loop_context.json'. Ensure controller queries relevant governance surfaces (Trust, Emotion, Complexity Budget, Invariants) at appropriate stages and logs checks.",
      "artifacts": [
        "/home/ubuntu/personal-ai-agent/app/controllers/vertical_loop_controller.py",
        "/home/ubuntu/personal-ai-agent/app/memory/loop_context.json"
      ]
    },
    {
      "id": "33.0.2",
      "task": "Integrate Agent Execution & Governance Logging",
      "details": "Wire the loop controller to call existing agent stubs (Orchestrator, Forge, HAL, Critic, Pessimist, Sage). Implement robust logging hooks within the controller and potentially within agent wrappers to capture inputs, outputs, decisions, and associated governance metrics (Justification, Trust Score, Emotion State, Complexity Estimate/Actual) into 'loop_trace.json' and 'agent_justification_log.json'. Ensure mutation requests/checks are logged if applicable.",
      "artifacts": [
        "/home/ubuntu/personal-ai-agent/app/controllers/vertical_loop_controller.py",
        "/home/ubuntu/personal-ai-agent/app/memory/loop_trace.json",
        "/home/ubuntu/personal-ai-agent/app/memory/agent_justification_log.json"
      ]
    },
    {
      "id": "33.0.3",
      "task": "Implement UI-Backend Integration (API & WebSockets)",
      "details": "Develop necessary API endpoints (e.g., using Flask/FastAPI) and a WebSocket server to connect the existing UI components (OperatorConsole, AgentChatPanel, LoopStatusPanel, FileTreePanel, GovernanceMonitor) to the backend loop controller and memory surfaces. Implement real-time updates for loop state, agent interactions, justification logs, and file tree changes.",
      "artifacts": [
        "/home/ubuntu/personal-ai-agent/app/server/api_endpoints.py",
        "/home/ubuntu/personal-ai-agent/app/server/websocket_server.py",
        "/home/ubuntu/personal-ai-agent/src/utils/apiClient.js",
        "/home/ubuntu/personal-ai-agent/src/utils/socketClient.js"
      ]
    },
    {
      "id": "33.0.4",
      "task": "Connect UI Components to Live Data",
      "details": "Update existing React components in '/src/components/' and '/src/pages/' to fetch data from the new API endpoints and subscribe to WebSocket events. Ensure components display live loop status, orchestrator questions/plans, agent justifications, governance metrics, and the evolving file tree based on backend updates.",
      "artifacts": [
        "/home/ubuntu/personal-ai-agent/src/components/OperatorConsole.jsx",
        "/home/ubuntu/personal-ai-agent/src/components/AgentChatPanel.jsx",
        "/home/ubuntu/personal-ai-agent/src/components/LoopStatusPanel.jsx",
        "/home/ubuntu/personal-ai-agent/src/components/FileTreePanel.jsx",
        "/home/ubuntu/personal-ai-agent/src/components/GovernanceMonitor.jsx",
        "/home/ubuntu/personal-ai-agent/src/pages/LiveCognitionView.jsx"
      ]
    },
    {
      "id": "33.0.5",
      "task": "Implement Artifact Packaging",
      "details": "Create a script ('package_artifacts.py') triggered at the end of a successful loop execution. This script should gather the generated SaaS scaffold code (from Forge/HAL output location), 'loop_trace.json', 'agent_justification_log.json', and 'vertical_manifest.md' (generated by Orchestrator/Controller) into a timestamped downloadable zip archive.",
      "artifacts": [
        "/home/ubuntu/personal-ai-agent/app/tools/package_artifacts.py",
        "/home/ubuntu/personal-ai-agent/app/memory/vertical_manifest.md"
      ]
    }
  ],
  "expected_artifacts": [
    "/home/ubuntu/personal-ai-agent/app/controllers/vertical_loop_controller.py",
    "/home/ubuntu/personal-ai-agent/app/server/api_endpoints.py",
    "/home/ubuntu/personal-ai-agent/app/server/websocket_server.py",
    "/home/ubuntu/personal-ai-agent/app/tools/package_artifacts.py",
    "/home/ubuntu/personal-ai-agent/app/memory/loop_context.json",
    "/home/ubuntu/personal-ai-agent/app/memory/loop_trace.json",
    "/home/ubuntu/personal-ai-agent/app/memory/agent_justification_log.json",
    "/home/ubuntu/personal-ai-agent/app/memory/vertical_manifest.md",
    "Updated UI component files in /src/",
    "Generated SaaS scaffold code (directory)",
    "Generated artifact package (.zip)"
  ],
  "validation_criteria": [
    "Cognitive loop executes end-to-end using specified agents and controller.",
    "All Phase 16-32 governance mechanisms are queried and their checks/states logged to relevant surfaces ('loop_trace.json', 'agent_justification_log.json').",
    "UI components connect to backend and display real-time updates for loop state, agent interactions, justifications, and file tree changes.",
    "Orchestrator interacts via UI, asking clarifying questions and proposing plans.",
    "Forge/HAL generate a basic, structurally sound SaaS scaffold for the target vertical.",
    "Final artifacts (scaffold, logs, manifest) are correctly packaged into a downloadable zip file.",
    "Strict adherence to drift-lock: only existing assets are used, no unapproved files created."
  ],
  "dependencies": [
    "Completion of Phases 16-32 (Governance & Memory Architecture)",
    "Audit-confirmed UI components in /src/",
    "Existing agent stubs in /app/agents/",
    "Existing schemas and memory surfaces from Phases 16-32"
  ]
}

