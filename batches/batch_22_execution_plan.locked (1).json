{
  "phase_id": 22,
  "phase_title": "Phase 22: Agent Archetypes, Complexity Budgeting & Schema Proposals",
  "batches": [
    {
      "batch_id": "22.0",
      "title": "Define Archetypes & Introduce Complexity Budget",
      "prompt": "Objective: Define loop archetypes and initialize the complexity budget surface.\n1. **Dependency Check:** Ensure batch 16.1 and 21.1 are `verified: true`.\n2. **Define Archetypes:** Define loop archetypes (Explore, Optimize, Refactor, etc.) and classification criteria.\n3. **Build Complexity Budget Surface:** Create `app/memory/complexity_budget.json` and schema (`app/schemas/complexity_budget.schema.json`). Define initial budget allocations.\n4. **Functional Validation:** Verify archetype definitions documented. Verify complexity budget surface/schema created and initialized.\n5. **Log Wiring & Validate:** Follow standard procedures.\n6. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug surface/schema creation or archetype definitions.",
      "components_to_build_or_verify": [
        "app/memory/complexity_budget.json",
        "app/schemas/complexity_budget.schema.json"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/complexity_budget.json",
        "/home/ubuntu/personal-ai-agent/app/schemas/complexity_budget.schema.json"
      ],
      "verification_steps": [
        "Confirm archetype definitions documented.",
        "Confirm complexity budget surface/schema created and initialized.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 22.0 to `true`."
      ],
      "dependencies": [
        "16.1",
        "21.1"
      ],
      "verified": false
    },
    {
      "batch_id": "22.1",
      "title": "Implement Archetype Classifier & Activate Complexity Budgeting Influence",
      "prompt": "Objective: Classify loop archetypes and implement complexity budget tracking with active influence.\n1. **Dependency Check:** Ensure batch 22.0 is `verified: true`.\n2. **Implement Classifier:** Create `app/validators/archetype_classifier.py` to classify loop intent into archetypes.\n3. **Enhance Controller/Logging:** Modify `loop_controller.py` to call classifier. Log archetype to `loop_summary.json`.\n4. **Implement Complexity Budgeting Logic:** Modify controller/agents to track complexity spending against `agent_cognitive_budget.json` (21.4) and update `complexity_budget.json`.\n5. **Activate Budget Influence:** Implement logic in controller/Orchestrator to check remaining budget in `complexity_budget.json` before planning/execution. If budget is low/exceeded for the domain/archetype: a) Gate execution and escalate to Operator, OR b) Bias agent selection towards lower-complexity options (e.g., HAL over Forge), OR c) Require explicit Operator override. Log the influence.\n6. **Integration & Test:** Run loops (`loop_0030a` - within budget, `loop_0030b` - exceeding budget) demonstrating classification and budget influence.\n7. **Functional Validation:** Verify archetypes logged. Verify complexity spending tracked. Verify low/exceeded budget *actively* gates execution, biases selection, or requires override, and this influence is logged.\n8. **Log Wiring & Validate:** Follow standard procedures.\n9. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug classifier, budgeting logic, or activation logic.",
      "components_to_build_or_verify": [
        "app/validators/archetype_classifier.py",
        "app/controllers/loop_controller.py",
        "app/memory/loop_summary.json",
        "app/memory/agent_cognitive_budget.json",
        "app/memory/complexity_budget.json",
        "app/agents/orchestrator_agent.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/validators/archetype_classifier.py",
        "/home/ubuntu/personal-ai-agent/app/memory/loop_summary.json",
        "/home/ubuntu/personal-ai-agent/app/memory/agent_cognitive_budget.json",
        "Logs demonstrating active budget influence (gating/biasing/override)",
        "/home/ubuntu/logs/loop_0030a_execution.log",
        "/home/ubuntu/logs/loop_0030b_execution.log"
      ],
      "verification_steps": [
        "Confirm archetypes logged correctly.",
        "Confirm complexity spending tracked.",
        "Confirm budget checks actively influenced execution and logged.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 22.1 to `true`."
      ],
      "dependencies": [
        "22.0",
        "21.4"
      ],
      "verified": false
    },
    {
      "batch_id": "22.2",
      "title": "Implement Schema Change Proposal Mechanism",
      "prompt": "Objective: Allow agents/Operator to formally propose schema changes.\n1. **Dependency Check:** Ensure batch 22.1 is `verified: true`.\n2. **Build Proposal Surface:** Create `app/memory/schema_change_request.json` and schema (`app/schemas/schema_change_request.schema.json`). Include fields for target schema, change, justification, impact analysis.\n3. **Implement Proposal Logic:** Modify Architect or create `schema_manager_agent.py` to generate proposals and save to `schema_change_request.json`.\n4. **Integration & Test:** Run loop (`loop_0031`) proposing a schema change.\n5. **Functional Validation:** Verify `schema_change_request.json` populated with valid proposal.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug proposal logic or schema.",
      "components_to_build_or_verify": [
        "app/memory/schema_change_request.json",
        "app/schemas/schema_change_request.schema.json",
        "app/agents/architect_agent.py",
        "app/agents/schema_manager_agent.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/schema_change_request.json",
        "/home/ubuntu/personal-ai-agent/app/schemas/schema_change_request.schema.json",
        "/home/ubuntu/logs/loop_0031_execution.log"
      ],
      "verification_steps": [
        "Confirm schema change proposal generated and saved correctly.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 22.2 to `true`."
      ],
      "dependencies": [
        "22.1"
      ],
      "verified": false
    },
    {
      "batch_id": "22.3",
      "title": "Implement Loop Complexity Audit & Activate Influence",
      "prompt": "Objective: Score loop/plan complexity and activate its influence on justification/validation.\n1. **Dependency Check:** Ensure batches 21.1, 22.1 are `verified: true`.\n2. **Implement Complexity Scoring:** Enhance justification validation logic (or Critic/Controller) to calculate a complexity score for proposed plans based on metrics.\n3. **Integrate with Quantification:** Log score to `complexity_metrics.json` (21.1).\n4. **Activate Threshold Influence:** Implement logic to check score against threshold. If exceeded: a) Require stronger justification (increase required score/detail), OR b) Automatically flag for Critic review, OR c) Gate execution pending Operator approval/override. Log the influence.\n5. **Integration & Test:** Run loops (`loop_0032a` - low complexity, `loop_0032b` - high complexity) triggering scoring and threshold influence.\n6. **Functional Validation:** Verify scores logged. Verify high complexity *actively* triggers stronger justification requirements, Critic review, or gating, and this influence is logged.\n7. **Log Wiring & Validate:** Follow standard procedures.\n8. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug scoring, threshold check, or activation logic.",
      "components_to_build_or_verify": [
        "app/validators/justification_validator.py",
        "app/agents/critic_agent.py",
        "app/controllers/loop_controller.py",
        "app/memory/complexity_metrics.json"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/complexity_metrics.json",
        "Logs demonstrating active complexity threshold influence (justification reqs, Critic flag, gating)",
        "/home/ubuntu/logs/loop_0032a_execution.log",
        "/home/ubuntu/logs/loop_0032b_execution.log"
      ],
      "verification_steps": [
        "Confirm complexity scores logged.",
        "Confirm threshold check actively influenced execution for high complexity loop and logged.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 22.3 to `true`."
      ],
      "dependencies": [
        "21.1",
        "22.1"
      ],
      "verified": false
    },
    {
      "batch_id": "22.4",
      "title": "Phase 22 Mini-Validation: Active Complexity Governance",
      "prompt": "Objective: Validate the *active influence* of governance mechanisms implemented/activated in Phase 22 (Complexity Budget, Loop Complexity Audit).\n1. **Dependency Check:** Ensure batches 22.1, 22.3 are `verified: true`.\n2. **Define Scenario:** Create a test loop scenario (`loop_0033`) designed to trigger complexity governance checks: a) propose a plan likely to exceed complexity score threshold, b) operate in a context where complexity budget is constrained.\n3. **Execute Scenario:** Run `loop_0033`.\n4. **Functional Validation:** Analyze logs (`loop_0033_execution.log`, `agent_justification_log.json`). Verify that: a) the high complexity score actively triggered stronger justification requirements, Critic review, or gating, b) the constrained budget actively gated execution, biased agent selection, or required override, c) the logs clearly state the governance reason for the influence.\n5. **Log Wiring & Validate:** Follow standard procedures.\n6. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug governance activation logic in 22.1/22.3 or scenario design.",
      "components_to_build_or_verify": [
        "Loop execution environment",
        "Logging surfaces"
      ],
      "expected_artifacts": [
        "/home/ubuntu/logs/loop_0033_execution.log",
        "Logs clearly demonstrating active governance influence from Complexity Budget and Audit checks."
      ],
      "verification_steps": [
        "Confirm loop scenario executed.",
        "Confirm logs show active influence from Complexity Budget and Audit checks.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 22.4 to `true`."
      ],
      "dependencies": [
        "22.1",
        "22.3"
      ],
      "verified": false
    }
  ]
}

