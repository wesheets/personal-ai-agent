{
  "phase_title": "Phase 20: Trust Scoring & Enhanced Mutation Governance",
  "batches": [
    {
      "batch_id": "20.0",
      "title": "Setup Surfaces & Implement Trust Score Calculation",
      "prompt": "Objective: Implement logic to calculate agent trust scores and set up surfaces for enhanced mutation governance.\n1. **Dependency Check:** Ensure Phase 19 is complete. Confirm relevant history logs exist.\n2. **Build Governance Surfaces:** Create and initialize empty structures/schemas for: `app/memory/debt_token_budget.json`, `app/memory/mutation_request.json`, `app/memory/mutation_backlog.json`, `app/memory/agent_blame_log.json`. Define initial budget in `debt_token_budget.json`.\n3. **Build Trust Surface:** Create `app/memory/agent_trust_score.json` (schema: agent_id, score, last_updated, data_points_used, contributing_factors_summary).\n4. **Implement Scoring Logic:** Create `app/validators/trust_evaluator.py`. Implement logic to analyze agent performance (logs, regret, justifications) and update `agent_trust_score.json`.\n5. **Integration & Test:** Seed logs. Run trust calculation (`loop_0017`).\n6. **Functional Validation:** Verify `agent_trust_score.json` populated. Verify governance surfaces initialized.\n7. **Log Wiring & Validate:** Follow standard wiring log and validation procedures.\n8. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug scoring logic or surface initialization.",
      "components_to_build_or_verify": [
        "app/memory/debt_token_budget.json",
        "app/memory/mutation_request.json",
        "app/memory/mutation_backlog.json",
        "app/memory/agent_blame_log.json",
        "app/memory/agent_trust_score.json",
        "app/validators/trust_evaluator.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/debt_token_budget.json",
        "/home/ubuntu/personal-ai-agent/app/memory/mutation_request.json",
        "/home/ubuntu/personal-ai-agent/app/memory/mutation_backlog.json",
        "/home/ubuntu/personal-ai-agent/app/memory/agent_blame_log.json",
        "/home/ubuntu/personal-ai-agent/app/memory/agent_trust_score.json",
        "/home/ubuntu/personal-ai-agent/app/validators/trust_evaluator.py",
        "/home/ubuntu/logs/loop_0017_execution.log"
      ],
      "verification_steps": [
        "Confirm scores in `agent_trust_score.json` reflect seeded history.",
        "Confirm governance surfaces are initialized.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 20.0 to `true`."
      ],
      "dependencies": [
        "19.x" 
      ],
      "verified": false
    },
    {
      "batch_id": "20.1",
      "title": "Trust Rehab Pathways & Basic Mutation Guard Checks",
      "prompt": "Objective: Implement trust rehabilitation and enhance mutation guard with initial governance checks.\n1. **Dependency Check:** Ensure batch 20.0 is `verified: true`.\n2. **Build Rehab Surface:** Create `app/memory/trust_rehabilitation_pathways.json`. Define pathways.\n3. **Implement Rehab Logic:** Modify `trust_evaluator.py` or controller to recognize pathway completion and influence score.\n4. **Enhance Guard Logic (Basic Checks):** Modify `mutation_guard.py` (from Phase 19) to perform basic checks: read `mutation_request.json` format, check against `debt_token_budget.json`. Reject if checks fail, logging reason.\n5. **Integration & Test:** Simulate low-trust agent, run pathway loop (`loop_0018`), run trust calc (`loop_0017`). Test guard rejection (bad request format `loop_0019a`, insufficient budget `loop_0019b`) and basic approval (`loop_0019c`).\n6. **Functional Validation:** Verify score improved. Verify guard log shows correct blocking/allowing based on budget/format checks.\n7. **Log Wiring & Validate:** Follow standard procedures.\n8. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug rehab logic or guard checks.",
      "components_to_build_or_verify": [
        "app/memory/trust_rehabilitation_pathways.json",
        "app/validators/trust_evaluator.py",
        "app/validators/mutation_guard.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/trust_rehabilitation_pathways.json",
        "/home/ubuntu/personal-ai-agent/app/memory/agent_trust_score.json",
        "/home/ubuntu/personal-ai-agent/app/logs/mutation_guard.log",
        "/home/ubuntu/logs/loop_0017_execution.log",
        "/home/ubuntu/logs/loop_0018_execution.log",
        "/home/ubuntu/logs/loop_0019a_execution.log",
        "/home/ubuntu/logs/loop_0019b_execution.log",
        "/home/ubuntu/logs/loop_0019c_execution.log"
      ],
      "verification_steps": [
        "Confirm score improved based on pathway success.",
        "Confirm guard log shows rejection for bad format/budget.",
        "Confirm guard log shows basic approval.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 20.1 to `true`."
      ],
      "dependencies": [
        "20.0"
      ],
      "verified": false
    },
    {
      "batch_id": "20.2",
      "title": "Pessimist Review & Mutation Guard Trust Check",
      "prompt": "Objective: Integrate Pessimist review of mutation requests and enhance guard with trust score check.\n1. **Dependency Check:** Ensure batches 18.1 (Pessimist), 20.1 are `verified: true`.\n2. **Update Pessimist:** Modify Pessimist agent logic to read `mutation_request.json` passed by controller, perform risk assessment (considering justification, debt impact), and log approval/rejection/concerns.\n3. **Enhance Guard Logic (Trust Check):** Modify `mutation_guard.py` to check `agent_trust_score.json` for responsible agent. Require score > threshold AND sufficient data points. Reject if check fails.\n4. **Integration & Test:** Test Pessimist review step in loop flow. Test guard rejection (low score `loop_0020a`, insufficient data `loop_0020b`) and approval (high score `loop_0020c`, assuming Pessimist also approves).\n5. **Functional Validation:** Verify Pessimist review occurs and logs decision. Verify guard log shows correct blocking/allowing based on trust score/data sufficiency.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug Pessimist logic or guard trust check.",
      "components_to_build_or_verify": [
        "app/agents/pessimist_agent.py",
        "app/validators/mutation_guard.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/logs/pessimist_agent.log",
        "/home/ubuntu/personal-ai-agent/app/logs/mutation_guard.log",
        "/home/ubuntu/logs/loop_0020a_execution.log",
        "/home/ubuntu/logs/loop_0020b_execution.log",
        "/home/ubuntu/logs/loop_0020c_execution.log"
      ],
      "verification_steps": [
        "Confirm Pessimist review logged.",
        "Confirm guard log shows rejection for low score/insufficient data.",
        "Confirm guard log shows approval for high score (if Pessimist approved).",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 20.2 to `true`."
      ],
      "dependencies": [
        "18.1",
        "20.1"
      ],
      "verified": false
    },
    {
      "batch_id": "20.3",
      "title": "Operator Gate, Mutation Queue & Blame Log",
      "prompt": "Objective: Implement blocking Operator review gate, mutation queue logic, and blame attribution scaffold.\n1. **Dependency Check:** Ensure batch 17.0, 20.1 are `verified: true`.\n2. **Implement Blocking Review Step:** Modify `loop_controller.py`. For designated plan/mutation types, block execution, write to review queue (`/home/ubuntu/review_queue/`), poll input source (`/home/ubuntu/operator_input/`) for approve/reject. Default reject on timeout/invalid input.\n3. **Implement Override Logging:** Create `app/memory/operator_override_log.json`. Log Operator decision.\n4. **Implement Mutation Queue Logic:** Modify controller/guard. If mutation checks fail (debt, trust low) or Operator review pending, log request details to `mutation_backlog.json` instead of immediate rejection. (Actual processing of backlog deferred).\n5. **Implement Blame Attribution:** Modify controller. On loop failure, log potential responsible agents/components to `agent_blame_log.json` based on simple heuristics (e.g., agent proposing failed step).\n6. **Integration & Test:** Test Operator gate (approve `loop_0021a`, reject `loop_0021b`). Test mutation queueing (trigger low debt/trust scenario `loop_0021c`). Test blame logging (trigger failure `loop_0021d`).\n7. **Functional Validation:** Confirm Operator gate blocks/resumes/halts correctly and logs overrides. Confirm failed mutations are logged to backlog. Confirm blame log populated on failure.\n8. **Log Wiring & Validate:** Follow standard procedures.\n9. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug controller logic, queueing, or logging.",
      "components_to_build_or_verify": [
        "app/controllers/loop_controller.py",
        "app/memory/operator_override_log.json",
        "app/validators/mutation_guard.py" 
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/operator_override_log.json",
        "/home/ubuntu/personal-ai-agent/app/memory/mutation_backlog.json",
        "/home/ubuntu/personal-ai-agent/app/memory/agent_blame_log.json",
        "/home/ubuntu/logs/loop_0021a_execution.log",
        "/home/ubuntu/logs/loop_0021b_execution.log",
        "/home/ubuntu/logs/loop_0021c_execution.log",
        "/home/ubuntu/logs/loop_0021d_execution.log"
      ],
      "verification_steps": [
        "Confirm Operator gate behavior and logging.",
        "Confirm `mutation_backlog.json` populated when expected.",
        "Confirm `agent_blame_log.json` populated on failure.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 20.3 to `true`."
      ],
      "dependencies": [
        "17.0",
        "20.1"
      ],
      "verified": false
    },
    {
      "batch_id": "20.4",
      "title": "Final Mutation Guard Checks (Critic & Operator Approval)",
      "prompt": "Objective: Ensure mutation guard performs final checks for Critic and Operator approvals if required.\n1. **Dependency Check:** Ensure batches 18.0 (Critic), 20.2, 20.3 are `verified: true`. Ensure `loop_justification_log.json` includes Critic decisions and `operator_override_log.json` exists.\n2. **Enhance Guard Logic (Critic Check):** Modify `mutation_guard.py`. Add check requiring Critic approval entry in `loop_justification_log.json` for the current loop before allowing mutation. Reject if missing.\n3. **Enhance Guard Logic (Operator Check):** Modify `mutation_guard.py`. If the loop/mutation type required Operator review (flagged by controller), check `operator_override_log.json` for explicit approval. Reject if missing or rejected.\n4. **Integration & Test:** Test Critic approval (`loop_0022a`), Critic rejection (`loop_0022b`). Test Operator approval required & given (`loop_0022c`), Operator approval required & missing/rejected (`loop_0022d`).\n5. **Functional Validation:** Verify guard log shows correct blocking/allowing based on Critic and Operator approval status.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug guard logic for checking justification or override logs.",
      "components_to_build_or_verify": [
        "app/validators/mutation_guard.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/logs/mutation_guard.log",
        "/home/ubuntu/logs/loop_0022a_execution.log",
        "/home/ubuntu/logs/loop_0022b_execution.log",
        "/home/ubuntu/logs/loop_0022c_execution.log",
        "/home/ubuntu/logs/loop_0022d_execution.log"
      ],
      "verification_steps": [
        "Confirm guard allowed/rejected based on Critic approval.",
        "Confirm guard allowed/rejected based on Operator approval (when required).",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 20.4 to `true`."
      ],
      "dependencies": [
        "18.0",
        "20.2",
        "20.3"
      ],
      "verified": false
    }
  ]
}

