[
  {
    "batch": "18.0",
    "title": "Activate Critic Agent for Plan Review",
    "phase": "Phase 18: Review Agents and Basic Rejection",
    "prompt": "Objective: Activate the Critic agent to review plans generated by Architect.\n1. **Dependency Check:** Ensure batch 17.1 is `verified: true`. Confirm `app/agents/critic_agent.py` exists.\n2. **Enhance Controller:** Modify `loop_controller.py` to invoke `critic_agent.py` after Architect generates a plan (`proposed_plan_xxxx.json`). Critic should review the plan against loop intent, beliefs (`belief_surface.json`), and potentially creed (`promethios_creed.json`). Critic logs its decision (approve/reject) and justification to `loop_justification_log.json`.\n3. **Integration & Test:** Run a loop (`loop_0008`) where Architect generates a plan. \n4. **Functional Validation:** Verify `critic_agent.py` was invoked (check logs). Verify Critic's decision and justification are logged in `loop_justification_log.json`. **Verify no plan actions were executed yet.**\n5. **Update Status:** If validation succeeds, update this batch entry to set `verified: true`.\nRecovery: Debug controller integration or Critic agent logic. Ensure justification logging conforms to schema.Repo Sync Protocol Note:Before executing this batch, check whether the previous batch prompt resulted in a merged PR.  If no PR was created or merged, do not run `git pull` or reset the local repo.  Proceed with the current workspace state to preserve continuity of in-progress execution.\n8. **Log Wiring:** Append an entry to `/home/ubuntu/personal-ai-agent/logs/wiring_manifest.json` detailing the batch_id, loop_id, agent(s) involved, memory surfaces written, controller invoked, timestamp, schema_version ('v1.0'), git_commit_hash (placeholder 'TBD_COMMIT'), and pr_id (placeholder 'null'). Set verification_status to 'pending'.9. **Validate Wiring:** Execute the centralized validation script: `python3.11 /home/ubuntu/personal-ai-agent/app/validators/validate_wiring.py --batch 18.0 --loop loop_execution`. 10. **Handle Validation Result:** If the validation script exits with status 0 (success), proceed. If it exits with status 1 (failure), halt execution immediately, report the failure logged in `/home/ubuntu/personal-ai-agent/logs/validation_failures/`, and do *not* mark the batch as verified. The wiring summary will be generated automatically by the script on success.\nUpdate Status: If validation succeeds, update this batch entry to set `verified: true`.",
    "components_to_build_or_verify": [
      "app/agents/critic_agent.py",
      "app/controllers/loop_controller.py"
    ],
    "expected_artifacts": [
      "/home/ubuntu/logs/loop_0008_execution.log",
      "/home/ubuntu/personal-ai-agent/app/memory/loop_justification_log.json"
    ],
    "verification_steps": [
      "Confirm Critic agent executed and logged decision/justification.",
      "**Verify no plan actions were executed.**",
      "Update `verified` status for batch 18.0 to `true`."
    ],
    "dependencies": [
      "17.1"
    ],
    "verified": false
  },
  {
    "batch": "18.1",
    "title": "Activate Pessimist Agent (Risk Assessment Only)",
    "phase": "Phase 18: Review Agents and Basic Rejection",
    "prompt": "Objective: Activate the Pessimist agent to assess risk of Critic-approved plans, without acting on the assessment yet.\n1. **Dependency Check:** Ensure batch 18.0 is `verified: true`. Confirm `app/agents/pessimist_agent.py` exists.\n2. **Enhance Controller:** Modify `loop_controller.py` to invoke `pessimist_agent.py` *after* Critic approves a plan. Pessimist should perform a risk assessment (using basic/placeholder logic for now) based on the plan and context. Pessimist logs its risk score and justification to `loop_justification_log.json`. **The controller should NOT halt based on this risk score yet.**\n3. **Integration & Test:** Run a loop (`loop_0009`) where Architect generates a plan and Critic approves it.\n4. **Functional Validation:** Verify `pessimist_agent.py` was invoked after Critic approval (check logs). Verify Pessimist's risk score and justification are logged in `loop_justification_log.json`. \n5. **Update Status:** If validation succeeds, update this batch entry to set `verified: true`.\nRecovery: Debug controller integration or Pessimist agent logic. Ensure risk score/justification logging occurs.Repo Sync Protocol Note:Before executing this batch, check whether the previous batch prompt resulted in a merged PR.  If no PR was created or merged, do not run `git pull` or reset the local repo.  Proceed with the current workspace state to preserve continuity of in-progress execution.\n8. **Log Wiring:** Append an entry to `/home/ubuntu/personal-ai-agent/logs/wiring_manifest.json` detailing the batch_id, loop_id, agent(s) involved, memory surfaces written, controller invoked, timestamp, schema_version ('v1.0'), git_commit_hash (placeholder 'TBD_COMMIT'), and pr_id (placeholder 'null'). Set verification_status to 'pending'.9. **Validate Wiring:** Execute the centralized validation script: `python3.11 /home/ubuntu/personal-ai-agent/app/validators/validate_wiring.py --batch 18.1 --loop loop_execution`. 10. **Handle Validation Result:** If the validation script exits with status 0 (success), proceed. If it exits with status 1 (failure), halt execution immediately, report the failure logged in `/home/ubuntu/personal-ai-agent/logs/validation_failures/`, and do *not* mark the batch as verified. The wiring summary will be generated automatically by the script on success.\nUpdate Status: If validation succeeds, update this batch entry to set `verified: true`.",
    "components_to_build_or_verify": [
      "app/agents/pessimist_agent.py",
      "app/controllers/loop_controller.py"
    ],
    "expected_artifacts": [
      "/home/ubuntu/logs/loop_0009_execution.log",
      "/home/ubuntu/personal-ai-agent/app/memory/loop_justification_log.json"
    ],
    "verification_steps": [
      "Confirm Pessimist agent executed after Critic approval.",
      "Confirm Pessimist logged risk score/justification.",
      "Update `verified` status for batch 18.1 to `true`."
    ],
    "dependencies": [
      "18.0"
    ],
    "verified": false
  },
  {
    "batch": "18.2",
    "title": "Implement Basic Loop Rejection Based on Critic",
    "phase": "Phase 18: Review Agents and Basic Rejection",
    "prompt": "Objective: Enable the loop controller to halt execution if the Critic agent rejects a plan.\n1. **Dependency Check:** Ensure batch 18.0 is `verified: true`.\n2. **Enhance Controller:** Modify `loop_controller.py`. After Critic reviews the plan, check Critic's logged decision. If Critic rejected the plan, the controller must halt the loop immediately, log the rejection to `loop_summary_rejection_log.json` (including Critic's justification), and skip subsequent steps (like Pessimist review or mutation guard call).\n3. **Integration & Test:** Run a loop (`loop_0010`) where the Critic is expected to reject the plan generated by Architect.\n4. **Functional Validation:** Verify the loop halted after Critic review. Verify `loop_summary_rejection_log.json` contains an entry for `loop_0010` citing Critic rejection and justification. Verify Pessimist was not invoked (check logs).\n5. **Update Status:** If validation succeeds, update this batch entry to set `verified: true`.\nRecovery: Debug controller logic for checking Critic's decision and halting execution. Ensure correct logging to rejection log.Repo Sync Protocol Note:Before executing this batch, check whether the previous batch prompt resulted in a merged PR.  If no PR was created or merged, do not run `git pull` or reset the local repo.  Proceed with the current workspace state to preserve continuity of in-progress execution.\n8. **Log Wiring:** Append an entry to `/home/ubuntu/personal-ai-agent/logs/wiring_manifest.json` detailing the batch_id, loop_id, agent(s) involved, memory surfaces written, controller invoked, timestamp, schema_version ('v1.0'), git_commit_hash (placeholder 'TBD_COMMIT'), and pr_id (placeholder 'null'). Set verification_status to 'pending'.9. **Validate Wiring:** Execute the centralized validation script: `python3.11 /home/ubuntu/personal-ai-agent/app/validators/validate_wiring.py --batch 18.2 --loop loop_execution`. 10. **Handle Validation Result:** If the validation script exits with status 0 (success), proceed. If it exits with status 1 (failure), halt execution immediately, report the failure logged in `/home/ubuntu/personal-ai-agent/logs/validation_failures/`, and do *not* mark the batch as verified. The wiring summary will be generated automatically by the script on success.\nUpdate Status: If validation succeeds, update this batch entry to set `verified: true`.",
    "components_to_build_or_verify": [
      "app/controllers/loop_controller.py"
    ],
    "expected_artifacts": [
      "/home/ubuntu/logs/loop_0010_execution.log",
      "/home/ubuntu/personal-ai-agent/app/memory/loop_summary_rejection_log.json",
      "/home/ubuntu/personal-ai-agent/app/memory/loop_justification_log.json"
    ],
    "verification_steps": [
      "Confirm loop halted after Critic rejection.",
      "Confirm rejection logged correctly in `loop_summary_rejection_log.json`.",
      "Confirm Pessimist was not invoked.",
      "Update `verified` status for batch 18.2 to `true`."
    ],
    "dependencies": [
      "18.0"
    ],
    "verified": false
  },
  {
    "batch": "18.3",
    "title": "Implement Mutation Logging Scaffold",
    "phase": "Phase 18: Review Agents and Basic Rejection",
    "prompt": "Objective: Create the mutation log and have the dry-run mutation guard log intended mutations.\n1. **Dependency Check:** Ensure batch 16.3 is `verified: true`. Ensure `mutation_guard.py` is still in dry-run/blocking mode.\n2. **Build Mutation Log:** Create empty file `/home/ubuntu/personal-ai-agent/app/memory/mutation_log.json`. Define schema (e.g., loop_id, timestamp, component_modified, diff_summary/details, status [e.g., 'intended', 'executed', 'failed']).\n3. **Enhance Mutation Guard:** Modify `app/validators/mutation_guard.py`. When it receives a mutation request (which it still blocks), it should log the details of the *intended* mutation (component, diff summary) to `mutation_log.json` with status 'intended'.\n4. **Integration & Test:** Run a loop (`loop_0011`) that passes Architect and Critic review and attempts to call the mutation guard.\n5. **Functional Validation:** Verify `mutation_guard.py` was called. Verify `mutation_log.json` contains an entry for `loop_0011` detailing the intended mutation with status 'intended'. **Verify no actual mutation occurred.**\n6. **Update Status:** If validation succeeds, update this batch entry to set `verified: true`.\nRecovery: Debug mutation guard logging logic. Ensure schema conformance. Ensure mutation is still blocked.Repo Sync Protocol Note:Before executing this batch, check whether the previous batch prompt resulted in a merged PR.  If no PR was created or merged, do not run `git pull` or reset the local repo.  Proceed with the current workspace state to preserve continuity of in-progress execution.\n8. **Log Wiring:** Append an entry to `/home/ubuntu/personal-ai-agent/logs/wiring_manifest.json` detailing the batch_id, loop_id, agent(s) involved, memory surfaces written, controller invoked, timestamp, schema_version ('v1.0'), git_commit_hash (placeholder 'TBD_COMMIT'), and pr_id (placeholder 'null'). Set verification_status to 'pending'.9. **Validate Wiring:** Execute the centralized validation script: `python3.11 /home/ubuntu/personal-ai-agent/app/validators/validate_wiring.py --batch 18.3 --loop loop_execution`. 10. **Handle Validation Result:** If the validation script exits with status 0 (success), proceed. If it exits with status 1 (failure), halt execution immediately, report the failure logged in `/home/ubuntu/personal-ai-agent/logs/validation_failures/`, and do *not* mark the batch as verified. The wiring summary will be generated automatically by the script on success.\nUpdate Status: If validation succeeds, update this batch entry to set `verified: true`.",
    "components_to_build_or_verify": [
      "app/memory/mutation_log.json",
      "app/validators/mutation_guard.py"
    ],
    "expected_artifacts": [
      "/home/ubuntu/personal-ai-agent/app/memory/mutation_log.json",
      "/home/ubuntu/personal-ai-agent/app/logs/mutation_guard.log",
      "/home/ubuntu/logs/loop_0011_execution.log"
    ],
    "verification_steps": [
      "Confirm `mutation_log.json` contains 'intended' mutation details.",
      "**Verify no actual mutation occurred.**",
      "Update `verified` status for batch 18.3 to `true`."
    ],
    "dependencies": [
      "16.3",
      "18.1"
    ],
    "verified": false
  }
]