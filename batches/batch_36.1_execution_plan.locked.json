{
  "phase_id": 36,
  "batch_id": "36.1",
  "title": "Phase 36.1: Live Cognitive Loop Showcase Execution",
  "description": "Executes the fully integrated cognitive loop as a final showcase run, assuming functional agents, confirmed LLM reasoning, active governance, and UI integration are already in place from Phases 21-36. Focuses on the live execution, comprehensive logging, and artifact generation.",
  "prompt": "Operator Directive: Execute Phase 36.1 as the final showcase run. Run the complete, integrated Promethios cognitive loop live, assuming readiness of agents, LLM, and governance. Ensure comprehensive logging and visualize the process via the live UI. Output the final vertical scaffold and cognitive trace artifacts. Goal: Demonstrate the live, integrated system thinking, building, and reflecting.",
  "components": [
    {
      "id": "36.1.1", 
      "task": "Enable Comprehensive Reflection & Justification Logging",
      "details": "Ensure agents and controller write detailed, structured entries to `agent_justification_log.json`, `reflection_thread.json` (if exists), and `loop_summary.json` (if exists) throughout the live execution.",
      "artifacts": [
        "/home/ubuntu/personal-ai-agent/app/controllers/vertical_loop_controller.py",
        "Agent implementation files with logging calls"
      ]
    },
    {
      "id": "36.1.2", 
      "task": "Ensure Memory Surface Population & Output Logging",
      "details": "Ensure that `loop_trace.json`, `loop_context.json`, `loop_output.json` (or equivalent), and `vertical_manifest.json` are populated correctly during execution.",
      "artifacts": [
        "Populated memory surfaces during/after execution"
      ]
    },
    {
      "id": "36.1.3", 
      "task": "Execute Full End-to-End Vertical Build Loop (Showcase Run)",
      "details": "Initiate a loop execution via the UI with an Operator prompt. Monitor the live execution through the UI. Ensure the loop runs to completion and triggers artifact packaging.",
      "artifacts": [
        "Live running cognitive loop process",
        "Generated SaaS scaffold code (directory)",
        "Final artifact package (.zip) created by package_artifacts.py"
      ]
    }
  ],
  "expected_artifacts": [
    "Fully populated memory surfaces (loop_trace, loop_context, justification, manifest, output, reflection, summary)",
    "Generated SaaS vertical scaffold code",
    "Final downloadable artifact package (.zip)"
  ],
  "validation_criteria": [
    "Loop executes end-to-end using functional agents and LLM reasoning.",
    "Governance mechanisms actively influence loop flow and this is logged (as confirmed in prior phases).",
    "Reflection and justification logs are comprehensively populated.",
    "All specified memory surfaces are correctly populated.",
    "UI displays live, accurate data reflecting the integrated system state (as confirmed in prior phases).",
    "A functional SaaS scaffold is generated.",
    "Final artifact package is created successfully."
  ],
  "dependencies": [
    "Completion of Phase 36.0"
  ]
}

