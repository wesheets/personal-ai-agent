{
  "phase_id": 24,
  "phase_title": "Phase 24: Self-Opposition, Complexity Audit & Justification Enhancements",
  "batches": [
    {
      "batch_id": "24.0",
      "title": "Design Self-Opposition Scenarios & Define Complexity Audit Process",
      "prompt": "Objective: Design scenarios for self-opposition testing and define the complexity audit process.\n1. **Dependency Check:** Ensure Phase 23 is complete.\n2. **Design Self-Opposition Scenarios:** Document scenarios (`/docs/testing/phase_24_scenarios.md`) designed to trigger active governance halts (belief conflicts, high risk/uncertainty, budget overruns, complexity threshold breaches) based on features activated up to Phase 23.\n3. **Define Complexity Audit Process:** Create `app/memory/complexity_audit_process.json` and schema. Define scope, metrics, frequency, and outputs.\n4. **Functional Validation:** Verify scenario docs exist. Verify audit process surface/schema created and defined.\n5. **Log Wiring & Validate:** Follow standard procedures.\n6. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Refine scenarios or audit process.",
      "components_to_build_or_verify": [
        "docs/testing/phase_24_scenarios.md",
        "app/memory/complexity_audit_process.json",
        "app/schemas/complexity_audit_process.schema.json"
      ],
      "expected_artifacts": [
        "/home/ubuntu/docs/testing/phase_24_scenarios.md",
        "/home/ubuntu/personal-ai-agent/app/memory/complexity_audit_process.json",
        "/home/ubuntu/personal-ai-agent/app/schemas/complexity_audit_process.schema.json"
      ],
      "verification_steps": [
        "Confirm scenario documentation created.",
        "Confirm complexity audit process surface/schema created and defined.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 24.0 to `true`."
      ],
      "dependencies": [
        "23.x"
      ],
      "verified": false
    },
    {
      "batch_id": "24.1",
      "title": "Execute Self-Opposition Challenge & Implement Complexity Audit Logic",
      "prompt": "Objective: Execute self-opposition scenarios demonstrating active governance halts and implement initial complexity audit logic.\n1. **Dependency Check:** Ensure batch 24.0 is `verified: true`. Ensure active governance mechanisms (belief cost, budget, complexity threshold, uncertainty escalation) are functional from Phases 21-23.\n2. **Execute Self-Opposition Scenarios:** Run loops (`loop_0037a`, `loop_0037b`, etc.) corresponding to scenarios from 24.0. These loops must attempt actions designed to trigger *active* halts/escalations by the governance mechanisms.\n3. **Implement Complexity Audit Logic:** Create initial `app/validators/complexity_auditor.py`. Implement logic to read `complexity_audit_process.json`, analyze metrics from `complexity_metrics.json`, and generate a basic audit report (`/logs/complexity_audit_report_manual_run.json`).\n4. **Integration & Test (Audit):** Manually trigger the complexity auditor script.\n5. **Functional Validation:** Verify self-opposition loops were *actively* halted/escalated by the correct governance mechanism *before mutation*, logging the specific governance reason clearly (check relevant logs like `loop_justification_log.json`, `uncertainty_escalation_log.json`, etc.). Verify complexity auditor runs and generates a report.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug governance activation logic in controller/guards (Phases 21-23) or complexity audit logic.",
      "components_to_build_or_verify": [
        "app/controllers/loop_controller.py",
        "app/validators/complexity_auditor.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/logs/loop_0037a_execution.log",
        "/home/ubuntu/logs/loop_0037b_execution.log",
        "Logs clearly demonstrating active governance halts/escalations with specific reasons",
        "/home/ubuntu/personal-ai-agent/app/logs/complexity_audit_report_manual_run.json"
      ],
      "verification_steps": [
        "Confirm self-opposition loops actively halted/escalated by governance with reasons logged.",
        "Confirm complexity auditor runs and generates a report.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 24.1 to `true`."
      ],
      "dependencies": [
        "24.0",
        "21.3",
        "21.4",
        "22.1",
        "22.3",
        "23.2"
      ],
      "verified": false
    },
    {
      "batch_id": "24.2",
      "title": "Implement Cross-Loop Justification Link Validation",
      "prompt": "Objective: Validate the integrity and usage of cross-loop justification links.\n1. **Dependency Check:** Ensure batch 21.1 is `verified: true`.\n2. **Implement Validation Logic:** Create/enhance `app/validators/justification_link_validator.py`. Implement logic to scan `loop_justification_log.json`, check validity of `linked_justification_refs`. Log anomalies to `/logs/justification_link_anomalies.log`.\n3. **Integration & Test:** Seed log with valid/invalid links. Run validator (`loop_0038`).\n4. **Functional Validation:** Verify validator runs. Verify anomaly log correctly identifies invalid links.\n5. **Log Wiring & Validate:** Follow standard procedures.\n6. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug validation logic.",
      "components_to_build_or_verify": [
        "app/validators/justification_link_validator.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/logs/justification_link_anomalies.log",
        "/home/ubuntu/logs/loop_0038_execution.log"
      ],
      "verification_steps": [
        "Confirm validation script runs.",
        "Confirm anomaly log correctly identifies invalid links.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 24.2 to `true`."
      ],
      "dependencies": [
        "21.1"
      ],
      "verified": false
    },
    {
      "batch_id": "24.3",
      "title": "Introduce Justification Chain Compression Surface & Collection",
      "prompt": "Objective: Set up the surface and basic data collection for justification chain summaries.\n1. **Dependency Check:** Ensure batch 21.1 is `verified: true`.\n2. **Build Summary Surface:** Create `app/memory/justification_thread_summaries.json` and schema.\n3. **Implement Basic Collection Logic:** Modify logging or create collector script. Identify relevant linked justification chains. Log source loop/justification IDs to summary surface (initially without narrative) for Phase 26.\n4. **Integration & Test:** Run loops (`loop_0039a`, `loop_0039b`) generating linked justifications.\n5. **Functional Validation:** Verify summary surface populated with source IDs for relevant chains.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug collection logic.",
      "components_to_build_or_verify": [
        "app/memory/justification_thread_summaries.json",
        "app/schemas/justification_thread_summaries.schema.json",
        "app/controllers/loop_controller.py"
      ],
      "expected_artifacts": [
        "/home/ubuntu/personal-ai-agent/app/memory/justification_thread_summaries.json",
        "/home/ubuntu/personal-ai-agent/app/schemas/justification_thread_summaries.schema.json",
        "/home/ubuntu/logs/loop_0039a_execution.log",
        "/home/ubuntu/logs/loop_0039b_execution.log"
      ],
      "verification_steps": [
        "Confirm summary surface/schema created.",
        "Confirm source loop/justification IDs collected.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 24.3 to `true`."
      ],
      "dependencies": [
        "21.1"
      ],
      "verified": false
    },
    {
      "batch_id": "24.4",
      "title": "Phase 24 Mini-Validation: Active Self-Opposition Halts",
      "prompt": "Objective: Validate the *active influence* of governance mechanisms triggering self-opposition halts as tested in Batch 24.1.\n1. **Dependency Check:** Ensure batch 24.1 is `verified: true`.\n2. **Select Scenario:** Choose one or two key self-opposition scenarios from 24.0 that were successfully executed in 24.1 (e.g., `loop_0037a` involving budget overrun, `loop_0037b` involving high uncertainty escalation).\n3. **Re-Execute Scenario(s):** Rerun the selected loop(s).\n4. **Functional Validation:** Analyze logs for the re-executed loop(s). Re-confirm that: a) the loop was actively halted/escalated by the expected governance mechanism, b) the logs clearly state the specific governance reason for the halt/escalation.\n5. **Log Wiring & Validate:** Follow standard procedures.\n6. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Revisit governance activation logic from Phases 21-23 or the halt logic in the controller/guards.",
      "components_to_build_or_verify": [
        "Loop execution environment",
        "Logging surfaces",
        "Active governance mechanisms (from Phases 21-23)"
      ],
      "expected_artifacts": [
        "Execution logs for re-run scenario(s) (e.g., /home/ubuntu/logs/loop_0037a_rerun.log)",
        "Logs clearly re-confirming active governance halts/escalations with specific reasons."
      ],
      "verification_steps": [
        "Confirm selected scenario(s) re-executed.",
        "Confirm logs show active halt/escalation by the expected governance mechanism with clear reasons.",
        "Confirm wiring validation passed.",
        "Update `verified` status for batch 24.4 to `true`."
      ],
      "dependencies": [
        "24.1"
      ],
      "verified": false
    }
  ]
}

