{
  "phases": [
    {
      "phase_id": 26,
      "phase_title": "Phase 26: Emotion Drift Tracking, Refactor Triggers & Justification Compression",
      "batches": [
        {
          "batch_id": "26.0",
          "title": "Integrate Emotion Drift Tracking",
          "prompt": "Objective: Integrate logic to track and apply emotion drift based on loop outcomes.\n1. **Dependency Check:** Ensure Phase 25 (specifically 25.3, as 25.4 was removed in prior revisions) is complete. Ensure `track_emotion_drift.py` exists.\n2. **Integrate Drift Tracking:** Modify `loop_controller.py` (or post-loop component) to call `track_emotion_drift.py` after loop completion. Pass agent IDs, loop ID, outcome (status, regret score), justification ref. Ensure script updates `agent_emotion_profile.json` and logs to `emotion_drift_tracker.json`.\n3. **Integration & Test:** Simulate loop completions (success/failure) (`loop_0044a`, `loop_0044b`).\n4. **Functional Validation:** Verify `emotion_drift_tracker.json` updated. Verify `agent_emotion_profile.json` reflects updated profile values.\n5. **Log Wiring & Validate:** Follow standard procedures.\n6. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug controller integration or drift tracking script.\n\n**CRITICAL FILE HANDLING INSTRUCTION (NON-NEGOTIABLE FOR AUDIT INTEGRITY):**\nFor any of the following critical files if modified or created by this batch (`file_tree.json`, `promethios_file_tree_plan.v3.1.5_runtime_synced.json`, `wiring_manifest.updated_phase22_36.json`, `loop_justification_log.json`, `agent_trust_score.json`, `agent_cognitive_budget.json`, `belief_weight_index.json`, `mutation_backlog.json`, `legacy_alignment_tracker.json`, `operator_override_log.json`, `loop_summary.json`, `reflection_thread.json`, `agent_emotion_profile.json`, `emotion_drift_tracker.json`):\n1.  **ALWAYS Load the FULL prior version of the file.**\n2.  **ALWAYS Append/merge new changes schema-conformantly.**\n3.  **ALWAYS Save and ensure the ENTIRE, COMPLETE file (NO PARTIALS, NO DELTAS) is the output and is available for subsequent operations.**\nThis applies to all memory surfaces, logs, and tracking files.\n\n**File Output Formalization for this Batch (26.0):**\n1.  **Wiring Manifest (`/home/ubuntu/wiring_manifest.updated_phase22_36.json`):**\n    For each loop executed in this batch:\n    - Append a new JSON object entry to `/home/ubuntu/wiring_manifest.updated_phase22_36.json`.\n    - Entry fields: `batch_id`: \"26.0\", `loop_id`: \"<loop_id_executed>\", `controller_invoked`: \"<controller_script_name>\", `memory_surfaces_written`: [\"/home/ubuntu/personal-ai-agent/app/memory/agent_emotion_profile.json\", \"/home/ubuntu/personal-ai-agent/app/memory/emotion_drift_tracker.json\", ...other_relevant_logs], `timestamp`: \"<ISO_8601_timestamp>\", `schema_version`: \"1.0\".\n    - Use \"unknown\" for undeterminable values; do not omit keys.\n2.  **File Tree (`/home/ubuntu/file_tree.updated_post_phase36.json`):**\n    Upon batch completion:\n    - Read the current `/home/ubuntu/file_tree.updated_post_phase36.json`.\n    - Add/update entries for files created/modified *by this batch* (26.0).\n    - Entry fields: `path`: \"<absolute_path>\", `status`: \"<created/modified>\", `type`: \"<file/directory/unknown>\", `added_by`: \"<agent_id_or_script>\".\n    - Write back the merged file tree.\n3.  **Promethios File Tree Plan (`/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json`):**\n    Upon batch completion:\n    - Regenerate/update `/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json`.\n    - It must list all files from Phase 22 up to this batch\"s (26.0) completion.\n    - Entry fields: `path`: \"<absolute_path>\", `type`: \"<file/directory/unknown>\", `status`: \"<created/modified/existing>\", `batch_id`: \"<batch_id_of_creation_or_last_update>\", `added_by`: \"<agent_id_or_script>\".\n    - Ensure consistency with the updated `/home/ubuntu/file_tree.updated_post_phase36.json`.",
          "components_to_build_or_verify": [
            "app/controllers/loop_controller.py",
            "app/validators/track_emotion_drift.py",
            "app/memory/agent_emotion_profile.json",
            "app/memory/emotion_drift_tracker.json"
          ],
          "expected_artifacts": [
            "/home/ubuntu/personal-ai-agent/app/memory/agent_emotion_profile.json (entire file updated)",
            "/home/ubuntu/personal-ai-agent/app/memory/emotion_drift_tracker.json (entire file updated)",
            "/home/ubuntu/logs/loop_0044a_execution.log",
            "/home/ubuntu/logs/loop_0044b_execution.log",
            "/home/ubuntu/wiring_manifest.updated_phase22_36.json (entire file updated)",
            "/home/ubuntu/file_tree.updated_post_phase36.json (entire file updated)",
            "/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json (entire file updated)"
          ],
          "verification_steps": [
            "Confirm drift tracker log updated.",
            "Confirm agent profiles reflect drift.",
            "Confirm wiring validation passed.",
            "**CRITICAL VERIFICATION:** Confirm that ALL critical files modified/created in this batch (including `agent_emotion_profile.json`, `emotion_drift_tracker.json`, `wiring_manifest.updated_phase22_36.json`, `file_tree.updated_post_phase36.json`, `promethios_file_tree_plan.v3.1.5_runtime_synced.json`) were handled by: 1. Loading the FULL prior version. 2. Appending/merging new changes schema-conformantly. 3. Saving the ENTIRE, COMPLETE file. NO PARTIALS OR DELTAS ACCEPTED.",
            "Update `verified` status for batch 26.0 to `true`."
          ],
          "dependencies": [
            "25.3"
          ],
          "verified": false
        },
        {
          "batch_id": "26.1",
          "title": "Integrate Drift Awareness Assessment and Alerting",
          "prompt": "Objective: Implement logic to assess agent awareness of emotional drift and log alerts.\n1. **Dependency Check:** Ensure batch 26.0 is `verified: true`. Ensure `assess_drift_awareness.py` exists.\n2. **Integrate Awareness Assessment:** Modify `loop_controller.py` (or agent decision point) to call `assess_drift_awareness.py`. Ensure script updates `agent_emotion_state.json` with awareness score.\n3. **Implement Alerting:** Ensure `assess_drift_awareness.py` logs alert to `emotion_drift_alert_log.json` if awareness score exceeds threshold.\n4. **Integration & Test:** Simulate agent states leading to high awareness score (`loop_0045`).\n5. **Functional Validation:** Verify `agent_emotion_state.json` updated with awareness score. Verify `emotion_drift_alert_log.json` populated if threshold exceeded.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug controller integration or awareness assessment/alerting script.\n\n**CRITICAL FILE HANDLING INSTRUCTION (NON-NEGOTIABLE FOR AUDIT INTEGRITY):**\nFor any of the following critical files if modified or created by this batch (`file_tree.json`, `promethios_file_tree_plan.v3.1.5_runtime_synced.json`, `wiring_manifest.updated_phase22_36.json`, `loop_justification_log.json`, `agent_trust_score.json`, `agent_cognitive_budget.json`, `belief_weight_index.json`, `mutation_backlog.json`, `legacy_alignment_tracker.json`, `operator_override_log.json`, `loop_summary.json`, `reflection_thread.json`, `agent_emotion_state.json`, `emotion_drift_alert_log.json`):\n1.  **ALWAYS Load the FULL prior version of the file.**\n2.  **ALWAYS Append/merge new changes schema-conformantly.**\n3.  **ALWAYS Save and ensure the ENTIRE, COMPLETE file (NO PARTIALS, NO DELTAS) is the output and is available for subsequent operations.**\nThis applies to all memory surfaces, logs, and tracking files.\n\n**File Output Formalization for this Batch (26.1):**\n1.  **Wiring Manifest (`/home/ubuntu/wiring_manifest.updated_phase22_36.json`):**\n    For each loop executed in this batch:\n    - Append a new JSON object entry to `/home/ubuntu/wiring_manifest.updated_phase22_36.json`.\n    - Entry fields: `batch_id`: \"26.1\", `loop_id`: \"<loop_id_executed>\", `controller_invoked`: \"<controller_script_name>\", `memory_surfaces_written`: [\"/home/ubuntu/personal-ai-agent/app/memory/agent_emotion_state.json\", \"/home/ubuntu/personal-ai-agent/app/memory/emotion_drift_alert_log.json\", ...other_relevant_logs], `timestamp`: \"<ISO_8601_timestamp>\", `schema_version`: \"1.0\".\n    - Use \"unknown\" for undeterminable values; do not omit keys.\n2.  **File Tree (`/home/ubuntu/file_tree.updated_post_phase36.json`):**\n    Upon batch completion:\n    - Read the current `/home/ubuntu/file_tree.updated_post_phase36.json`.\n    - Add/update entries for files created/modified *by this batch* (26.1).\n    - Entry fields: `path`: \"<absolute_path>\", `status`: \"<created/modified>\", `type`: \"<file/directory/unknown>\", `added_by`: \"<agent_id_or_script>\".\n    - Write back the merged file tree.\n3.  **Promethios File Tree Plan (`/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json`):**\n    Upon batch completion:\n    - Regenerate/update `/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json`.\n    - It must list all files from Phase 22 up to this batch\"s (26.1) completion.\n    - Entry fields: `path`: \"<absolute_path>\", `type`: \"<file/directory/unknown>\", `status`: \"<created/modified/existing>\", `batch_id`: \"<batch_id_of_creation_or_last_update>\", `added_by`: \"<agent_id_or_script>\".\n    - Ensure consistency with the updated `/home/ubuntu/file_tree.updated_post_phase36.json`.",
          "components_to_build_or_verify": [
            "app/controllers/loop_controller.py",
            "app/validators/assess_drift_awareness.py",
            "app/memory/agent_emotion_state.json",
            "app/memory/emotion_drift_alert_log.json"
          ],
          "expected_artifacts": [
            "/home/ubuntu/personal-ai-agent/app/memory/agent_emotion_state.json (entire file updated)",
            "/home/ubuntu/personal-ai-agent/app/memory/emotion_drift_alert_log.json (entire file updated)",
            "/home/ubuntu/logs/loop_0045_execution.log",
            "/home/ubuntu/wiring_manifest.updated_phase22_36.json (entire file updated)",
            "/home/ubuntu/file_tree.updated_post_phase36.json (entire file updated)",
            "/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json (entire file updated)"
          ],
          "verification_steps": [
            "Confirm awareness score updated in agent state.",
            "Confirm alert log populated if threshold exceeded.",
            "Confirm wiring validation passed.",
            "**CRITICAL VERIFICATION:** Confirm that ALL critical files modified/created in this batch (including `agent_emotion_state.json`, `emotion_drift_alert_log.json`, `wiring_manifest.updated_phase22_36.json`, `file_tree.updated_post_phase36.json`, `promethios_file_tree_plan.v3.1.5_runtime_synced.json`) were handled by: 1. Loading the FULL prior version. 2. Appending/merging new changes schema-conformantly. 3. Saving the ENTIRE, COMPLETE file. NO PARTIALS OR DELTAS ACCEPTED.",
            "Update `verified` status for batch 26.1 to `true`."
          ],
          "dependencies": [
            "26.0"
          ],
          "verified": false
        },
        {
          "batch_id": "26.2",
          "title": "Implement Refactor Trigger Surface & Logic",
          "prompt": "Objective: Introduce mechanism to suggest refactoring based on cognitive metrics.\n1. **Dependency Check:** Ensure batches 19.3 (Regret Score), 21.1 (Complexity Metrics), 26.1 are `verified: true`.\n2. **Build Refactor Suggestion Surface:** Create `app/memory/refactor_suggestion_log.json` and schema (`app/schemas/refactor_suggestion_log.schema.json`). Include fields for suggested component, reason (e.g., high regret, high complexity, drift correlation), timestamp, priority.\n3. **Implement Trigger Logic:** Create/enhance a monitoring component (e.g., `cognitive_health_monitor.py` or integrate into post-loop processing). Implement logic to analyze `loop_regret_score.json`, `complexity_metrics.json`, `emotion_drift_tracker.json`. If thresholds are crossed (high regret trend, sustained high complexity, correlation between drift and failures), log a suggestion to `refactor_suggestion_log.json`.\n4. **Integration & Test:** Seed relevant logs to trigger refactor suggestions (`loop_0046`).\n5. **Functional Validation:** Verify `refactor_suggestion_log.json` is populated with appropriate suggestions based on seeded trigger conditions.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug trigger logic or log analysis.\n\n**CRITICAL FILE HANDLING INSTRUCTION (NON-NEGOTIABLE FOR AUDIT INTEGRITY):**\nFor any of the following critical files if modified or created by this batch (`file_tree.json`, `promethios_file_tree_plan.v3.1.5_runtime_synced.json`, `wiring_manifest.updated_phase22_36.json`, `loop_justification_log.json`, `agent_trust_score.json`, `agent_cognitive_budget.json`, `belief_weight_index.json`, `mutation_backlog.json`, `legacy_alignment_tracker.json`, `operator_override_log.json`, `loop_summary.json`, `reflection_thread.json`, `loop_regret_score.json`, `complexity_metrics.json`, `emotion_drift_tracker.json`, `refactor_suggestion_log.json`):\n1.  **ALWAYS Load the FULL prior version of the file.**\n2.  **ALWAYS Append/merge new changes schema-conformantly.**\n3.  **ALWAYS Save and ensure the ENTIRE, COMPLETE file (NO PARTIALS, NO DELTAS) is the output and is available for subsequent operations.**\nThis applies to all memory surfaces, logs, and tracking files.\n\n**File Output Formalization for this Batch (26.2):**\n1.  **Wiring Manifest (`/home/ubuntu/wiring_manifest.updated_phase22_36.json`):**\n    For each loop executed in this batch:\n    - Append a new JSON object entry to `/home/ubuntu/wiring_manifest.updated_phase22_36.json`.\n    - Entry fields: `batch_id`: \"26.2\", `loop_id`: \"<loop_id_executed>\", `controller_invoked`: \"<controller_script_name>\", `memory_surfaces_written`: [\"/home/ubuntu/personal-ai-agent/app/memory/refactor_suggestion_log.json\", ...other_relevant_logs], `timestamp`: \"<ISO_8601_timestamp>\", `schema_version`: \"1.0\".\n    - Use \"unknown\" for undeterminable values; do not omit keys.\n2.  **File Tree (`/home/ubuntu/file_tree.updated_post_phase36.json`):**\n    Upon batch completion:\n    - Read the current `/home/ubuntu/file_tree.updated_post_phase36.json`.\n    - Add/update entries for files created/modified *by this batch* (26.2).\n    - Entry fields: `path`: \"<absolute_path>\", `status`: \"<created/modified>\", `type`: \"<file/directory/unknown>\", `added_by`: \"<agent_id_or_script>\".\n    - Write back the merged file tree.\n3.  **Promethios File Tree Plan (`/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json`):**\n    Upon batch completion:\n    - Regenerate/update `/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json`.\n    - It must list all files from Phase 22 up to this batch\"s (26.2) completion.\n    - Entry fields: `path`: \"<absolute_path>\", `type`: \"<file/directory/unknown>\", `status`: \"<created/modified/existing>\", `batch_id`: \"<batch_id_of_creation_or_last_update>\", `added_by`: \"<agent_id_or_script>\".\n    - Ensure consistency with the updated `/home/ubuntu/file_tree.updated_post_phase36.json`.",
          "components_to_build_or_verify": [
            "app/memory/refactor_suggestion_log.json",
            "app/schemas/refactor_suggestion_log.schema.json",
            "app/validators/cognitive_health_monitor.py"
          ],
          "expected_artifacts": [
            "/home/ubuntu/personal-ai-agent/app/memory/refactor_suggestion_log.json (entire file updated)",
            "/home/ubuntu/personal-ai-agent/app/schemas/refactor_suggestion_log.schema.json",
            "/home/ubuntu/logs/loop_0046_execution.log",
            "/home/ubuntu/wiring_manifest.updated_phase22_36.json (entire file updated)",
            "/home/ubuntu/file_tree.updated_post_phase36.json (entire file updated)",
            "/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json (entire file updated)"
          ],
          "verification_steps": [
            "Confirm refactor suggestion surface/schema created.",
            "Confirm suggestions logged based on trigger conditions.",
            "Confirm wiring validation passed.",
            "**CRITICAL VERIFICATION:** Confirm that ALL critical files modified/created in this batch (including `refactor_suggestion_log.json`, `wiring_manifest.updated_phase22_36.json`, `file_tree.updated_post_phase36.json`, `promethios_file_tree_plan.v3.1.5_runtime_synced.json`) were handled by: 1. Loading the FULL prior version. 2. Appending/merging new changes schema-conformantly. 3. Saving the ENTIRE, COMPLETE file. NO PARTIALS OR DELTAS ACCEPTED.",
            "Update `verified` status for batch 26.2 to `true`."
          ],
          "dependencies": [
            "19.3",
            "21.1",
            "26.1"
          ],
          "verified": false
        },
        {
          "batch_id": "26.3",
          "title": "Implement Justification Chain Compression (Summarization Logic)",
          "prompt": "Objective: Implement logic to summarize collected justification chains.\n1. **Dependency Check:** Ensure batch 24.3 (Justification Compression Intro) is `verified: true`.\n2. **Implement Summarization Logic:** Create/enhance agent (e.g., `historian_agent.py` or enhance Critic/Architect) responsible for summarization. Implement logic to read collected source loop/justification IDs from `justification_thread_summaries.json` (or temp storage). Analyze the content of linked justifications. Generate concise, human-readable narrative summaries.\n3. **Update Summary Surface:** Update `justification_thread_summaries.json` entries with the generated narrative summaries.\n4. **Integration & Test:** Run summarization logic (`loop_0047`) against data collected in 24.3.\n5. **Functional Validation:** Verify `justification_thread_summaries.json` now contains narrative summaries corresponding to the collected source IDs. Check quality/accuracy of summaries.\n6. **Log Wiring & Validate:** Follow standard procedures.\n7. **Update Status:** If validation succeeds, set `verified: true`. Recovery: Debug summarization logic, justification analysis, or surface update.\n\n**CRITICAL FILE HANDLING INSTRUCTION (NON-NEGOTIABLE FOR AUDIT INTEGRITY):**\nFor any of the following critical files if modified or created by this batch (`file_tree.json`, `promethios_file_tree_plan.v3.1.5_runtime_synced.json`, `wiring_manifest.updated_phase22_36.json`, `loop_justification_log.json`, `agent_trust_score.json`, `agent_cognitive_budget.json`, `belief_weight_index.json`, `mutation_backlog.json`, `legacy_alignment_tracker.json`, `operator_override_log.json`, `loop_summary.json`, `reflection_thread.json`, `justification_thread_summaries.json`):\n1.  **ALWAYS Load the FULL prior version of the file.**\n2.  **ALWAYS Append/merge new changes schema-conformantly.**\n3.  **ALWAYS Save and ensure the ENTIRE, COMPLETE file (NO PARTIALS, NO DELTAS) is the output and is available for subsequent operations.**\nThis applies to all memory surfaces, logs, and tracking files.\n\n**File Output Formalization for this Batch (26.3):**\n1.  **Wiring Manifest (`/home/ubuntu/wiring_manifest.updated_phase22_36.json`):**\n    For each loop executed in this batch:\n    - Append a new JSON object entry to `/home/ubuntu/wiring_manifest.updated_phase22_36.json`.\n    - Entry fields: `batch_id`: \"26.3\", `loop_id`: \"<loop_id_executed>\", `controller_invoked`: \"<controller_script_name>\", `memory_surfaces_written`: [\"/home/ubuntu/personal-ai-agent/app/memory/justification_thread_summaries.json\", ...other_relevant_logs], `timestamp`: \"<ISO_8601_timestamp>\", `schema_version`: \"1.0\".\n    - Use \"unknown\" for undeterminable values; do not omit keys.\n2.  **File Tree (`/home/ubuntu/file_tree.updated_post_phase36.json`):**\n    Upon batch completion:\n    - Read the current `/home/ubuntu/file_tree.updated_post_phase36.json`.\n    - Add/update entries for files created/modified *by this batch* (26.3).\n    - Entry fields: `path`: \"<absolute_path>\", `status`: \"<created/modified>\", `type`: \"<file/directory/unknown>\", `added_by`: \"<agent_id_or_script>\".\n    - Write back the merged file tree.\n3.  **Promethios File Tree Plan (`/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json`):**\n    Upon batch completion:\n    - Regenerate/update `/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json`.\n    - It must list all files from Phase 22 up to this batch\"s (26.3) completion.\n    - Entry fields: `path`: \"<absolute_path>\", `type`: \"<file/directory/unknown>\", `status`: \"<created/modified/existing>\", `batch_id`: \"<batch_id_of_creation_or_last_update>\", `added_by`: \"<agent_id_or_script>\".\n    - Ensure consistency with the updated `/home/ubuntu/file_tree.updated_post_phase36.json`.",
          "components_to_build_or_verify": [
            "app/agents/historian_agent.py",
            "app/agents/critic_agent.py",
            "app/agents/architect_agent.py",
            "app/memory/justification_thread_summaries.json"
          ],
          "expected_artifacts": [
            "/home/ubuntu/personal-ai-agent/app/memory/justification_thread_summaries.json (entire file updated)",
            "/home/ubuntu/logs/loop_0047_execution.log",
            "/home/ubuntu/wiring_manifest.updated_phase22_36.json (entire file updated)",
            "/home/ubuntu/file_tree.updated_post_phase36.json (entire file updated)",
            "/home/ubuntu/promethios_file_tree_plan.v3.1.5_runtime_synced.json (entire file updated)"
          ],
          "verification_steps": [
            "Confirm narrative summaries generated and stored.",
            "Assess quality/accuracy of summaries.",
            "Confirm wiring validation passed.",
            "**CRITICAL VERIFICATION:** Confirm that ALL critical files modified/created in this batch (including `justification_thread_summaries.json`, `wiring_manifest.updated_phase22_36.json`, `file_tree.updated_post_phase36.json`, `promethios_file_tree_plan.v3.1.5_runtime_synced.json`) were handled by: 1. Loading the FULL prior version. 2. Appending/merging new changes schema-conformantly. 3. Saving the ENTIRE, COMPLETE file. NO PARTIALS OR DELTAS ACCEPTED.",
            "Update `verified` status for batch 26.3 to `true`."
          ],
          "dependencies": [
            "24.3"
          ],
          "verified": false
        }
      ]
    }
  ]
}
