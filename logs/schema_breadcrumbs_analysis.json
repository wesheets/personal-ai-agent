{
  "schema_route_map": {
    "agent_config_schema": {
      "schema_info": {
        "schema_name": "agent_config_schema",
        "module_name": "agent_config",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/agent_config_schema.py",
        "models": [
          {
            "name": "ToolPermission",
            "fields": {
              "tool_id": "str",
              "enabled": "bool",
              "permission_level": "PermissionLevel",
              "rate_limit": "Optional[...]"
            }
          },
          {
            "name": "FallbackBehavior",
            "fields": {
              "retry_count": "int",
              "fallback_agent": "Optional[...]",
              "error_response_template": "Optional[...]",
              "log_failures": "bool"
            }
          },
          {
            "name": "AgentConfigRequest",
            "fields": {
              "agent_id": "str",
              "permissions": "List[...]",
              "fallback_behavior": "Optional[...]",
              "memory_access_level": "PermissionLevel",
              "custom_settings": "Optional[...]"
            }
          },
          {
            "name": "AgentConfigResponse",
            "fields": {
              "agent_id": "str",
              "config_updated": "bool",
              "permissions_count": "int",
              "memory_access_level": "PermissionLevel",
              "fallback_configured": "bool",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentConfigError",
            "fields": {
              "message": "str",
              "agent_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentConfigGetRequest",
            "fields": {
              "agent_id": "str"
            }
          },
          {
            "name": "AgentConfigGetResponse",
            "fields": {
              "agent_id": "str",
              "permissions": "List[...]",
              "fallback_behavior": "Optional[...]",
              "memory_access_level": "PermissionLevel",
              "custom_settings": "Dict[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/agent_config",
          "/agent_config/status",
          "/agent_config/create",
          "/agent_config/update",
          "/agent_config/delete",
          "/agent_config/list",
          "/agent_config/get",
          "/agent_config/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/agent_config_routes.py",
      "actual_routes": [
        "/config",
        "/config/{agent_id}",
        "/config/{agent_id}"
      ]
    },
    "agent_context_schema": {
      "schema_info": {
        "schema_name": "agent_context_schema",
        "module_name": "agent_context",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/agent_context_schema.py",
        "models": [
          {
            "name": "MemoryUsage",
            "fields": {
              "total_entries": "int",
              "recent_entries": "int",
              "tags_count": "Dict[...]",
              "size_bytes": "Optional[...]"
            }
          },
          {
            "name": "LoopState",
            "fields": {
              "loop_id": "str",
              "current_step": "int",
              "total_steps": "int",
              "started_at": "str",
              "last_updated": "str",
              "state": "str"
            }
          },
          {
            "name": "LastAgentAction",
            "fields": {
              "agent_id": "str",
              "action_type": "str",
              "timestamp": "str",
              "status": "str",
              "details": "Optional[...]"
            }
          },
          {
            "name": "AgentContextRequest",
            "fields": {
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "include_memory_stats": "bool"
            }
          },
          {
            "name": "AgentContextResponse",
            "fields": {
              "agent_id": "str",
              "state": "AgentState",
              "loop_state": "Optional[...]",
              "last_action": "Optional[...]",
              "memory_usage": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentContextError",
            "fields": {
              "message": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/agent_context",
          "/agent_context/status",
          "/agent_context/create",
          "/agent_context/update",
          "/agent_context/delete",
          "/agent_context/list",
          "/agent_context/get",
          "/agent_context/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/agent_context_routes.py",
      "actual_routes": [
        "/context",
        "/context/{agent_id}"
      ]
    },
    "agent_contract_schema": {
      "schema_info": {
        "schema_name": "agent_contract_schema",
        "module_name": "agent_contract",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/agent_contract_schema.py",
        "models": [
          {
            "name": "AgentContract",
            "fields": {
              "agent_id": "str",
              "accepted_input_schema": "str",
              "expected_output_schema": "str",
              "allowed_tools": "List[...]",
              "fallback_behaviors": "List[...]",
              "output_must_be_wrapped": "bool",
              "can_initiate_recovery": "bool",
              "created_at": "datetime",
              "updated_at": "Optional[...]",
              "version": "str"
            }
          },
          {
            "name": "ContractViolation",
            "fields": {
              "agent_id": "str",
              "violation_type": "str",
              "details": "str",
              "input_schema": "Optional[...]",
              "output_schema": "Optional[...]",
              "tool_used": "Optional[...]",
              "timestamp": "datetime"
            }
          },
          {
            "name": "ContractValidationRequest",
            "fields": {
              "agent_id": "str",
              "input_schema": "Optional[...]",
              "output_schema": "Optional[...]",
              "tool_used": "Optional[...]"
            }
          },
          {
            "name": "ContractValidationResponse",
            "fields": {
              "agent_id": "str",
              "valid": "bool",
              "violations": "List[...]"
            }
          }
        ],
        "potential_routes": [
          "/agent_contract",
          "/agent_contract/status",
          "/agent_contract/create",
          "/agent_contract/update",
          "/agent_contract/delete",
          "/agent_contract/list",
          "/agent_contract/get",
          "/agent_contract/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "ash_schema": {
      "schema_info": {
        "schema_name": "ash_schema",
        "module_name": "ash",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/ash_schema.py",
        "models": [
          {
            "name": "AshAnalysisRequest",
            "fields": {
              "scenario_id": "str",
              "context": "Dict[...]",
              "constraints": "Optional[...]",
              "risk_tolerance": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "RiskFactor",
            "fields": {
              "factor_id": "str",
              "name": "str",
              "probability": "float",
              "impact": "float",
              "description": "str",
              "mitigation_strategies": "Optional[...]"
            }
          },
          {
            "name": "AshAnalysisResult",
            "fields": {
              "status": "str",
              "scenario_id": "str",
              "risk_assessment": "Optional[...]",
              "risk_factors": "Optional[...]",
              "anomalies_detected": "Optional[...]",
              "recommended_actions": "Optional[...]",
              "overall_risk_score": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "AshTestRequest",
            "fields": {
              "scenario_id": "str",
              "test_parameters": "Dict[...]",
              "expected_outcomes": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "TestResult",
            "fields": {
              "test_id": "str",
              "name": "str",
              "status": "str",
              "description": "str",
              "actual_outcome": "str",
              "expected_outcome": "Optional[...]"
            }
          },
          {
            "name": "AshTestResult",
            "fields": {
              "status": "str",
              "scenario_id": "str",
              "test_summary": "Optional[...]",
              "test_results": "Optional[...]",
              "anomalies_detected": "Optional[...]",
              "recommendations": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "AshErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "scenario_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ],
        "potential_routes": [
          "/ash",
          "/ash/status",
          "/ash/create",
          "/ash/update",
          "/ash/delete",
          "/ash/list",
          "/ash/get",
          "/ash/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/ash_routes.py",
      "actual_routes": [
        "/analyze",
        "/test"
      ]
    },
    "ceo_schema": {
      "schema_info": {
        "schema_name": "ceo_schema",
        "module_name": "ceo",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/ceo_schema.py",
        "models": [
          {
            "name": "CEOReviewRequest",
            "fields": {
              "project_id": "str",
              "plan_id": "Optional[...]",
              "context": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "AgentAllocation",
            "fields": {
              "agent_id": "str",
              "role": "str",
              "priority": "int",
              "estimated_duration": "Optional[...]",
              "dependencies": "Optional[...]"
            }
          },
          {
            "name": "CEOPlanResult",
            "fields": {
              "status": "str",
              "project_id": "str",
              "plan_id": "Optional[...]",
              "strategic_assessment": "Optional[...]",
              "agent_allocations": "Optional[...]",
              "recommendations": "Optional[...]",
              "reorganization_needed": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "CEOErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "project_id": "Optional[...]",
              "plan_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ],
        "potential_routes": [
          "/ceo",
          "/ceo/status",
          "/ceo/create",
          "/ceo/update",
          "/ceo/delete",
          "/ceo/list",
          "/ceo/get",
          "/ceo/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "critic_schema": {
      "schema_info": {
        "schema_name": "critic_schema",
        "module_name": "critic",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/critic_schema.py",
        "models": [
          {
            "name": "CriticReviewRequest",
            "fields": {
              "loop_id": "str",
              "agent_outputs": "Dict[...]",
              "project_id": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "CriticScores",
            "fields": {
              "technical_accuracy": "int",
              "ux_clarity": "int",
              "visual_design": "int",
              "monetization_strategy": "int"
            }
          },
          {
            "name": "CriticUsage",
            "fields": {
              "prompt_tokens": "int",
              "completion_tokens": "int",
              "total_tokens": "int"
            }
          },
          {
            "name": "CriticReviewResult",
            "fields": {
              "status": "str",
              "loop_id": "str",
              "reflection": "Optional[...]",
              "scores": "Optional[...]",
              "rejection": "Optional[...]",
              "rejection_reason": "Optional[...]",
              "usage": "Optional[...]",
              "timestamp": "Optional[...]",
              "message": "Optional[...]",
              "raw_response": "Optional[...]"
            }
          },
          {
            "name": "CriticRejectRequest",
            "fields": {
              "loop_id": "str",
              "reason": "str",
              "project_id": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "CriticRejectResult",
            "fields": {
              "status": "str",
              "loop_id": "str",
              "rejection": "bool",
              "rejection_reason": "str",
              "timestamp": "Optional[...]",
              "message": "Optional[...]"
            }
          },
          {
            "name": "CriticLogReasonRequest",
            "fields": {
              "loop_id": "str",
              "reason_type": "str",
              "reason_text": "str",
              "project_id": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "CriticLogReasonResult",
            "fields": {
              "status": "str",
              "loop_id": "str",
              "reason_type": "str",
              "reason_text": "str",
              "timestamp": "Optional[...]",
              "message": "Optional[...]"
            }
          },
          {
            "name": "CriticErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "Optional[...]",
              "tools": "Optional[...]",
              "project_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/critic",
          "/critic/status",
          "/critic/create",
          "/critic/update",
          "/critic/delete",
          "/critic/list",
          "/critic/get",
          "/critic/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/critic_router.py",
      "actual_routes": [
        "/critic/status"
      ]
    },
    "cto_schema": {
      "schema_info": {
        "schema_name": "cto_schema",
        "module_name": "cto",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/cto_schema.py",
        "models": [
          {
            "name": "CTOAuditRequest",
            "fields": {
              "project_id": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "CTOIssue",
            "fields": {
              "issue_type": "str",
              "details": "Any",
              "severity": "Optional[...]"
            }
          },
          {
            "name": "CTOAuditResult",
            "fields": {
              "status": "str",
              "project_id": "str",
              "loop": "int",
              "timestamp": "str",
              "issues_found": "bool",
              "issues": "Dict[...]",
              "summary": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "CTOErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "project_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ],
        "potential_routes": [
          "/cto",
          "/cto/status",
          "/cto/create",
          "/cto/update",
          "/cto/delete",
          "/cto/list",
          "/cto/get",
          "/cto/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/cto_router.py",
      "actual_routes": [
        "/cto/status"
      ]
    },
    "debug_schema": {
      "schema_info": {
        "schema_name": "debug_schema",
        "module_name": "debug",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/debug_schema.py",
        "models": [
          {
            "name": "LoopDebugRequest",
            "fields": {
              "loop_id": "str",
              "project_id": "str",
              "agent_filter": "Optional[...]",
              "raw_log_text": "Optional[...]",
              "version": "Optional[...]"
            }
          },
          {
            "name": "LoopIssue",
            "fields": {
              "issue_type": "str",
              "description": "str",
              "severity": "str",
              "affected_agent": "Optional[...]",
              "affected_memory_tags": "Optional[...]",
              "timestamp": "Optional[...]"
            }
          },
          {
            "name": "RepairSuggestion",
            "fields": {
              "suggestion_type": "str",
              "description": "str",
              "priority": "int",
              "target_agent": "Optional[...]",
              "required_changes": "Optional[...]",
              "expected_outcome": "str"
            }
          },
          {
            "name": "LoopDebugResult",
            "fields": {
              "loop_id": "str",
              "project_id": "str",
              "issues": "List[...]",
              "agents": "List[...]",
              "failed_agents": "List[...]",
              "memory_tags_checked": "List[...]",
              "recommendations": "List[...]",
              "confidence_score": "float",
              "analysis_timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/debug",
          "/debug/status",
          "/debug/create",
          "/debug/update",
          "/debug/delete",
          "/debug/list",
          "/debug/get",
          "/debug/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/debug_router.py",
      "actual_routes": [
        "/status"
      ]
    },
    "debugger_schema": {
      "schema_info": {
        "schema_name": "debugger_schema",
        "module_name": "debugger",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/debugger_schema.py",
        "models": [
          {
            "name": "PatchPlan",
            "fields": {
              "steps": "List[...]",
              "confidence": "float"
            }
          },
          {
            "name": "DebuggerReport",
            "fields": {
              "loop_id": "str",
              "timestamp": "str",
              "failure_type": "str",
              "details": "Dict[...]",
              "suggested_fix": "str",
              "patch_plan": "PatchPlan",
              "next_agent": "str"
            }
          },
          {
            "name": "DebuggerTraceRequest",
            "fields": {
              "loop_id": "str",
              "failure_logs": "str",
              "memory": "Dict[...]",
              "loop_context": "Optional[...]",
              "memory_tag": "Optional[...]"
            }
          },
          {
            "name": "DebuggerTraceResult",
            "fields": {
              "updated_memory": "Dict[...]",
              "failure_type": "str",
              "patch_plan": "PatchPlan",
              "next_agent": "str",
              "suggested_fix": "str",
              "report": "DebuggerReport"
            }
          }
        ],
        "potential_routes": [
          "/debugger",
          "/debugger/status",
          "/debugger/create",
          "/debugger/update",
          "/debugger/delete",
          "/debugger/list",
          "/debugger/get",
          "/debugger/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/debugger_router.py",
      "actual_routes": [
        "/debugger/status"
      ]
    },
    "delegate_stream_schema": {
      "schema_info": {
        "schema_name": "delegate_stream_schema",
        "module_name": "delegate_stream",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/delegate_stream_schema.py",
        "models": [
          {
            "name": "StreamRequest",
            "fields": {
              "stream_type": "StreamType",
              "target_id": "str",
              "description": "str",
              "priority": "StreamPriority",
              "filters": "Optional[...]",
              "max_events": "Optional[...]",
              "timeout_seconds": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "StreamResponse",
            "fields": {
              "stream_id": "str",
              "stream_type": "StreamType",
              "target_id": "str",
              "status": "str",
              "connection_url": "str",
              "token": "str",
              "expires_at": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamError",
            "fields": {
              "message": "str",
              "stream_type": "Optional[...]",
              "target_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamStatusRequest",
            "fields": {
              "stream_id": "str"
            }
          },
          {
            "name": "StreamStatusResponse",
            "fields": {
              "stream_id": "str",
              "stream_type": "StreamType",
              "target_id": "str",
              "status": "str",
              "events_streamed": "int",
              "connected_clients": "int",
              "created_at": "str",
              "expires_at": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamCloseRequest",
            "fields": {
              "stream_id": "str",
              "reason": "Optional[...]"
            }
          },
          {
            "name": "StreamCloseResponse",
            "fields": {
              "stream_id": "str",
              "status": "str",
              "events_streamed": "int",
              "duration_seconds": "int",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamEvent",
            "fields": {
              "event_id": "str",
              "stream_id": "str",
              "event_type": "str",
              "source": "str",
              "data": "Dict[...]",
              "timestamp": "str"
            }
          }
        ],
        "potential_routes": [
          "/delegate_stream",
          "/delegate_stream/status",
          "/delegate_stream/create",
          "/delegate_stream/update",
          "/delegate_stream/delete",
          "/delegate_stream/list",
          "/delegate_stream/get",
          "/delegate_stream/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/delegate_stream_routes.py",
      "actual_routes": [
        "/status/{stream_id}",
        "/status",
        "/close"
      ]
    },
    "drift_schema": {
      "schema_info": {
        "schema_name": "drift_schema",
        "module_name": "drift",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/drift_schema.py",
        "models": [
          {
            "name": "DriftMonitorRequest",
            "fields": {
              "loop_id": "str",
              "agent": "str",
              "current_output_tag": "str",
              "previous_output_tag": "Optional[...]",
              "snapshot_id": "Optional[...]",
              "threshold": "Optional[...]"
            }
          },
          {
            "name": "LoopDriftLog",
            "fields": {
              "loop_id": "str",
              "agent": "str",
              "snapshot_id": "Optional[...]",
              "previous_checksum": "str",
              "current_checksum": "str",
              "drift_detected": "bool",
              "drift_score": "Optional[...]",
              "explanation": "Optional[...]",
              "timestamp": "datetime"
            }
          },
          {
            "name": "DriftMonitorResponse",
            "fields": {
              "status": "str",
              "drift_log": "LoopDriftLog",
              "recommended_action": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/drift",
          "/drift/status",
          "/drift/create",
          "/drift/update",
          "/drift/delete",
          "/drift/list",
          "/drift/get",
          "/drift/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/drift_routes.py",
      "actual_routes": [
        "/drift/monitor",
        "/drift/history/{loop_id}"
      ]
    },
    "export_schema": {
      "schema_info": {
        "schema_name": "export_schema",
        "module_name": "export",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/export_schema.py",
        "models": [
          {
            "name": "ExportRequest",
            "fields": {
              "export_type": "ExportType",
              "export_id": "str",
              "format": "ExportFormat",
              "include_metadata": "bool",
              "filters": "Optional[...]",
              "start_date": "Optional[...]",
              "end_date": "Optional[...]",
              "max_items": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "ExportResponse",
            "fields": {
              "export_id": "str",
              "export_type": "ExportType",
              "format": "ExportFormat",
              "file_name": "str",
              "file_size": "int",
              "download_url": "str",
              "expires_at": "str",
              "items_exported": "int",
              "include_metadata": "bool",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "ExportError",
            "fields": {
              "message": "str",
              "export_type": "Optional[...]",
              "export_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "ExportStatusRequest",
            "fields": {
              "export_id": "str"
            }
          },
          {
            "name": "ExportStatusResponse",
            "fields": {
              "export_id": "str",
              "status": "str",
              "progress": "Optional[...]",
              "items_processed": "Optional[...]",
              "total_items": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "download_url": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/export",
          "/export/status",
          "/export/create",
          "/export/update",
          "/export/delete",
          "/export/list",
          "/export/get",
          "/export/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/export_routes.py",
      "actual_routes": [
        "/status/{export_id}",
        "/status"
      ]
    },
    "fix_schema": {
      "schema_info": {
        "schema_name": "fix_schema",
        "module_name": "fix",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/fix_schema.py",
        "models": [
          {
            "name": "FixRequest",
            "fields": {
              "fix_type": "FixType",
              "target_id": "str",
              "description": "str",
              "parameters": "Optional[...]",
              "force": "bool",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "FixResponse",
            "fields": {
              "fix_id": "str",
              "fix_type": "FixType",
              "target_id": "str",
              "status": "str",
              "changes_made": "List[...]",
              "warnings": "List[...]",
              "backup_id": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixError",
            "fields": {
              "message": "str",
              "fix_type": "Optional[...]",
              "target_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixStatusRequest",
            "fields": {
              "fix_id": "str"
            }
          },
          {
            "name": "FixStatusResponse",
            "fields": {
              "fix_id": "str",
              "fix_type": "FixType",
              "target_id": "str",
              "status": "str",
              "progress": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "changes_made": "Optional[...]",
              "warnings": "Optional[...]",
              "error_message": "Optional[...]",
              "backup_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixRollbackRequest",
            "fields": {
              "fix_id": "str",
              "reason": "Optional[...]"
            }
          },
          {
            "name": "FixRollbackResponse",
            "fields": {
              "fix_id": "str",
              "rollback_id": "str",
              "status": "str",
              "changes_reverted": "List[...]",
              "warnings": "List[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/fix",
          "/fix/status",
          "/fix/create",
          "/fix/update",
          "/fix/delete",
          "/fix/list",
          "/fix/get",
          "/fix/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/fix_routes.py",
      "actual_routes": [
        "/status/{fix_id}",
        "/status",
        "/rollback"
      ]
    },
    "forge_schema": {
      "schema_info": {
        "schema_name": "forge_schema",
        "module_name": "forge",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/forge_schema.py",
        "models": [
          {
            "name": "ForgeBuildRequest",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "components": "List[...]",
              "version": "Optional[...]",
              "hal_result_tag": "Optional[...]"
            }
          },
          {
            "name": "ComponentBuildResult",
            "fields": {
              "component_name": "str",
              "files_created": "List[...]",
              "status": "str",
              "error": "Optional[...]"
            }
          },
          {
            "name": "ForgeBuildResult",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "components_built": "List[...]",
              "files_created": "List[...]",
              "manifest_updated": "bool",
              "routes_registered": "List[...]",
              "version": "str",
              "status": "str",
              "timestamp": "str",
              "error": "Optional[...]",
              "next_steps": "Optional[...]"
            }
          },
          {
            "name": "ForgeRevisionRequest",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "components": "List[...]",
              "previous_version": "str",
              "new_version": "str",
              "revision_reason": "str",
              "critic_feedback_tag": "Optional[...]"
            }
          },
          {
            "name": "ForgeRevisionResult",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "components_revised": "List[...]",
              "files_modified": "List[...]",
              "files_created": "List[...]",
              "manifest_updated": "bool",
              "previous_version": "str",
              "new_version": "str",
              "status": "str",
              "timestamp": "str",
              "error": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/forge",
          "/forge/status",
          "/forge/create",
          "/forge/update",
          "/forge/delete",
          "/forge/list",
          "/forge/get",
          "/forge/search"
        ],
        "route_hints": [
          "/api/new_endpoint"
        ]
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/forge_routes.py",
      "actual_routes": [
        "/forge/build"
      ]
    },
    "guardian_schema": {
      "schema_info": {
        "schema_name": "guardian_schema",
        "module_name": "guardian",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/guardian_schema.py",
        "models": [
          {
            "name": "GuardianAlertRequest",
            "fields": {
              "alert_type": "str",
              "severity": "str",
              "loop_id": "Optional[...]",
              "project_id": "Optional[...]",
              "description": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "GuardianResponse",
            "fields": {
              "status": "str",
              "alert_id": "str",
              "alert_type": "str",
              "severity": "str",
              "actions_taken": "List[...]",
              "system_status": "str",
              "operator_notified": "bool",
              "rollback_status": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "GuardianRollbackRequest",
            "fields": {
              "loop_id": "str",
              "reason": "str",
              "rollback_to_step": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "GuardianRollbackResult",
            "fields": {
              "status": "str",
              "loop_id": "str",
              "original_step": "int",
              "current_step": "int",
              "reason": "str",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "GuardianErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "alert_type": "Optional[...]",
              "severity": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ],
        "potential_routes": [
          "/guardian",
          "/guardian/status",
          "/guardian/create",
          "/guardian/update",
          "/guardian/delete",
          "/guardian/list",
          "/guardian/get",
          "/guardian/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/guardian_router.py",
      "actual_routes": [
        "/guardian/status"
      ]
    },
    "health_monitor_schema": {
      "schema_info": {
        "schema_name": "health_monitor_schema",
        "module_name": "health_monitor",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/health_monitor_schema.py",
        "models": [
          {
            "name": "HealthMetric",
            "fields": {
              "name": "str",
              "value": "Union[...]",
              "unit": "Optional[...]",
              "threshold_warning": "Optional[...]",
              "threshold_critical": "Optional[...]",
              "status": "HealthStatus",
              "timestamp": "datetime"
            }
          },
          {
            "name": "ComponentHealth",
            "fields": {
              "component_id": "str",
              "component_name": "str",
              "component_type": "ComponentType",
              "status": "HealthStatus",
              "metrics": "List[...]",
              "last_checked": "datetime",
              "issues": "List[...]",
              "recommendations": "List[...]"
            }
          },
          {
            "name": "SystemHealthSummary",
            "fields": {
              "overall_status": "HealthStatus",
              "component_statuses": "Dict[...]",
              "critical_issues_count": "int",
              "warning_issues_count": "int",
              "healthy_components_count": "int",
              "total_components_count": "int",
              "last_updated": "datetime"
            }
          },
          {
            "name": "HealthCheckRequest",
            "fields": {
              "component_id": "Optional[...]",
              "component_type": "Optional[...]",
              "include_metrics": "bool",
              "include_recommendations": "bool"
            }
          },
          {
            "name": "HealthCheckResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "summary": "SystemHealthSummary",
              "components": "List[...]"
            }
          },
          {
            "name": "PredictiveMaintenanceRequest",
            "fields": {
              "component_id": "Optional[...]",
              "component_type": "Optional[...]",
              "time_horizon_hours": "int",
              "confidence_threshold": "float"
            }
          },
          {
            "name": "MaintenancePrediction",
            "fields": {
              "component_id": "str",
              "component_name": "str",
              "component_type": "ComponentType",
              "predicted_issue": "str",
              "confidence": "float",
              "time_to_failure": "Optional[...]",
              "recommended_action": "str",
              "priority": "str",
              "prediction_timestamp": "datetime"
            }
          },
          {
            "name": "PredictiveMaintenanceResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "predictions": "List[...]",
              "total_predictions_count": "int",
              "high_priority_count": "int",
              "medium_priority_count": "int",
              "low_priority_count": "int"
            }
          },
          {
            "name": "SelfHealingRequest",
            "fields": {
              "component_id": "str",
              "issue_description": "str",
              "suggested_actions": "List[...]",
              "auto_approve": "bool",
              "max_impact_level": "str"
            }
          },
          {
            "name": "HealingActionResult",
            "fields": {
              "action": "SelfHealingAction",
              "success": "bool",
              "timestamp": "datetime",
              "details": "str",
              "impact_level": "str",
              "duration_ms": "int"
            }
          },
          {
            "name": "SelfHealingResponse",
            "fields": {
              "request_id": "str",
              "component_id": "str",
              "timestamp": "datetime",
              "issue_resolved": "bool",
              "actions_performed": "List[...]",
              "current_status": "HealthStatus",
              "recommendations": "List[...]"
            }
          },
          {
            "name": "HealthMonitorConfigRequest",
            "fields": {
              "check_interval_seconds": "Optional[...]",
              "enable_predictive_maintenance": "Optional[...]",
              "enable_self_healing": "Optional[...]",
              "alert_thresholds": "Optional[...]",
              "excluded_components": "Optional[...]"
            }
          },
          {
            "name": "HealthMonitorConfigResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "current_config": "Dict",
              "changes_applied": "Dict",
              "restart_required": "bool"
            }
          }
        ],
        "potential_routes": [
          "/health_monitor",
          "/health_monitor/status",
          "/health_monitor/create",
          "/health_monitor/update",
          "/health_monitor/delete",
          "/health_monitor/list",
          "/health_monitor/get",
          "/health_monitor/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/health_monitor_routes.py",
      "actual_routes": [
        "/health/check",
        "/health/check/{component_id}",
        "/health/system",
        "/health/maintenance/predict",
        "/health/maintenance/predict/{component_id}",
        "/health/healing",
        "/health/config",
        "/health/config"
      ]
    },
    "historian_schema": {
      "schema_info": {
        "schema_name": "historian_schema",
        "module_name": "historian",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/historian_schema.py",
        "models": [
          {
            "name": "BeliefAlignmentScore",
            "fields": {
              "alignment_score": "float",
              "missing_beliefs": "List[...]"
            }
          },
          {
            "name": "HistorianAlert",
            "fields": {
              "loop_id": "str",
              "alert_type": "str",
              "missing_beliefs": "List[...]",
              "loop_belief_alignment_score": "float",
              "suggestion": "str",
              "timestamp": "str"
            }
          },
          {
            "name": "HistorianDriftRequest",
            "fields": {
              "loop_id": "str",
              "loop_summary": "str",
              "recent_loops": "List[...]",
              "beliefs": "List[...]",
              "memory": "Dict[...]",
              "memory_tag": "Optional[...]"
            }
          },
          {
            "name": "HistorianDriftResult",
            "fields": {
              "updated_memory": "Dict[...]",
              "alignment_score": "float",
              "missing_beliefs": "List[...]",
              "suggestion": "str",
              "alert": "HistorianAlert"
            }
          }
        ],
        "potential_routes": [
          "/historian",
          "/historian/status",
          "/historian/create",
          "/historian/update",
          "/historian/delete",
          "/historian/list",
          "/historian/get",
          "/historian/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/historian_router.py",
      "actual_routes": [
        "/historian/status"
      ]
    },
    "loop_schema": {
      "schema_info": {
        "schema_name": "loop_schema",
        "module_name": "loop",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/loop_schema.py",
        "models": [
          {
            "name": "LoopResponseRequest",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "agent": "str",
              "input_key": "str",
              "target_file": "str",
              "model": "Optional[...]",
              "temperature": "Optional[...]",
              "max_tokens": "Optional[...]",
              "metadata": "Optional[...]"
            }
          },
          {
            "name": "LoopResponseResult",
            "fields": {
              "status": "str",
              "output_tag": "str",
              "timestamp": "str",
              "code": "str",
              "metadata": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/loop",
          "/loop/status",
          "/loop/create",
          "/loop/update",
          "/loop/delete",
          "/loop/list",
          "/loop/get",
          "/loop/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/loop_router.py",
      "actual_routes": [
        "/loop/status"
      ]
    },
    "loop_snapshot_schema": {
      "schema_info": {
        "schema_name": "loop_snapshot_schema",
        "module_name": "loop_snapshot",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/loop_snapshot_schema.py",
        "models": [
          {
            "name": "LoopSnapshot",
            "fields": {
              "loop_id": "str",
              "timestamp": "datetime",
              "agent_sequence": "List[...]",
              "memory_state": "Dict[...]",
              "notes": "Optional[...]"
            }
          },
          {
            "name": "SnapshotSaveRequest",
            "fields": {
              "loop_id": "str",
              "notes": "Optional[...]"
            }
          },
          {
            "name": "SnapshotRestoreRequest",
            "fields": {
              "loop_id": "str"
            }
          },
          {
            "name": "SnapshotResponse",
            "fields": {
              "status": "str",
              "loop_id": "str",
              "timestamp": "datetime",
              "message": "str",
              "snapshot_data": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/loop_snapshot",
          "/loop_snapshot/status",
          "/loop_snapshot/create",
          "/loop_snapshot/update",
          "/loop_snapshot/delete",
          "/loop_snapshot/list",
          "/loop_snapshot/get",
          "/loop_snapshot/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "loop_trace": {
      "schema_info": {
        "schema_name": "loop_trace",
        "module_name": "loop_trace",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/loop_trace.py",
        "models": [
          {
            "name": "LoopTraceItem",
            "fields": {
              "loop_id": "str",
              "status": "LoopStatus",
              "timestamp": "str",
              "summary": "Optional[...]",
              "rerun_of": "Optional[...]",
              "rerun_reason": "Optional[...]",
              "rerun_depth": "Optional[...]",
              "rerun_count": "Optional[...]",
              "max_reruns": "Optional[...]",
              "force_finalize": "Optional[...]",
              "bias_echo": "Optional[...]",
              "bias_repetition_count": "Optional[...]",
              "bias_trigger": "Optional[...]",
              "reflection_fatigue": "Optional[...]",
              "fatigue_override": "Optional[...]",
              "rerun_trigger": "Optional[...]",
              "rerun_reason_detail": "Optional[...]",
              "overridden_by": "Optional[...]",
              "alignment_score": "Optional[...]",
              "drift_score": "Optional[...]",
              "summary_valid": "Optional[...]",
              "belief_conflict_flags": "Optional[...]",
              "orchestrator_persona": "Optional[...]",
              "persona_switch_reason": "Optional[...]",
              "reflection_persona": "Optional[...]",
              "belief_reference": "Optional[...]",
              "belief_conflict": "Optional[...]",
              "agent_violations": "Optional[...]",
              "permission_violation": "Optional[...]",
              "loop_validation": "Optional[...]",
              "validation_reason": "Optional[...]",
              "depth": "Optional[...]",
              "reflection_agents": "Optional[...]",
              "depth_escalation": "Optional[...]",
              "depth_escalation_reason": "Optional[...]",
              "synthetic_identity_risk": "Optional[...]",
              "synthetic_identity_severity": "Optional[...]",
              "synthetic_identity_blocked": "Optional[...]",
              "synthetic_identity_issues": "Optional[...]",
              "synthetic_identity_checked_at": "Optional[...]",
              "content_risk_tags": "Optional[...]",
              "output_policy_action": "Optional[...]",
              "blocked_categories": "Optional[...]",
              "output_policy_checked_at": "Optional[...]",
              "prompt_injection_detected": "Optional[...]",
              "injection_tags": "Optional[...]",
              "sanitization_action": "Optional[...]",
              "injection_severity": "Optional[...]",
              "intent_sanitized_at": "Optional[...]",
              "domain_sensitive": "Optional[...]",
              "sensitive_domains": "Optional[...]",
              "primary_domain": "Optional[...]",
              "required_reviewers": "Optional[...]",
              "domain_sensitivity_checked_at": "Optional[...]",
              "ip_violation_score": "Optional[...]",
              "ip_violation_flag": "Optional[...]",
              "violation_tags": "Optional[...]",
              "ip_checked_at": "Optional[...]",
              "safety_checks_performed": "Optional[...]",
              "safety_blocks_triggered": "Optional[...]",
              "safety_warnings_issued": "Optional[...]",
              "safety_check_timestamp": "Optional[...]"
            }
          },
          {
            "name": "LoopReflectionResult",
            "fields": {
              "alignment_score": "float",
              "drift_score": "float",
              "summary_valid": "bool",
              "belief_conflict_flags": "Optional[...]",
              "agent_results": "Optional[...]",
              "reflection_persona": "Optional[...]",
              "bias_tags": "Optional[...]",
              "bias_echo": "Optional[...]",
              "reflection_fatigue": "Optional[...]",
              "fatigue_increased": "Optional[...]",
              "rerun_trigger": "Optional[...]",
              "rerun_reason_detail": "Optional[...]",
              "belief_reference": "Optional[...]",
              "belief_conflict": "Optional[...]",
              "agent_violations": "Optional[...]",
              "depth": "Optional[...]",
              "reflection_agents": "Optional[...]",
              "synthetic_identity_risk": "Optional[...]",
              "synthetic_identity_severity": "Optional[...]",
              "synthetic_identity_issues": "Optional[...]",
              "content_risk_tags": "Optional[...]",
              "output_policy_action": "Optional[...]",
              "prompt_injection_detected": "Optional[...]",
              "injection_tags": "Optional[...]",
              "sanitization_action": "Optional[...]",
              "domain_sensitive": "Optional[...]",
              "sensitive_domains": "Optional[...]",
              "required_reviewers": "Optional[...]",
              "ip_violation_score": "Optional[...]",
              "ip_violation_flag": "Optional[...]",
              "violation_tags": "Optional[...]",
              "safety_checks_performed": "Optional[...]",
              "safety_blocks_triggered": "Optional[...]",
              "safety_warnings_issued": "Optional[...]"
            }
          },
          {
            "name": "LoopCompleteRequest",
            "fields": {
              "loop_id": "str",
              "reflection_status": "str",
              "orchestrator_persona": "Optional[...]",
              "override_fatigue": "Optional[...]",
              "override_max_reruns": "Optional[...]",
              "override_reason": "Optional[...]",
              "override_by": "Optional[...]",
              "depth": "Optional[...]",
              "belief_reference": "Optional[...]",
              "safety_checks": "Optional[...]",
              "override_safety_blocks": "Optional[...]",
              "override_safety_reason": "Optional[...]",
              "override_safety_by": "Optional[...]"
            }
          },
          {
            "name": "RerunDecision",
            "fields": {
              "decision": "str",
              "loop_id": "Optional[...]",
              "original_loop_id": "Optional[...]",
              "new_loop_id": "Optional[...]",
              "rerun_reason": "Optional[...]",
              "rerun_number": "Optional[...]",
              "reason": "Optional[...]",
              "orchestrator_persona": "Optional[...]",
              "rerun_limit_reached": "Optional[...]",
              "bias_echo_detected": "Optional[...]",
              "fatigue_threshold_exceeded": "Optional[...]",
              "force_finalized": "Optional[...]",
              "rerun_trigger": "Optional[...]",
              "rerun_reason_detail": "Optional[...]",
              "overridden_by": "Optional[...]",
              "belief_reference": "Optional[...]",
              "depth": "Optional[...]",
              "depth_escalation": "Optional[...]"
            }
          },
          {
            "name": "BiasTag",
            "fields": {
              "tag": "str",
              "description": "str",
              "severity": "float",
              "occurrences": "int",
              "first_detected": "Optional[...]",
              "last_detected": "Optional[...]",
              "loops_affected": "Optional[...]",
              "belief_conflicts": "Optional[...]"
            }
          },
          {
            "name": "AgentPermissionViolation",
            "fields": {
              "agent": "str",
              "attempted_action": "str",
              "allowed_actions": "List[...]",
              "timestamp": "str",
              "loop_id": "str",
              "substituted_action": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/loop_trace",
          "/loop_trace/status",
          "/loop_trace/create",
          "/loop_trace/update",
          "/loop_trace/delete",
          "/loop_trace/list",
          "/loop_trace/get",
          "/loop_trace/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "loop_validation_schema": {
      "schema_info": {
        "schema_name": "loop_validation_schema",
        "module_name": "loop_validation",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/loop_validation_schema.py",
        "models": [
          {
            "name": "LoopValidationRequest",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "planned_agents": "List[...]",
              "expected_schema": "Dict[...]",
              "max_loops": "int",
              "context": "Optional[...]"
            }
          },
          {
            "name": "ValidationIssue",
            "fields": {
              "issue_type": "str",
              "severity": "str",
              "description": "str",
              "affected_component": "str"
            }
          },
          {
            "name": "ValidationRecommendation",
            "fields": {
              "recommendation_type": "str",
              "description": "str",
              "priority": "int"
            }
          },
          {
            "name": "LoopValidationResult",
            "fields": {
              "valid": "bool",
              "project_id": "str",
              "loop_id": "str",
              "issues": "List[...]",
              "recommendations": "List[...]",
              "validation_score": "float",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "LoopValidationError",
            "fields": {
              "status": "str",
              "message": "str",
              "project_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/loop_validation",
          "/loop_validation/status",
          "/loop_validation/create",
          "/loop_validation/update",
          "/loop_validation/delete",
          "/loop_validation/list",
          "/loop_validation/get",
          "/loop_validation/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/loop_validation_routes.py",
      "actual_routes": [
        "/validate"
      ]
    },
    "memory": {
      "schema_info": {
        "schema_name": "memory",
        "module_name": "memory",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/memory.py",
        "models": [
          {
            "name": "MemoryItem",
            "fields": {
              "agent": "str",
              "role": "str",
              "content": "str",
              "step_type": "StepType"
            }
          },
          {
            "name": "ThreadRequest",
            "fields": {
              "project_id": "str",
              "chain_id": "str",
              "agent_id": "str",
              "memories": "List[...]"
            }
          },
          {
            "name": "SummarizationRequest",
            "fields": {
              "project_id": "str",
              "chain_id": "str",
              "agent_id": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/memory",
          "/memory/status",
          "/memory/create",
          "/memory/update",
          "/memory/delete",
          "/memory/list",
          "/memory/get",
          "/memory/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/memory_router.py",
      "actual_routes": [
        "/memory/status"
      ]
    },
    "memory_embed_schema": {
      "schema_info": {
        "schema_name": "memory_embed_schema",
        "module_name": "memory_embed",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/memory_embed_schema.py",
        "models": [
          {
            "name": "MemoryEmbedRequest",
            "fields": {
              "content": "Union[...]",
              "model": "EmbeddingModel",
              "dimension": "Optional[...]",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "MemoryEmbedResponse",
            "fields": {
              "memory_id": "str",
              "embedding_size": "int",
              "model_used": "EmbeddingModel",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryEmbedError",
            "fields": {
              "message": "str",
              "model": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryEmbedBatchRequest",
            "fields": {
              "items": "List[...]"
            }
          },
          {
            "name": "MemoryEmbedBatchResponse",
            "fields": {
              "results": "List[...]",
              "errors": "List[...]",
              "total_items": "int",
              "successful_items": "int",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/memory_embed",
          "/memory_embed/status",
          "/memory_embed/create",
          "/memory_embed/update",
          "/memory_embed/delete",
          "/memory_embed/list",
          "/memory_embed/get",
          "/memory_embed/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/memory_embed_routes.py",
      "actual_routes": [
        "/embed",
        "/embed/batch"
      ]
    },
    "memory_recall_schema": {
      "schema_info": {
        "schema_name": "memory_recall_schema",
        "module_name": "memory_recall",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/memory_recall_schema.py",
        "models": [
          {
            "name": "MemoryRecallRequest",
            "fields": {
              "method": "RecallMethod",
              "query": "str",
              "limit": "int",
              "offset": "int",
              "sort_order": "RecallSortOrder",
              "start_date": "Optional[...]",
              "end_date": "Optional[...]",
              "agent_filter": "Optional[...]",
              "loop_filter": "Optional[...]"
            }
          },
          {
            "name": "MemoryEntry",
            "fields": {
              "memory_id": "str",
              "content": "Dict[...]",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str"
            }
          },
          {
            "name": "MemoryRecallResponse",
            "fields": {
              "query": "str",
              "method": "RecallMethod",
              "total_results": "int",
              "returned_results": "int",
              "results": "List[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryRecallError",
            "fields": {
              "message": "str",
              "query": "Optional[...]",
              "method": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/memory_recall",
          "/memory_recall/status",
          "/memory_recall/create",
          "/memory_recall/update",
          "/memory_recall/delete",
          "/memory_recall/list",
          "/memory_recall/get",
          "/memory_recall/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/memory_recall_routes.py",
      "actual_routes": [
        "/recall",
        "/recall"
      ]
    },
    "nova_schema": {
      "schema_info": {
        "schema_name": "nova_schema",
        "module_name": "nova",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/nova_schema.py",
        "models": [
          {
            "name": "UIComponent",
            "fields": {
              "type": "str",
              "name": "str",
              "file_path": "str",
              "code": "str"
            }
          },
          {
            "name": "NovaUIRequest",
            "fields": {
              "task": "str",
              "project_id": "str",
              "tools": "List[...]",
              "component_type": "Optional[...]",
              "style_guide": "Optional[...]"
            }
          },
          {
            "name": "NovaUIResult",
            "fields": {
              "status": "str",
              "message": "str",
              "project_id": "str",
              "files_created": "List[...]",
              "ui_components": "Optional[...]",
              "next_recommended_step": "str",
              "memory_tag": "str"
            }
          },
          {
            "name": "NovaUIRequestFallback",
            "fields": {
              "task": "str",
              "project_id": "str"
            }
          },
          {
            "name": "NovaUIResultFallback",
            "fields": {
              "status": "str",
              "message": "str",
              "project_id": "str",
              "memory_tag": "str"
            }
          }
        ],
        "potential_routes": [
          "/nova",
          "/nova/status",
          "/nova/create",
          "/nova/update",
          "/nova/delete",
          "/nova/list",
          "/nova/get",
          "/nova/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/nova_router.py",
      "actual_routes": [
        "/nova/status"
      ]
    },
    "observer_schema": {
      "schema_info": {
        "schema_name": "observer_schema",
        "module_name": "observer",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/observer_schema.py",
        "models": [
          {
            "name": "ObserverTaskRequest",
            "fields": {
              "task": "str",
              "date": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "ObservationEntry",
            "fields": {
              "date": "str",
              "memory_summary": "str",
              "behavior_observed": "Optional[...]",
              "anomalies": "Optional[...]",
              "vertical_progress": "Optional[...]",
              "loops_observed": "Optional[...]",
              "personality_notes": "Optional[...]",
              "philosophical_questions": "Optional[...]"
            }
          },
          {
            "name": "ObserverTaskResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "str",
              "date": "str",
              "entry": "Optional[...]",
              "log_path": "Optional[...]",
              "timestamp": "str"
            }
          },
          {
            "name": "ObserverErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "Optional[...]",
              "timestamp": "str"
            }
          }
        ],
        "potential_routes": [
          "/observer",
          "/observer/status",
          "/observer/create",
          "/observer/update",
          "/observer/delete",
          "/observer/list",
          "/observer/get",
          "/observer/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/observer_router.py",
      "actual_routes": [
        "/observer/status"
      ]
    },
    "orchestrator_schema": {
      "schema_info": {
        "schema_name": "orchestrator_schema",
        "module_name": "orchestrator",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/orchestrator_schema.py",
        "models": [
          {
            "name": "OrchestratorConsultRequest",
            "fields": {
              "project_id": "str",
              "query": "str",
              "context": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "OrchestratorInterpretRequest",
            "fields": {
              "project_id": "str",
              "content": "str",
              "content_type": "str",
              "context": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "OrchestratorPlanRequest",
            "fields": {
              "project_id": "str",
              "task": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "TriggerResult",
            "fields": {
              "triggered_agent": "str",
              "timestamp": "str",
              "loop_count": "int",
              "reason": "str",
              "status": "str"
            }
          },
          {
            "name": "OrchestratorDecision",
            "fields": {
              "timestamp": "str",
              "loop_count": "int",
              "last_agent": "Optional[...]",
              "next_agent": "str",
              "reason": "str"
            }
          },
          {
            "name": "PlanStep",
            "fields": {
              "agent": "str",
              "purpose": "str"
            }
          },
          {
            "name": "OrchestratorPlan",
            "fields": {
              "project_id": "str",
              "timestamp": "str",
              "steps": "List[...]",
              "estimated_loops": "int",
              "current_loop": "int"
            }
          },
          {
            "name": "DelegationResult",
            "fields": {
              "project_id": "str",
              "timestamp": "str",
              "agent": "str",
              "task": "str",
              "status": "str"
            }
          },
          {
            "name": "ResolutionResult",
            "fields": {
              "project_id": "str",
              "timestamp": "str",
              "conflicts_found": "int",
              "conflicts_resolved": "int",
              "status": "str"
            }
          },
          {
            "name": "OrchestratorPlanResult",
            "fields": {
              "status": "str",
              "task": "str",
              "tools": "List[...]",
              "project_id": "str",
              "intent": "str",
              "action": "str",
              "timestamp": "str",
              "output": "str",
              "loop_id": "Optional[...]",
              "next_agent": "Optional[...]",
              "trigger_result": "Optional[...]",
              "reason": "Optional[...]",
              "completed_agent": "Optional[...]",
              "all_loops_complete": "Optional[...]",
              "decisions": "Optional[...]",
              "decision": "Optional[...]",
              "plan": "Optional[...]",
              "delegated_agent": "Optional[...]",
              "delegated_task": "Optional[...]",
              "delegation_result": "Optional[...]",
              "resolution": "Optional[...]",
              "error": "Optional[...]"
            }
          },
          {
            "name": "OrchestratorErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "Optional[...]",
              "tools": "Optional[...]",
              "project_id": "Optional[...]",
              "intent": "Optional[...]",
              "action": "Optional[...]",
              "timestamp": "Optional[...]",
              "output": "Optional[...]",
              "error": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/orchestrator",
          "/orchestrator/status",
          "/orchestrator/create",
          "/orchestrator/update",
          "/orchestrator/delete",
          "/orchestrator/list",
          "/orchestrator/get",
          "/orchestrator/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/orchestrator_router.py",
      "actual_routes": [
        "/api/orchestrator/status"
      ]
    },
    "output_policy_schema": {
      "schema_info": {
        "schema_name": "output_policy_schema",
        "module_name": "output_policy",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/output_policy_schema.py",
        "models": [
          {
            "name": "OutputPolicyRequest",
            "fields": {
              "agent_id": "str",
              "output_type": "str",
              "content": "str",
              "context": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "OutputPolicyResult",
            "fields": {
              "approved": "bool",
              "content": "str",
              "violation_type": "Optional[...]",
              "reason": "Optional[...]",
              "action": "str",
              "risk_tags": "Optional[...]",
              "risk_details": "Optional[...]",
              "checked_at": "str"
            }
          },
          {
            "name": "PolicyLogEntry",
            "fields": {
              "agent_id": "str",
              "output_type": "str",
              "action": "str",
              "risk_tags": "List[...]",
              "timestamp": "str",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "PolicyLogRequest",
            "fields": {
              "agent_id": "Optional[...]",
              "output_type": "Optional[...]",
              "action": "Optional[...]",
              "limit": "int"
            }
          },
          {
            "name": "PolicyLogResponse",
            "fields": {
              "logs": "List[...]",
              "total": "int"
            }
          }
        ],
        "potential_routes": [
          "/output_policy",
          "/output_policy/status",
          "/output_policy/create",
          "/output_policy/update",
          "/output_policy/delete",
          "/output_policy/list",
          "/output_policy/get",
          "/output_policy/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/output_policy_routes.py",
      "actual_routes": [
        "/enforce",
        "/logs"
      ]
    },
    "pessimist_evaluation_schema": {
      "schema_info": {
        "schema_name": "pessimist_evaluation_schema",
        "module_name": "pessimist_evaluation",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/pessimist_evaluation_schema.py",
        "models": [
          {
            "name": "AgentMapping",
            "fields": {
              "agent_id": "str",
              "role": "str",
              "priority": "Optional[...]",
              "dependencies": "Optional[...]"
            }
          },
          {
            "name": "LoopComponent",
            "fields": {
              "component_id": "str",
              "component_type": "str",
              "description": "str",
              "risk_level": "Optional[...]"
            }
          },
          {
            "name": "PessimistCheckRequest",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "loop_plan": "Dict[...]",
              "component_list": "List[...]",
              "agent_map": "List[...]",
              "context": "Optional[...]"
            }
          },
          {
            "name": "Risk",
            "fields": {
              "risk_id": "str",
              "risk_type": "str",
              "severity": "str",
              "description": "str",
              "affected_elements": "List[...]",
              "mitigation_suggestions": "Optional[...]"
            }
          },
          {
            "name": "RecommendedChange",
            "fields": {
              "change_id": "str",
              "change_type": "str",
              "priority": "int",
              "description": "str",
              "affected_elements": "List[...]",
              "expected_impact": "Optional[...]"
            }
          },
          {
            "name": "PessimistCheckResult",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "confidence_score": "float",
              "approved": "bool",
              "risks": "List[...]",
              "recommended_changes": "List[...]",
              "evaluation_summary": "str",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "PessimistCheckError",
            "fields": {
              "status": "str",
              "message": "str",
              "project_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/pessimist_evaluation",
          "/pessimist_evaluation/status",
          "/pessimist_evaluation/create",
          "/pessimist_evaluation/update",
          "/pessimist_evaluation/delete",
          "/pessimist_evaluation/list",
          "/pessimist_evaluation/get",
          "/pessimist_evaluation/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/pessimist_evaluation_routes.py",
      "actual_routes": [
        "/evaluate"
      ]
    },
    "pessimist_schema": {
      "schema_info": {
        "schema_name": "pessimist_schema",
        "module_name": "pessimist",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/pessimist_schema.py",
        "models": [
          {
            "name": "BiasTagDetail",
            "fields": {
              "tag": "str",
              "description": "str",
              "severity": "float",
              "occurrences": "int",
              "first_detected": "str",
              "last_detected": "str"
            }
          },
          {
            "name": "PessimistCheckRequest",
            "fields": {
              "loop_id": "str",
              "summary": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "PessimistAssessment",
            "fields": {
              "realism_score": "float",
              "tone_balance": "str",
              "blind_spots": "List[...]",
              "warnings": "List[...]"
            }
          },
          {
            "name": "BiasAnalysis",
            "fields": {
              "loop_id": "str",
              "realism_score": "float",
              "tone_balance": "str",
              "bias_tags": "List[...]",
              "bias_tags_detail": "List[...]",
              "bias_echo": "bool",
              "echo_tags": "List[...]",
              "repetition_counts": "Dict[...]",
              "action": "Optional[...]",
              "warnings": "List[...]"
            }
          },
          {
            "name": "PessimistCheckResult",
            "fields": {
              "assessment": "PessimistAssessment",
              "bias_analysis": "BiasAnalysis",
              "loop_id": "str",
              "status": "str",
              "timestamp": "Optional[...]",
              "message": "Optional[...]"
            }
          },
          {
            "name": "PessimistErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "loop_id": "Optional[...]",
              "tools": "Optional[...]",
              "timestamp": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/pessimist",
          "/pessimist/status",
          "/pessimist/create",
          "/pessimist/update",
          "/pessimist/delete",
          "/pessimist/list",
          "/pessimist/get",
          "/pessimist/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/pessimist_router.py",
      "actual_routes": [
        "/pessimist/status"
      ]
    },
    "plan_generate_schema": {
      "schema_info": {
        "schema_name": "plan_generate_schema",
        "module_name": "plan_generate",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/plan_generate_schema.py",
        "models": [
          {
            "name": "PlanGenerateRequest",
            "fields": {
              "goal": "str",
              "plan_type": "PlanType",
              "format": "PlanFormat",
              "context": "Optional[...]",
              "constraints": "Optional[...]",
              "max_steps": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "PlanStep",
            "fields": {
              "step_number": "int",
              "description": "str",
              "estimated_time": "Optional[...]",
              "dependencies": "Optional[...]"
            }
          },
          {
            "name": "PlanGenerateResponse",
            "fields": {
              "plan_id": "str",
              "goal": "str",
              "plan_type": "PlanType",
              "format": "PlanFormat",
              "steps": "Optional[...]",
              "content": "Optional[...]",
              "total_steps": "int",
              "estimated_completion_time": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "PlanGenerateError",
            "fields": {
              "message": "str",
              "goal": "Optional[...]",
              "plan_type": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/plan_generate",
          "/plan_generate/status",
          "/plan_generate/create",
          "/plan_generate/update",
          "/plan_generate/delete",
          "/plan_generate/list",
          "/plan_generate/get",
          "/plan_generate/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/plan_generate_routes.py",
      "actual_routes": [
        "/generate",
        "/generate"
      ]
    },
    "rerun_decision": {
      "schema_info": {
        "schema_name": "rerun_decision",
        "module_name": "rerun_decision",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/rerun_decision.py",
        "models": [
          {
            "name": "RerunDecision",
            "fields": {
              "decision": "str",
              "loop_id": "str",
              "original_loop_id": "Optional[...]",
              "new_loop_id": "Optional[...]",
              "rerun_reason": "Optional[...]",
              "rerun_number": "Optional[...]",
              "reason": "Optional[...]",
              "orchestrator_persona": "Optional[...]",
              "rerun_limit_reached": "Optional[...]",
              "bias_echo_detected": "Optional[...]",
              "fatigue_threshold_exceeded": "Optional[...]",
              "force_finalized": "Optional[...]",
              "rerun_trigger": "Optional[...]",
              "rerun_reason_detail": "Optional[...]",
              "overridden_by": "Optional[...]",
              "alignment_score": "Optional[...]",
              "drift_score": "Optional[...]",
              "belief_conflict_flags": "Optional[...]",
              "safety_triggered": "Optional[...]",
              "safety_trigger_type": "Optional[...]",
              "safety_severity": "Optional[...]",
              "operator_triggered": "Optional[...]",
              "operator_id": "Optional[...]",
              "operator_reason": "Optional[...]",
              "depth": "Optional[...]",
              "depth_escalation": "Optional[...]",
              "depth_escalation_reason": "Optional[...]",
              "timestamp": "Optional[...]",
              "execution_priority": "Optional[...]",
              "schema_validated": "bool",
              "validation_timestamp": "Optional[...]",
              "validation_errors": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/rerun_decision",
          "/rerun_decision/status",
          "/rerun_decision/create",
          "/rerun_decision/update",
          "/rerun_decision/delete",
          "/rerun_decision/list",
          "/rerun_decision/get",
          "/rerun_decision/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "sage_schema": {
      "schema_info": {
        "schema_name": "sage_schema",
        "module_name": "sage",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/sage_schema.py",
        "models": [
          {
            "name": "BeliefScore",
            "fields": {
              "belief": "str",
              "confidence": "float",
              "emotional_weight": "Optional[...]"
            }
          },
          {
            "name": "SageReviewRequest",
            "fields": {
              "loop_id": "str",
              "summary_text": "str",
              "project_id": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "SageReviewResult",
            "fields": {
              "status": "str",
              "loop_id": "str",
              "belief_scores": "Optional[...]",
              "reflection_text": "Optional[...]",
              "timestamp": "Optional[...]",
              "message": "Optional[...]"
            }
          },
          {
            "name": "SageSummarizeRequest",
            "fields": {
              "loop_id": "str",
              "content": "str",
              "project_id": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "SageSummarizeResult",
            "fields": {
              "status": "str",
              "loop_id": "str",
              "summary": "Optional[...]",
              "original_word_count": "Optional[...]",
              "summary_word_count": "Optional[...]",
              "compression_ratio": "Optional[...]",
              "timestamp": "Optional[...]",
              "message": "Optional[...]"
            }
          },
          {
            "name": "SageScoreBeliefRequest",
            "fields": {
              "loop_id": "str",
              "belief": "str",
              "project_id": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "SageScoreBeliefResult",
            "fields": {
              "status": "str",
              "loop_id": "str",
              "belief": "Optional[...]",
              "confidence": "Optional[...]",
              "emotional_weight": "Optional[...]",
              "timestamp": "Optional[...]",
              "message": "Optional[...]"
            }
          },
          {
            "name": "SageErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "Optional[...]",
              "tools": "Optional[...]",
              "project_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          }
        ],
        "potential_routes": [
          "/sage",
          "/sage/status",
          "/sage/create",
          "/sage/update",
          "/sage/delete",
          "/sage/list",
          "/sage/get",
          "/sage/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/sage_router.py",
      "actual_routes": [
        "/sage/status"
      ]
    },
    "self_challenge_schema": {
      "schema_info": {
        "schema_name": "self_challenge_schema",
        "module_name": "self_challenge",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/self_challenge_schema.py",
        "models": [
          {
            "name": "BeliefChallengeRequest",
            "fields": {
              "loop_id": "str",
              "field": "str",
              "challenger": "str",
              "challenge_reason": "str",
              "initiator": "str"
            }
          }
        ],
        "potential_routes": [
          "/self_challenge",
          "/self_challenge/status",
          "/self_challenge/create",
          "/self_challenge/update",
          "/self_challenge/delete",
          "/self_challenge/list",
          "/self_challenge/get",
          "/self_challenge/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "self_reflection_schema": {
      "schema_info": {
        "schema_name": "self_reflection_schema",
        "module_name": "self_reflection",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/self_reflection_schema.py",
        "models": [
          {
            "name": "SelfInquiryRequest",
            "fields": {
              "loop_id": "str",
              "project_id": "str",
              "prompt": "str",
              "initiator": "str"
            }
          }
        ],
        "potential_routes": [
          "/self_reflection",
          "/self_reflection/status",
          "/self_reflection/create",
          "/self_reflection/update",
          "/self_reflection/delete",
          "/self_reflection/list",
          "/self_reflection/get",
          "/self_reflection/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "self_reinforcement_schema": {
      "schema_info": {
        "schema_name": "self_reinforcement_schema",
        "module_name": "self_reinforcement",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/self_reinforcement_schema.py",
        "models": [
          {
            "name": "BeliefReinforcementRequest",
            "fields": {
              "loop_id": "str",
              "field": "str",
              "reinforcement_reason": "str",
              "initiator": "str"
            }
          }
        ],
        "potential_routes": [
          "/self_reinforcement",
          "/self_reinforcement/status",
          "/self_reinforcement/create",
          "/self_reinforcement/update",
          "/self_reinforcement/delete",
          "/self_reinforcement/list",
          "/self_reinforcement/get",
          "/self_reinforcement/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "self_revision_schema": {
      "schema_info": {
        "schema_name": "self_revision_schema",
        "module_name": "self_revision",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/self_revision_schema.py",
        "models": [
          {
            "name": "BeliefRevisionRequest",
            "fields": {
              "loop_id": "str",
              "reason": "str",
              "field_updated": "str",
              "new_value": "str",
              "initiator": "str"
            }
          }
        ],
        "potential_routes": [
          "/self_revision",
          "/self_revision/status",
          "/self_revision/create",
          "/self_revision/update",
          "/self_revision/delete",
          "/self_revision/list",
          "/self_revision/get",
          "/self_revision/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "sitegen_schema": {
      "schema_info": {
        "schema_name": "sitegen_schema",
        "module_name": "sitegen",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/sitegen_schema.py",
        "models": [
          {
            "name": "SiteGenTaskRequest",
            "fields": {
              "task": "str",
              "project_id": "Optional[...]",
              "site_parameters": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "SiteLayout",
            "fields": {
              "layout_type": "str",
              "dimensions": "Dict[...]",
              "zones": "List[...]",
              "features": "List[...]"
            }
          },
          {
            "name": "SiteGenTaskResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "str",
              "project_id": "Optional[...]",
              "analysis": "Optional[...]",
              "layout": "Optional[...]",
              "market_fit": "Optional[...]",
              "recommendations": "Optional[...]",
              "timestamp": "str"
            }
          },
          {
            "name": "SiteGenErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "Optional[...]",
              "project_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ],
        "potential_routes": [
          "/sitegen",
          "/sitegen/status",
          "/sitegen/create",
          "/sitegen/update",
          "/sitegen/delete",
          "/sitegen/list",
          "/sitegen/get",
          "/sitegen/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/sitegen_router.py",
      "actual_routes": [
        "/sitegen/status"
      ]
    },
    "train_schema": {
      "schema_info": {
        "schema_name": "train_schema",
        "module_name": "train",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/train_schema.py",
        "models": [
          {
            "name": "TrainRequest",
            "fields": {
              "model_type": "TrainingModel",
              "training_data": "Union[...]",
              "data_format": "TrainingDataFormat",
              "model_name": "str",
              "hyperparameters": "Optional[...]",
              "validation_split": "Optional[...]",
              "max_epochs": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "TrainingMetrics",
            "fields": {
              "accuracy": "Optional[...]",
              "precision": "Optional[...]",
              "recall": "Optional[...]",
              "f1_score": "Optional[...]",
              "loss": "float",
              "val_loss": "Optional[...]",
              "epochs_completed": "int",
              "training_time": "float"
            }
          },
          {
            "name": "TrainResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "model_type": "TrainingModel",
              "status": "str",
              "metrics": "Optional[...]",
              "examples_processed": "int",
              "model_size": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainError",
            "fields": {
              "message": "str",
              "model_type": "Optional[...]",
              "model_name": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainStatusRequest",
            "fields": {
              "model_id": "str"
            }
          },
          {
            "name": "TrainStatusResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "status": "str",
              "progress": "Optional[...]",
              "current_epoch": "Optional[...]",
              "total_epochs": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ],
        "potential_routes": [
          "/train",
          "/train/status",
          "/train/create",
          "/train/update",
          "/train/delete",
          "/train/list",
          "/train/get",
          "/train/search"
        ],
        "route_hints": []
      },
      "route_file": "/home/ubuntu/personal-ai-agent/app/routes/train_routes.py",
      "actual_routes": [
        "/status/{model_id}",
        "/status"
      ]
    },
    "trainer_schema": {
      "schema_info": {
        "schema_name": "trainer_schema",
        "module_name": "trainer",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/trainer_schema.py",
        "models": [
          {
            "name": "TrainerTaskRequest",
            "fields": {
              "task": "str",
              "model_id": "str",
              "project_id": "Optional[...]",
              "dataset_id": "Optional[...]",
              "parameters": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "TrainingMetrics",
            "fields": {
              "accuracy": "float",
              "loss": "float",
              "precision": "Optional[...]",
              "recall": "Optional[...]",
              "f1_score": "Optional[...]",
              "training_time": "float",
              "epochs_completed": "int"
            }
          },
          {
            "name": "ModelInfo",
            "fields": {
              "model_id": "str",
              "model_type": "str",
              "parameters": "Dict[...]",
              "size": "int",
              "created_at": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainerTaskResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "str",
              "model_id": "str",
              "project_id": "Optional[...]",
              "dataset_id": "Optional[...]",
              "metrics": "Optional[...]",
              "model_info": "Optional[...]",
              "recommendations": "Optional[...]",
              "timestamp": "str"
            }
          },
          {
            "name": "TrainerErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "Optional[...]",
              "model_id": "Optional[...]",
              "project_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ],
        "potential_routes": [
          "/trainer",
          "/trainer/status",
          "/trainer/create",
          "/trainer/update",
          "/trainer/delete",
          "/trainer/list",
          "/trainer/get",
          "/trainer/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    },
    "validate_schema_hash": {
      "schema_info": {
        "schema_name": "validate_schema_hash",
        "module_name": "validate_hash",
        "file_path": "/home/ubuntu/personal-ai-agent/app/schemas/validate_schema_hash.py",
        "models": [
          {
            "name": "ValidateSchemaHashRequest",
            "fields": {
              "route_path": "str",
              "expected_hash": "str"
            }
          },
          {
            "name": "ValidateSchemaHashResult",
            "fields": {
              "valid": "bool",
              "actual_hash": "str",
              "message": "str"
            }
          }
        ],
        "potential_routes": [
          "/validate_hash",
          "/validate_hash/status",
          "/validate_hash/create",
          "/validate_hash/update",
          "/validate_hash/delete",
          "/validate_hash/list",
          "/validate_hash/get",
          "/validate_hash/search"
        ],
        "route_hints": []
      },
      "route_file": null,
      "actual_routes": []
    }
  },
  "non_operational_endpoints": [
    {
      "endpoint": {
        "route_path": "/context/{agent_id}",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 140,
        "previous_status_code": 404
      },
      "module_name": "context",
      "matching_schemas": [
        "agent_context_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/orchestrator/validate_delegation",
        "method": "POST",
        "status": "500 Internal Server Error",
        "status_code": 500,
        "response_time_ms": 144,
        "previous_status_code": 500
      },
      "module_name": "orchestrator",
      "matching_schemas": [
        "orchestrator_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/orchestrator/check_recovery_authorization",
        "method": "POST",
        "status": "500 Internal Server Error",
        "status_code": 500,
        "response_time_ms": 128,
        "previous_status_code": 500
      },
      "module_name": "orchestrator",
      "matching_schemas": [
        "orchestrator_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/context",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 129,
        "previous_status_code": 404
      },
      "module_name": "context",
      "matching_schemas": [
        "agent_context_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/config",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 320,
        "previous_status_code": 404
      },
      "module_name": "config",
      "matching_schemas": [
        "agent_config_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/config/{agent_id}",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 327,
        "previous_status_code": 404
      },
      "module_name": "config",
      "matching_schemas": [
        "agent_config_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/config/{agent_id}",
        "method": "DELETE",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 343,
        "previous_status_code": 404
      },
      "module_name": "config",
      "matching_schemas": [
        "agent_config_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/analyze",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 328,
        "previous_status_code": 404
      },
      "module_name": "analyze",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/orchestrator/handle_violation",
        "method": "POST",
        "status": "500 Internal Server Error",
        "status_code": 500,
        "response_time_ms": 293,
        "previous_status_code": 500
      },
      "module_name": "orchestrator",
      "matching_schemas": [
        "orchestrator_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/critic/review",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 308,
        "previous_status_code": 404
      },
      "module_name": "critic",
      "matching_schemas": [
        "critic_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/status",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 137,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/health",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 141,
        "previous_status_code": 404
      },
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/api/debugger/trace",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 133,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/audit",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 135,
        "previous_status_code": 404
      },
      "module_name": "audit",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/status",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 150,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/test",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 344,
        "previous_status_code": 404
      },
      "module_name": "test",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/close",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 125,
        "previous_status_code": 404
      },
      "module_name": "close",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/status/{export_id}",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 171,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/status/{stream_id}",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 325,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/status",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 140,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/status",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 128,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/status/{fix_id}",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 371,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/drift_routes/status",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 351,
        "previous_status_code": 404
      },
      "module_name": "drift_routes",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/rollback",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 182,
        "previous_status_code": 404
      },
      "module_name": "rollback",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/rollback",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 134,
        "previous_status_code": 404
      },
      "module_name": "rollback",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/override",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 127,
        "previous_status_code": 404
      },
      "module_name": "override",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/health/config",
        "method": "GET",
        "status": "500 Internal Server Error",
        "status_code": 500,
        "response_time_ms": 340,
        "previous_status_code": 500
      },
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/api/loop/complete",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 129,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/loop/trace",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 134,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/historian/log",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 310,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/loop/plan",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 131,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/loop/trace",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 137,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/loop/persona-reflect",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 142,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/loop/reset",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 292,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/loop/respond",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 324,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/loop/snapshot/{loop_id}",
        "method": "DELETE",
        "status": "500 Internal Server Error",
        "status_code": 500,
        "response_time_ms": 131,
        "previous_status_code": 500
      },
      "module_name": "loop",
      "matching_schemas": [
        "loop_schema",
        "loop_snapshot_schema",
        "loop_trace",
        "loop_validation_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/critic/review",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 161,
        "previous_status_code": 404
      },
      "module_name": "critic",
      "matching_schemas": [
        "critic_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/validate",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 134,
        "previous_status_code": 404
      },
      "module_name": "validate",
      "matching_schemas": [
        "validate_schema_hash"
      ]
    },
    {
      "endpoint": {
        "route_path": "/embed/batch",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 138,
        "previous_status_code": 404
      },
      "module_name": "embed",
      "matching_schemas": [
        "memory_embed_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/api/memory/ping",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 307,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/memory/write",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 311,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/memory/read",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 327,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/recall",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 308,
        "previous_status_code": 404
      },
      "module_name": "recall",
      "matching_schemas": [
        "memory_recall_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/recall",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 312,
        "previous_status_code": 404
      },
      "module_name": "recall",
      "matching_schemas": [
        "memory_recall_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/health",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 134,
        "previous_status_code": 404
      },
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/embed",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 301,
        "previous_status_code": 404
      },
      "module_name": "embed",
      "matching_schemas": [
        "memory_embed_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/generate-component",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 292,
        "previous_status_code": 404
      },
      "module_name": "generate-component",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/health",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 141,
        "previous_status_code": 404
      },
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/journal",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 130,
        "previous_status_code": 404
      },
      "module_name": "journal",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/observe",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 140,
        "previous_status_code": 404
      },
      "module_name": "observe",
      "matching_schemas": [
        "observer_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/build-ui",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 336,
        "previous_status_code": 404
      },
      "module_name": "build-ui",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/api/orchestrator/status",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 306,
        "previous_status_code": 404
      },
      "module_name": "api",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/logs",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 135,
        "previous_status_code": 404
      },
      "module_name": "logs",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/enforce",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 325,
        "previous_status_code": 404
      },
      "module_name": "enforce",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/generate",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 134,
        "previous_status_code": 404
      },
      "module_name": "generate",
      "matching_schemas": [
        "plan_generate_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/health",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 289,
        "previous_status_code": 404
      },
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/check",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 119,
        "previous_status_code": 404
      },
      "module_name": "check",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/generate",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 138,
        "previous_status_code": 404
      },
      "module_name": "generate",
      "matching_schemas": [
        "plan_generate_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/reflect",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 155,
        "previous_status_code": 404
      },
      "module_name": "reflect",
      "matching_schemas": [
        "self_reflection_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/run",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 333,
        "previous_status_code": 404
      },
      "module_name": "run",
      "matching_schemas": [
        "rerun_decision"
      ]
    },
    {
      "endpoint": {
        "route_path": "/review",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 335,
        "previous_status_code": 404
      },
      "module_name": "review",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/reinforce",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 136,
        "previous_status_code": 404
      },
      "module_name": "reinforce",
      "matching_schemas": [
        "self_reinforcement_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/revise",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 315,
        "previous_status_code": 404
      },
      "module_name": "revise",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/reflect",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 331,
        "previous_status_code": 404
      },
      "module_name": "reflect",
      "matching_schemas": [
        "self_reflection_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/reinforce",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 110,
        "previous_status_code": 404
      },
      "module_name": "reinforce",
      "matching_schemas": [
        "self_reinforcement_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/challenge",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 284,
        "previous_status_code": 404
      },
      "module_name": "challenge",
      "matching_schemas": [
        "self_challenge_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/revise",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 295,
        "previous_status_code": 404
      },
      "module_name": "revise",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/revise",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 313,
        "previous_status_code": 404
      },
      "module_name": "revise",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/reinforce",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 343,
        "previous_status_code": 404
      },
      "module_name": "reinforce",
      "matching_schemas": [
        "self_reinforcement_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/reflect",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 133,
        "previous_status_code": 404
      },
      "module_name": "reflect",
      "matching_schemas": [
        "self_reflection_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/challenge",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 300,
        "previous_status_code": 404
      },
      "module_name": "challenge",
      "matching_schemas": [
        "self_challenge_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/revise",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 123,
        "previous_status_code": 404
      },
      "module_name": "revise",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/reinforce",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 158,
        "previous_status_code": 404
      },
      "module_name": "reinforce",
      "matching_schemas": [
        "self_reinforcement_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/evaluate",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 2651,
        "previous_status_code": 404
      },
      "module_name": "evaluate",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/challenge",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 131,
        "previous_status_code": 404
      },
      "module_name": "challenge",
      "matching_schemas": [
        "self_challenge_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/reflect",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 1487,
        "previous_status_code": 404
      },
      "module_name": "reflect",
      "matching_schemas": [
        "self_reflection_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/health",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 121,
        "previous_status_code": 404
      },
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/challenge",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 1851,
        "previous_status_code": 404
      },
      "module_name": "challenge",
      "matching_schemas": [
        "self_challenge_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/analyze",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 142,
        "previous_status_code": 404
      },
      "module_name": "analyze",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/status",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 126,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/status/{model_id}",
        "method": "GET",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 119,
        "previous_status_code": 404
      },
      "module_name": "status",
      "matching_schemas": []
    },
    {
      "endpoint": {
        "route_path": "/plan",
        "method": "POST",
        "status": "404 Not Found",
        "status_code": 404,
        "response_time_ms": 301,
        "previous_status_code": 404
      },
      "module_name": "plan",
      "matching_schemas": [
        "plan_generate_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/health/check/{component_id}",
        "method": "GET",
        "status": "500 Internal Server Error",
        "status_code": 500,
        "response_time_ms": 6137,
        "previous_status_code": 500
      },
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ]
    },
    {
      "endpoint": {
        "route_path": "/health/maintenance/predict/{component_id}",
        "method": "GET",
        "status": "500 Internal Server Error",
        "status_code": 500,
        "response_time_ms": 6147,
        "previous_status_code": 500
      },
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ]
    }
  ],
  "fix_recommendations": [
    {
      "route_path": "/orchestrator/validate_delegation",
      "method": "POST",
      "status_code": 500,
      "module_name": "orchestrator",
      "matching_schemas": [
        "orchestrator_schema"
      ],
      "best_schema": "orchestrator_schema",
      "fix_type": "server_error",
      "priority": "high",
      "schema_models": [
        {
          "name": "OrchestratorConsultRequest",
          "fields": {
            "project_id": "str",
            "query": "str",
            "context": "Optional[...]",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorInterpretRequest",
          "fields": {
            "project_id": "str",
            "content": "str",
            "content_type": "str",
            "context": "Optional[...]",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorPlanRequest",
          "fields": {
            "project_id": "str",
            "task": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "TriggerResult",
          "fields": {
            "triggered_agent": "str",
            "timestamp": "str",
            "loop_count": "int",
            "reason": "str",
            "status": "str"
          }
        },
        {
          "name": "OrchestratorDecision",
          "fields": {
            "timestamp": "str",
            "loop_count": "int",
            "last_agent": "Optional[...]",
            "next_agent": "str",
            "reason": "str"
          }
        },
        {
          "name": "PlanStep",
          "fields": {
            "agent": "str",
            "purpose": "str"
          }
        },
        {
          "name": "OrchestratorPlan",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "steps": "List[...]",
            "estimated_loops": "int",
            "current_loop": "int"
          }
        },
        {
          "name": "DelegationResult",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "agent": "str",
            "task": "str",
            "status": "str"
          }
        },
        {
          "name": "ResolutionResult",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "conflicts_found": "int",
            "conflicts_resolved": "int",
            "status": "str"
          }
        },
        {
          "name": "OrchestratorPlanResult",
          "fields": {
            "status": "str",
            "task": "str",
            "tools": "List[...]",
            "project_id": "str",
            "intent": "str",
            "action": "str",
            "timestamp": "str",
            "output": "str",
            "loop_id": "Optional[...]",
            "next_agent": "Optional[...]",
            "trigger_result": "Optional[...]",
            "reason": "Optional[...]",
            "completed_agent": "Optional[...]",
            "all_loops_complete": "Optional[...]",
            "decisions": "Optional[...]",
            "decision": "Optional[...]",
            "plan": "Optional[...]",
            "delegated_agent": "Optional[...]",
            "delegated_task": "Optional[...]",
            "delegation_result": "Optional[...]",
            "resolution": "Optional[...]",
            "error": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorErrorResult",
          "fields": {
            "status": "str",
            "message": "str",
            "task": "Optional[...]",
            "tools": "Optional[...]",
            "project_id": "Optional[...]",
            "intent": "Optional[...]",
            "action": "Optional[...]",
            "timestamp": "Optional[...]",
            "output": "Optional[...]",
            "error": "Optional[...]"
          }
        }
      ],
      "potential_routes": [
        "/orchestrator",
        "/orchestrator/status",
        "/orchestrator/create",
        "/orchestrator/update",
        "/orchestrator/delete",
        "/orchestrator/list",
        "/orchestrator/get",
        "/orchestrator/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/orchestrator/check_recovery_authorization",
      "method": "POST",
      "status_code": 500,
      "module_name": "orchestrator",
      "matching_schemas": [
        "orchestrator_schema"
      ],
      "best_schema": "orchestrator_schema",
      "fix_type": "server_error",
      "priority": "high",
      "schema_models": [
        {
          "name": "OrchestratorConsultRequest",
          "fields": {
            "project_id": "str",
            "query": "str",
            "context": "Optional[...]",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorInterpretRequest",
          "fields": {
            "project_id": "str",
            "content": "str",
            "content_type": "str",
            "context": "Optional[...]",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorPlanRequest",
          "fields": {
            "project_id": "str",
            "task": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "TriggerResult",
          "fields": {
            "triggered_agent": "str",
            "timestamp": "str",
            "loop_count": "int",
            "reason": "str",
            "status": "str"
          }
        },
        {
          "name": "OrchestratorDecision",
          "fields": {
            "timestamp": "str",
            "loop_count": "int",
            "last_agent": "Optional[...]",
            "next_agent": "str",
            "reason": "str"
          }
        },
        {
          "name": "PlanStep",
          "fields": {
            "agent": "str",
            "purpose": "str"
          }
        },
        {
          "name": "OrchestratorPlan",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "steps": "List[...]",
            "estimated_loops": "int",
            "current_loop": "int"
          }
        },
        {
          "name": "DelegationResult",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "agent": "str",
            "task": "str",
            "status": "str"
          }
        },
        {
          "name": "ResolutionResult",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "conflicts_found": "int",
            "conflicts_resolved": "int",
            "status": "str"
          }
        },
        {
          "name": "OrchestratorPlanResult",
          "fields": {
            "status": "str",
            "task": "str",
            "tools": "List[...]",
            "project_id": "str",
            "intent": "str",
            "action": "str",
            "timestamp": "str",
            "output": "str",
            "loop_id": "Optional[...]",
            "next_agent": "Optional[...]",
            "trigger_result": "Optional[...]",
            "reason": "Optional[...]",
            "completed_agent": "Optional[...]",
            "all_loops_complete": "Optional[...]",
            "decisions": "Optional[...]",
            "decision": "Optional[...]",
            "plan": "Optional[...]",
            "delegated_agent": "Optional[...]",
            "delegated_task": "Optional[...]",
            "delegation_result": "Optional[...]",
            "resolution": "Optional[...]",
            "error": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorErrorResult",
          "fields": {
            "status": "str",
            "message": "str",
            "task": "Optional[...]",
            "tools": "Optional[...]",
            "project_id": "Optional[...]",
            "intent": "Optional[...]",
            "action": "Optional[...]",
            "timestamp": "Optional[...]",
            "output": "Optional[...]",
            "error": "Optional[...]"
          }
        }
      ],
      "potential_routes": [
        "/orchestrator",
        "/orchestrator/status",
        "/orchestrator/create",
        "/orchestrator/update",
        "/orchestrator/delete",
        "/orchestrator/list",
        "/orchestrator/get",
        "/orchestrator/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/orchestrator/handle_violation",
      "method": "POST",
      "status_code": 500,
      "module_name": "orchestrator",
      "matching_schemas": [
        "orchestrator_schema"
      ],
      "best_schema": "orchestrator_schema",
      "fix_type": "server_error",
      "priority": "high",
      "schema_models": [
        {
          "name": "OrchestratorConsultRequest",
          "fields": {
            "project_id": "str",
            "query": "str",
            "context": "Optional[...]",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorInterpretRequest",
          "fields": {
            "project_id": "str",
            "content": "str",
            "content_type": "str",
            "context": "Optional[...]",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorPlanRequest",
          "fields": {
            "project_id": "str",
            "task": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "TriggerResult",
          "fields": {
            "triggered_agent": "str",
            "timestamp": "str",
            "loop_count": "int",
            "reason": "str",
            "status": "str"
          }
        },
        {
          "name": "OrchestratorDecision",
          "fields": {
            "timestamp": "str",
            "loop_count": "int",
            "last_agent": "Optional[...]",
            "next_agent": "str",
            "reason": "str"
          }
        },
        {
          "name": "PlanStep",
          "fields": {
            "agent": "str",
            "purpose": "str"
          }
        },
        {
          "name": "OrchestratorPlan",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "steps": "List[...]",
            "estimated_loops": "int",
            "current_loop": "int"
          }
        },
        {
          "name": "DelegationResult",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "agent": "str",
            "task": "str",
            "status": "str"
          }
        },
        {
          "name": "ResolutionResult",
          "fields": {
            "project_id": "str",
            "timestamp": "str",
            "conflicts_found": "int",
            "conflicts_resolved": "int",
            "status": "str"
          }
        },
        {
          "name": "OrchestratorPlanResult",
          "fields": {
            "status": "str",
            "task": "str",
            "tools": "List[...]",
            "project_id": "str",
            "intent": "str",
            "action": "str",
            "timestamp": "str",
            "output": "str",
            "loop_id": "Optional[...]",
            "next_agent": "Optional[...]",
            "trigger_result": "Optional[...]",
            "reason": "Optional[...]",
            "completed_agent": "Optional[...]",
            "all_loops_complete": "Optional[...]",
            "decisions": "Optional[...]",
            "decision": "Optional[...]",
            "plan": "Optional[...]",
            "delegated_agent": "Optional[...]",
            "delegated_task": "Optional[...]",
            "delegation_result": "Optional[...]",
            "resolution": "Optional[...]",
            "error": "Optional[...]"
          }
        },
        {
          "name": "OrchestratorErrorResult",
          "fields": {
            "status": "str",
            "message": "str",
            "task": "Optional[...]",
            "tools": "Optional[...]",
            "project_id": "Optional[...]",
            "intent": "Optional[...]",
            "action": "Optional[...]",
            "timestamp": "Optional[...]",
            "output": "Optional[...]",
            "error": "Optional[...]"
          }
        }
      ],
      "potential_routes": [
        "/orchestrator",
        "/orchestrator/status",
        "/orchestrator/create",
        "/orchestrator/update",
        "/orchestrator/delete",
        "/orchestrator/list",
        "/orchestrator/get",
        "/orchestrator/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/loop/snapshot/{loop_id}",
      "method": "DELETE",
      "status_code": 500,
      "module_name": "loop",
      "matching_schemas": [
        "loop_schema",
        "loop_snapshot_schema",
        "loop_trace",
        "loop_validation_schema"
      ],
      "best_schema": "loop_schema",
      "fix_type": "server_error",
      "priority": "high",
      "schema_models": [
        {
          "name": "LoopResponseRequest",
          "fields": {
            "project_id": "str",
            "loop_id": "str",
            "agent": "str",
            "input_key": "str",
            "target_file": "str",
            "model": "Optional[...]",
            "temperature": "Optional[...]",
            "max_tokens": "Optional[...]",
            "metadata": "Optional[...]"
          }
        },
        {
          "name": "LoopResponseResult",
          "fields": {
            "status": "str",
            "output_tag": "str",
            "timestamp": "str",
            "code": "str",
            "metadata": "Optional[...]"
          }
        }
      ],
      "potential_routes": [
        "/loop",
        "/loop/status",
        "/loop/create",
        "/loop/update",
        "/loop/delete",
        "/loop/list",
        "/loop/get",
        "/loop/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/health",
      "method": "GET",
      "status_code": 404,
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ],
      "best_schema": "health_monitor_schema",
      "fix_type": "missing_route",
      "priority": "medium",
      "schema_models": [
        {
          "name": "HealthMetric",
          "fields": {
            "name": "str",
            "value": "Union[...]",
            "unit": "Optional[...]",
            "threshold_warning": "Optional[...]",
            "threshold_critical": "Optional[...]",
            "status": "HealthStatus",
            "timestamp": "datetime"
          }
        },
        {
          "name": "ComponentHealth",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "status": "HealthStatus",
            "metrics": "List[...]",
            "last_checked": "datetime",
            "issues": "List[...]",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "SystemHealthSummary",
          "fields": {
            "overall_status": "HealthStatus",
            "component_statuses": "Dict[...]",
            "critical_issues_count": "int",
            "warning_issues_count": "int",
            "healthy_components_count": "int",
            "total_components_count": "int",
            "last_updated": "datetime"
          }
        },
        {
          "name": "HealthCheckRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "include_metrics": "bool",
            "include_recommendations": "bool"
          }
        },
        {
          "name": "HealthCheckResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "summary": "SystemHealthSummary",
            "components": "List[...]"
          }
        },
        {
          "name": "PredictiveMaintenanceRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "time_horizon_hours": "int",
            "confidence_threshold": "float"
          }
        },
        {
          "name": "MaintenancePrediction",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "predicted_issue": "str",
            "confidence": "float",
            "time_to_failure": "Optional[...]",
            "recommended_action": "str",
            "priority": "str",
            "prediction_timestamp": "datetime"
          }
        },
        {
          "name": "PredictiveMaintenanceResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "predictions": "List[...]",
            "total_predictions_count": "int",
            "high_priority_count": "int",
            "medium_priority_count": "int",
            "low_priority_count": "int"
          }
        },
        {
          "name": "SelfHealingRequest",
          "fields": {
            "component_id": "str",
            "issue_description": "str",
            "suggested_actions": "List[...]",
            "auto_approve": "bool",
            "max_impact_level": "str"
          }
        },
        {
          "name": "HealingActionResult",
          "fields": {
            "action": "SelfHealingAction",
            "success": "bool",
            "timestamp": "datetime",
            "details": "str",
            "impact_level": "str",
            "duration_ms": "int"
          }
        },
        {
          "name": "SelfHealingResponse",
          "fields": {
            "request_id": "str",
            "component_id": "str",
            "timestamp": "datetime",
            "issue_resolved": "bool",
            "actions_performed": "List[...]",
            "current_status": "HealthStatus",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "HealthMonitorConfigRequest",
          "fields": {
            "check_interval_seconds": "Optional[...]",
            "enable_predictive_maintenance": "Optional[...]",
            "enable_self_healing": "Optional[...]",
            "alert_thresholds": "Optional[...]",
            "excluded_components": "Optional[...]"
          }
        },
        {
          "name": "HealthMonitorConfigResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "current_config": "Dict",
            "changes_applied": "Dict",
            "restart_required": "bool"
          }
        }
      ],
      "potential_routes": [
        "/health_monitor",
        "/health_monitor/status",
        "/health_monitor/create",
        "/health_monitor/update",
        "/health_monitor/delete",
        "/health_monitor/list",
        "/health_monitor/get",
        "/health_monitor/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/health/config",
      "method": "GET",
      "status_code": 500,
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ],
      "best_schema": "health_monitor_schema",
      "fix_type": "server_error",
      "priority": "medium",
      "schema_models": [
        {
          "name": "HealthMetric",
          "fields": {
            "name": "str",
            "value": "Union[...]",
            "unit": "Optional[...]",
            "threshold_warning": "Optional[...]",
            "threshold_critical": "Optional[...]",
            "status": "HealthStatus",
            "timestamp": "datetime"
          }
        },
        {
          "name": "ComponentHealth",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "status": "HealthStatus",
            "metrics": "List[...]",
            "last_checked": "datetime",
            "issues": "List[...]",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "SystemHealthSummary",
          "fields": {
            "overall_status": "HealthStatus",
            "component_statuses": "Dict[...]",
            "critical_issues_count": "int",
            "warning_issues_count": "int",
            "healthy_components_count": "int",
            "total_components_count": "int",
            "last_updated": "datetime"
          }
        },
        {
          "name": "HealthCheckRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "include_metrics": "bool",
            "include_recommendations": "bool"
          }
        },
        {
          "name": "HealthCheckResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "summary": "SystemHealthSummary",
            "components": "List[...]"
          }
        },
        {
          "name": "PredictiveMaintenanceRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "time_horizon_hours": "int",
            "confidence_threshold": "float"
          }
        },
        {
          "name": "MaintenancePrediction",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "predicted_issue": "str",
            "confidence": "float",
            "time_to_failure": "Optional[...]",
            "recommended_action": "str",
            "priority": "str",
            "prediction_timestamp": "datetime"
          }
        },
        {
          "name": "PredictiveMaintenanceResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "predictions": "List[...]",
            "total_predictions_count": "int",
            "high_priority_count": "int",
            "medium_priority_count": "int",
            "low_priority_count": "int"
          }
        },
        {
          "name": "SelfHealingRequest",
          "fields": {
            "component_id": "str",
            "issue_description": "str",
            "suggested_actions": "List[...]",
            "auto_approve": "bool",
            "max_impact_level": "str"
          }
        },
        {
          "name": "HealingActionResult",
          "fields": {
            "action": "SelfHealingAction",
            "success": "bool",
            "timestamp": "datetime",
            "details": "str",
            "impact_level": "str",
            "duration_ms": "int"
          }
        },
        {
          "name": "SelfHealingResponse",
          "fields": {
            "request_id": "str",
            "component_id": "str",
            "timestamp": "datetime",
            "issue_resolved": "bool",
            "actions_performed": "List[...]",
            "current_status": "HealthStatus",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "HealthMonitorConfigRequest",
          "fields": {
            "check_interval_seconds": "Optional[...]",
            "enable_predictive_maintenance": "Optional[...]",
            "enable_self_healing": "Optional[...]",
            "alert_thresholds": "Optional[...]",
            "excluded_components": "Optional[...]"
          }
        },
        {
          "name": "HealthMonitorConfigResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "current_config": "Dict",
            "changes_applied": "Dict",
            "restart_required": "bool"
          }
        }
      ],
      "potential_routes": [
        "/health_monitor",
        "/health_monitor/status",
        "/health_monitor/create",
        "/health_monitor/update",
        "/health_monitor/delete",
        "/health_monitor/list",
        "/health_monitor/get",
        "/health_monitor/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/health",
      "method": "GET",
      "status_code": 404,
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ],
      "best_schema": "health_monitor_schema",
      "fix_type": "missing_route",
      "priority": "medium",
      "schema_models": [
        {
          "name": "HealthMetric",
          "fields": {
            "name": "str",
            "value": "Union[...]",
            "unit": "Optional[...]",
            "threshold_warning": "Optional[...]",
            "threshold_critical": "Optional[...]",
            "status": "HealthStatus",
            "timestamp": "datetime"
          }
        },
        {
          "name": "ComponentHealth",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "status": "HealthStatus",
            "metrics": "List[...]",
            "last_checked": "datetime",
            "issues": "List[...]",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "SystemHealthSummary",
          "fields": {
            "overall_status": "HealthStatus",
            "component_statuses": "Dict[...]",
            "critical_issues_count": "int",
            "warning_issues_count": "int",
            "healthy_components_count": "int",
            "total_components_count": "int",
            "last_updated": "datetime"
          }
        },
        {
          "name": "HealthCheckRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "include_metrics": "bool",
            "include_recommendations": "bool"
          }
        },
        {
          "name": "HealthCheckResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "summary": "SystemHealthSummary",
            "components": "List[...]"
          }
        },
        {
          "name": "PredictiveMaintenanceRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "time_horizon_hours": "int",
            "confidence_threshold": "float"
          }
        },
        {
          "name": "MaintenancePrediction",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "predicted_issue": "str",
            "confidence": "float",
            "time_to_failure": "Optional[...]",
            "recommended_action": "str",
            "priority": "str",
            "prediction_timestamp": "datetime"
          }
        },
        {
          "name": "PredictiveMaintenanceResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "predictions": "List[...]",
            "total_predictions_count": "int",
            "high_priority_count": "int",
            "medium_priority_count": "int",
            "low_priority_count": "int"
          }
        },
        {
          "name": "SelfHealingRequest",
          "fields": {
            "component_id": "str",
            "issue_description": "str",
            "suggested_actions": "List[...]",
            "auto_approve": "bool",
            "max_impact_level": "str"
          }
        },
        {
          "name": "HealingActionResult",
          "fields": {
            "action": "SelfHealingAction",
            "success": "bool",
            "timestamp": "datetime",
            "details": "str",
            "impact_level": "str",
            "duration_ms": "int"
          }
        },
        {
          "name": "SelfHealingResponse",
          "fields": {
            "request_id": "str",
            "component_id": "str",
            "timestamp": "datetime",
            "issue_resolved": "bool",
            "actions_performed": "List[...]",
            "current_status": "HealthStatus",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "HealthMonitorConfigRequest",
          "fields": {
            "check_interval_seconds": "Optional[...]",
            "enable_predictive_maintenance": "Optional[...]",
            "enable_self_healing": "Optional[...]",
            "alert_thresholds": "Optional[...]",
            "excluded_components": "Optional[...]"
          }
        },
        {
          "name": "HealthMonitorConfigResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "current_config": "Dict",
            "changes_applied": "Dict",
            "restart_required": "bool"
          }
        }
      ],
      "potential_routes": [
        "/health_monitor",
        "/health_monitor/status",
        "/health_monitor/create",
        "/health_monitor/update",
        "/health_monitor/delete",
        "/health_monitor/list",
        "/health_monitor/get",
        "/health_monitor/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/health",
      "method": "GET",
      "status_code": 404,
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ],
      "best_schema": "health_monitor_schema",
      "fix_type": "missing_route",
      "priority": "medium",
      "schema_models": [
        {
          "name": "HealthMetric",
          "fields": {
            "name": "str",
            "value": "Union[...]",
            "unit": "Optional[...]",
            "threshold_warning": "Optional[...]",
            "threshold_critical": "Optional[...]",
            "status": "HealthStatus",
            "timestamp": "datetime"
          }
        },
        {
          "name": "ComponentHealth",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "status": "HealthStatus",
            "metrics": "List[...]",
            "last_checked": "datetime",
            "issues": "List[...]",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "SystemHealthSummary",
          "fields": {
            "overall_status": "HealthStatus",
            "component_statuses": "Dict[...]",
            "critical_issues_count": "int",
            "warning_issues_count": "int",
            "healthy_components_count": "int",
            "total_components_count": "int",
            "last_updated": "datetime"
          }
        },
        {
          "name": "HealthCheckRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "include_metrics": "bool",
            "include_recommendations": "bool"
          }
        },
        {
          "name": "HealthCheckResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "summary": "SystemHealthSummary",
            "components": "List[...]"
          }
        },
        {
          "name": "PredictiveMaintenanceRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "time_horizon_hours": "int",
            "confidence_threshold": "float"
          }
        },
        {
          "name": "MaintenancePrediction",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "predicted_issue": "str",
            "confidence": "float",
            "time_to_failure": "Optional[...]",
            "recommended_action": "str",
            "priority": "str",
            "prediction_timestamp": "datetime"
          }
        },
        {
          "name": "PredictiveMaintenanceResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "predictions": "List[...]",
            "total_predictions_count": "int",
            "high_priority_count": "int",
            "medium_priority_count": "int",
            "low_priority_count": "int"
          }
        },
        {
          "name": "SelfHealingRequest",
          "fields": {
            "component_id": "str",
            "issue_description": "str",
            "suggested_actions": "List[...]",
            "auto_approve": "bool",
            "max_impact_level": "str"
          }
        },
        {
          "name": "HealingActionResult",
          "fields": {
            "action": "SelfHealingAction",
            "success": "bool",
            "timestamp": "datetime",
            "details": "str",
            "impact_level": "str",
            "duration_ms": "int"
          }
        },
        {
          "name": "SelfHealingResponse",
          "fields": {
            "request_id": "str",
            "component_id": "str",
            "timestamp": "datetime",
            "issue_resolved": "bool",
            "actions_performed": "List[...]",
            "current_status": "HealthStatus",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "HealthMonitorConfigRequest",
          "fields": {
            "check_interval_seconds": "Optional[...]",
            "enable_predictive_maintenance": "Optional[...]",
            "enable_self_healing": "Optional[...]",
            "alert_thresholds": "Optional[...]",
            "excluded_components": "Optional[...]"
          }
        },
        {
          "name": "HealthMonitorConfigResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "current_config": "Dict",
            "changes_applied": "Dict",
            "restart_required": "bool"
          }
        }
      ],
      "potential_routes": [
        "/health_monitor",
        "/health_monitor/status",
        "/health_monitor/create",
        "/health_monitor/update",
        "/health_monitor/delete",
        "/health_monitor/list",
        "/health_monitor/get",
        "/health_monitor/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/health",
      "method": "GET",
      "status_code": 404,
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ],
      "best_schema": "health_monitor_schema",
      "fix_type": "missing_route",
      "priority": "medium",
      "schema_models": [
        {
          "name": "HealthMetric",
          "fields": {
            "name": "str",
            "value": "Union[...]",
            "unit": "Optional[...]",
            "threshold_warning": "Optional[...]",
            "threshold_critical": "Optional[...]",
            "status": "HealthStatus",
            "timestamp": "datetime"
          }
        },
        {
          "name": "ComponentHealth",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "status": "HealthStatus",
            "metrics": "List[...]",
            "last_checked": "datetime",
            "issues": "List[...]",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "SystemHealthSummary",
          "fields": {
            "overall_status": "HealthStatus",
            "component_statuses": "Dict[...]",
            "critical_issues_count": "int",
            "warning_issues_count": "int",
            "healthy_components_count": "int",
            "total_components_count": "int",
            "last_updated": "datetime"
          }
        },
        {
          "name": "HealthCheckRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "include_metrics": "bool",
            "include_recommendations": "bool"
          }
        },
        {
          "name": "HealthCheckResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "summary": "SystemHealthSummary",
            "components": "List[...]"
          }
        },
        {
          "name": "PredictiveMaintenanceRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "time_horizon_hours": "int",
            "confidence_threshold": "float"
          }
        },
        {
          "name": "MaintenancePrediction",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "predicted_issue": "str",
            "confidence": "float",
            "time_to_failure": "Optional[...]",
            "recommended_action": "str",
            "priority": "str",
            "prediction_timestamp": "datetime"
          }
        },
        {
          "name": "PredictiveMaintenanceResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "predictions": "List[...]",
            "total_predictions_count": "int",
            "high_priority_count": "int",
            "medium_priority_count": "int",
            "low_priority_count": "int"
          }
        },
        {
          "name": "SelfHealingRequest",
          "fields": {
            "component_id": "str",
            "issue_description": "str",
            "suggested_actions": "List[...]",
            "auto_approve": "bool",
            "max_impact_level": "str"
          }
        },
        {
          "name": "HealingActionResult",
          "fields": {
            "action": "SelfHealingAction",
            "success": "bool",
            "timestamp": "datetime",
            "details": "str",
            "impact_level": "str",
            "duration_ms": "int"
          }
        },
        {
          "name": "SelfHealingResponse",
          "fields": {
            "request_id": "str",
            "component_id": "str",
            "timestamp": "datetime",
            "issue_resolved": "bool",
            "actions_performed": "List[...]",
            "current_status": "HealthStatus",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "HealthMonitorConfigRequest",
          "fields": {
            "check_interval_seconds": "Optional[...]",
            "enable_predictive_maintenance": "Optional[...]",
            "enable_self_healing": "Optional[...]",
            "alert_thresholds": "Optional[...]",
            "excluded_components": "Optional[...]"
          }
        },
        {
          "name": "HealthMonitorConfigResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "current_config": "Dict",
            "changes_applied": "Dict",
            "restart_required": "bool"
          }
        }
      ],
      "potential_routes": [
        "/health_monitor",
        "/health_monitor/status",
        "/health_monitor/create",
        "/health_monitor/update",
        "/health_monitor/delete",
        "/health_monitor/list",
        "/health_monitor/get",
        "/health_monitor/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/health",
      "method": "GET",
      "status_code": 404,
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ],
      "best_schema": "health_monitor_schema",
      "fix_type": "missing_route",
      "priority": "medium",
      "schema_models": [
        {
          "name": "HealthMetric",
          "fields": {
            "name": "str",
            "value": "Union[...]",
            "unit": "Optional[...]",
            "threshold_warning": "Optional[...]",
            "threshold_critical": "Optional[...]",
            "status": "HealthStatus",
            "timestamp": "datetime"
          }
        },
        {
          "name": "ComponentHealth",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "status": "HealthStatus",
            "metrics": "List[...]",
            "last_checked": "datetime",
            "issues": "List[...]",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "SystemHealthSummary",
          "fields": {
            "overall_status": "HealthStatus",
            "component_statuses": "Dict[...]",
            "critical_issues_count": "int",
            "warning_issues_count": "int",
            "healthy_components_count": "int",
            "total_components_count": "int",
            "last_updated": "datetime"
          }
        },
        {
          "name": "HealthCheckRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "include_metrics": "bool",
            "include_recommendations": "bool"
          }
        },
        {
          "name": "HealthCheckResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "summary": "SystemHealthSummary",
            "components": "List[...]"
          }
        },
        {
          "name": "PredictiveMaintenanceRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "time_horizon_hours": "int",
            "confidence_threshold": "float"
          }
        },
        {
          "name": "MaintenancePrediction",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "predicted_issue": "str",
            "confidence": "float",
            "time_to_failure": "Optional[...]",
            "recommended_action": "str",
            "priority": "str",
            "prediction_timestamp": "datetime"
          }
        },
        {
          "name": "PredictiveMaintenanceResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "predictions": "List[...]",
            "total_predictions_count": "int",
            "high_priority_count": "int",
            "medium_priority_count": "int",
            "low_priority_count": "int"
          }
        },
        {
          "name": "SelfHealingRequest",
          "fields": {
            "component_id": "str",
            "issue_description": "str",
            "suggested_actions": "List[...]",
            "auto_approve": "bool",
            "max_impact_level": "str"
          }
        },
        {
          "name": "HealingActionResult",
          "fields": {
            "action": "SelfHealingAction",
            "success": "bool",
            "timestamp": "datetime",
            "details": "str",
            "impact_level": "str",
            "duration_ms": "int"
          }
        },
        {
          "name": "SelfHealingResponse",
          "fields": {
            "request_id": "str",
            "component_id": "str",
            "timestamp": "datetime",
            "issue_resolved": "bool",
            "actions_performed": "List[...]",
            "current_status": "HealthStatus",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "HealthMonitorConfigRequest",
          "fields": {
            "check_interval_seconds": "Optional[...]",
            "enable_predictive_maintenance": "Optional[...]",
            "enable_self_healing": "Optional[...]",
            "alert_thresholds": "Optional[...]",
            "excluded_components": "Optional[...]"
          }
        },
        {
          "name": "HealthMonitorConfigResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "current_config": "Dict",
            "changes_applied": "Dict",
            "restart_required": "bool"
          }
        }
      ],
      "potential_routes": [
        "/health_monitor",
        "/health_monitor/status",
        "/health_monitor/create",
        "/health_monitor/update",
        "/health_monitor/delete",
        "/health_monitor/list",
        "/health_monitor/get",
        "/health_monitor/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/health/check/{component_id}",
      "method": "GET",
      "status_code": 500,
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ],
      "best_schema": "health_monitor_schema",
      "fix_type": "server_error",
      "priority": "medium",
      "schema_models": [
        {
          "name": "HealthMetric",
          "fields": {
            "name": "str",
            "value": "Union[...]",
            "unit": "Optional[...]",
            "threshold_warning": "Optional[...]",
            "threshold_critical": "Optional[...]",
            "status": "HealthStatus",
            "timestamp": "datetime"
          }
        },
        {
          "name": "ComponentHealth",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "status": "HealthStatus",
            "metrics": "List[...]",
            "last_checked": "datetime",
            "issues": "List[...]",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "SystemHealthSummary",
          "fields": {
            "overall_status": "HealthStatus",
            "component_statuses": "Dict[...]",
            "critical_issues_count": "int",
            "warning_issues_count": "int",
            "healthy_components_count": "int",
            "total_components_count": "int",
            "last_updated": "datetime"
          }
        },
        {
          "name": "HealthCheckRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "include_metrics": "bool",
            "include_recommendations": "bool"
          }
        },
        {
          "name": "HealthCheckResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "summary": "SystemHealthSummary",
            "components": "List[...]"
          }
        },
        {
          "name": "PredictiveMaintenanceRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "time_horizon_hours": "int",
            "confidence_threshold": "float"
          }
        },
        {
          "name": "MaintenancePrediction",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "predicted_issue": "str",
            "confidence": "float",
            "time_to_failure": "Optional[...]",
            "recommended_action": "str",
            "priority": "str",
            "prediction_timestamp": "datetime"
          }
        },
        {
          "name": "PredictiveMaintenanceResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "predictions": "List[...]",
            "total_predictions_count": "int",
            "high_priority_count": "int",
            "medium_priority_count": "int",
            "low_priority_count": "int"
          }
        },
        {
          "name": "SelfHealingRequest",
          "fields": {
            "component_id": "str",
            "issue_description": "str",
            "suggested_actions": "List[...]",
            "auto_approve": "bool",
            "max_impact_level": "str"
          }
        },
        {
          "name": "HealingActionResult",
          "fields": {
            "action": "SelfHealingAction",
            "success": "bool",
            "timestamp": "datetime",
            "details": "str",
            "impact_level": "str",
            "duration_ms": "int"
          }
        },
        {
          "name": "SelfHealingResponse",
          "fields": {
            "request_id": "str",
            "component_id": "str",
            "timestamp": "datetime",
            "issue_resolved": "bool",
            "actions_performed": "List[...]",
            "current_status": "HealthStatus",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "HealthMonitorConfigRequest",
          "fields": {
            "check_interval_seconds": "Optional[...]",
            "enable_predictive_maintenance": "Optional[...]",
            "enable_self_healing": "Optional[...]",
            "alert_thresholds": "Optional[...]",
            "excluded_components": "Optional[...]"
          }
        },
        {
          "name": "HealthMonitorConfigResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "current_config": "Dict",
            "changes_applied": "Dict",
            "restart_required": "bool"
          }
        }
      ],
      "potential_routes": [
        "/health_monitor",
        "/health_monitor/status",
        "/health_monitor/create",
        "/health_monitor/update",
        "/health_monitor/delete",
        "/health_monitor/list",
        "/health_monitor/get",
        "/health_monitor/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/health/maintenance/predict/{component_id}",
      "method": "GET",
      "status_code": 500,
      "module_name": "health",
      "matching_schemas": [
        "health_monitor_schema"
      ],
      "best_schema": "health_monitor_schema",
      "fix_type": "server_error",
      "priority": "medium",
      "schema_models": [
        {
          "name": "HealthMetric",
          "fields": {
            "name": "str",
            "value": "Union[...]",
            "unit": "Optional[...]",
            "threshold_warning": "Optional[...]",
            "threshold_critical": "Optional[...]",
            "status": "HealthStatus",
            "timestamp": "datetime"
          }
        },
        {
          "name": "ComponentHealth",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "status": "HealthStatus",
            "metrics": "List[...]",
            "last_checked": "datetime",
            "issues": "List[...]",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "SystemHealthSummary",
          "fields": {
            "overall_status": "HealthStatus",
            "component_statuses": "Dict[...]",
            "critical_issues_count": "int",
            "warning_issues_count": "int",
            "healthy_components_count": "int",
            "total_components_count": "int",
            "last_updated": "datetime"
          }
        },
        {
          "name": "HealthCheckRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "include_metrics": "bool",
            "include_recommendations": "bool"
          }
        },
        {
          "name": "HealthCheckResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "summary": "SystemHealthSummary",
            "components": "List[...]"
          }
        },
        {
          "name": "PredictiveMaintenanceRequest",
          "fields": {
            "component_id": "Optional[...]",
            "component_type": "Optional[...]",
            "time_horizon_hours": "int",
            "confidence_threshold": "float"
          }
        },
        {
          "name": "MaintenancePrediction",
          "fields": {
            "component_id": "str",
            "component_name": "str",
            "component_type": "ComponentType",
            "predicted_issue": "str",
            "confidence": "float",
            "time_to_failure": "Optional[...]",
            "recommended_action": "str",
            "priority": "str",
            "prediction_timestamp": "datetime"
          }
        },
        {
          "name": "PredictiveMaintenanceResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "predictions": "List[...]",
            "total_predictions_count": "int",
            "high_priority_count": "int",
            "medium_priority_count": "int",
            "low_priority_count": "int"
          }
        },
        {
          "name": "SelfHealingRequest",
          "fields": {
            "component_id": "str",
            "issue_description": "str",
            "suggested_actions": "List[...]",
            "auto_approve": "bool",
            "max_impact_level": "str"
          }
        },
        {
          "name": "HealingActionResult",
          "fields": {
            "action": "SelfHealingAction",
            "success": "bool",
            "timestamp": "datetime",
            "details": "str",
            "impact_level": "str",
            "duration_ms": "int"
          }
        },
        {
          "name": "SelfHealingResponse",
          "fields": {
            "request_id": "str",
            "component_id": "str",
            "timestamp": "datetime",
            "issue_resolved": "bool",
            "actions_performed": "List[...]",
            "current_status": "HealthStatus",
            "recommendations": "List[...]"
          }
        },
        {
          "name": "HealthMonitorConfigRequest",
          "fields": {
            "check_interval_seconds": "Optional[...]",
            "enable_predictive_maintenance": "Optional[...]",
            "enable_self_healing": "Optional[...]",
            "alert_thresholds": "Optional[...]",
            "excluded_components": "Optional[...]"
          }
        },
        {
          "name": "HealthMonitorConfigResponse",
          "fields": {
            "request_id": "str",
            "timestamp": "datetime",
            "current_config": "Dict",
            "changes_applied": "Dict",
            "restart_required": "bool"
          }
        }
      ],
      "potential_routes": [
        "/health_monitor",
        "/health_monitor/status",
        "/health_monitor/create",
        "/health_monitor/update",
        "/health_monitor/delete",
        "/health_monitor/list",
        "/health_monitor/get",
        "/health_monitor/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/context/{agent_id}",
      "method": "GET",
      "status_code": 404,
      "module_name": "context",
      "matching_schemas": [
        "agent_context_schema"
      ],
      "best_schema": "agent_context_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "MemoryUsage",
          "fields": {
            "total_entries": "int",
            "recent_entries": "int",
            "tags_count": "Dict[...]",
            "size_bytes": "Optional[...]"
          }
        },
        {
          "name": "LoopState",
          "fields": {
            "loop_id": "str",
            "current_step": "int",
            "total_steps": "int",
            "started_at": "str",
            "last_updated": "str",
            "state": "str"
          }
        },
        {
          "name": "LastAgentAction",
          "fields": {
            "agent_id": "str",
            "action_type": "str",
            "timestamp": "str",
            "status": "str",
            "details": "Optional[...]"
          }
        },
        {
          "name": "AgentContextRequest",
          "fields": {
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "include_memory_stats": "bool"
          }
        },
        {
          "name": "AgentContextResponse",
          "fields": {
            "agent_id": "str",
            "state": "AgentState",
            "loop_state": "Optional[...]",
            "last_action": "Optional[...]",
            "memory_usage": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "AgentContextError",
          "fields": {
            "message": "str",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/agent_context",
        "/agent_context/status",
        "/agent_context/create",
        "/agent_context/update",
        "/agent_context/delete",
        "/agent_context/list",
        "/agent_context/get",
        "/agent_context/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/context",
      "method": "POST",
      "status_code": 404,
      "module_name": "context",
      "matching_schemas": [
        "agent_context_schema"
      ],
      "best_schema": "agent_context_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "MemoryUsage",
          "fields": {
            "total_entries": "int",
            "recent_entries": "int",
            "tags_count": "Dict[...]",
            "size_bytes": "Optional[...]"
          }
        },
        {
          "name": "LoopState",
          "fields": {
            "loop_id": "str",
            "current_step": "int",
            "total_steps": "int",
            "started_at": "str",
            "last_updated": "str",
            "state": "str"
          }
        },
        {
          "name": "LastAgentAction",
          "fields": {
            "agent_id": "str",
            "action_type": "str",
            "timestamp": "str",
            "status": "str",
            "details": "Optional[...]"
          }
        },
        {
          "name": "AgentContextRequest",
          "fields": {
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "include_memory_stats": "bool"
          }
        },
        {
          "name": "AgentContextResponse",
          "fields": {
            "agent_id": "str",
            "state": "AgentState",
            "loop_state": "Optional[...]",
            "last_action": "Optional[...]",
            "memory_usage": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "AgentContextError",
          "fields": {
            "message": "str",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/agent_context",
        "/agent_context/status",
        "/agent_context/create",
        "/agent_context/update",
        "/agent_context/delete",
        "/agent_context/list",
        "/agent_context/get",
        "/agent_context/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/config",
      "method": "POST",
      "status_code": 404,
      "module_name": "config",
      "matching_schemas": [
        "agent_config_schema"
      ],
      "best_schema": "agent_config_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "ToolPermission",
          "fields": {
            "tool_id": "str",
            "enabled": "bool",
            "permission_level": "PermissionLevel",
            "rate_limit": "Optional[...]"
          }
        },
        {
          "name": "FallbackBehavior",
          "fields": {
            "retry_count": "int",
            "fallback_agent": "Optional[...]",
            "error_response_template": "Optional[...]",
            "log_failures": "bool"
          }
        },
        {
          "name": "AgentConfigRequest",
          "fields": {
            "agent_id": "str",
            "permissions": "List[...]",
            "fallback_behavior": "Optional[...]",
            "memory_access_level": "PermissionLevel",
            "custom_settings": "Optional[...]"
          }
        },
        {
          "name": "AgentConfigResponse",
          "fields": {
            "agent_id": "str",
            "config_updated": "bool",
            "permissions_count": "int",
            "memory_access_level": "PermissionLevel",
            "fallback_configured": "bool",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "AgentConfigError",
          "fields": {
            "message": "str",
            "agent_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "AgentConfigGetRequest",
          "fields": {
            "agent_id": "str"
          }
        },
        {
          "name": "AgentConfigGetResponse",
          "fields": {
            "agent_id": "str",
            "permissions": "List[...]",
            "fallback_behavior": "Optional[...]",
            "memory_access_level": "PermissionLevel",
            "custom_settings": "Dict[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/agent_config",
        "/agent_config/status",
        "/agent_config/create",
        "/agent_config/update",
        "/agent_config/delete",
        "/agent_config/list",
        "/agent_config/get",
        "/agent_config/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/config/{agent_id}",
      "method": "GET",
      "status_code": 404,
      "module_name": "config",
      "matching_schemas": [
        "agent_config_schema"
      ],
      "best_schema": "agent_config_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "ToolPermission",
          "fields": {
            "tool_id": "str",
            "enabled": "bool",
            "permission_level": "PermissionLevel",
            "rate_limit": "Optional[...]"
          }
        },
        {
          "name": "FallbackBehavior",
          "fields": {
            "retry_count": "int",
            "fallback_agent": "Optional[...]",
            "error_response_template": "Optional[...]",
            "log_failures": "bool"
          }
        },
        {
          "name": "AgentConfigRequest",
          "fields": {
            "agent_id": "str",
            "permissions": "List[...]",
            "fallback_behavior": "Optional[...]",
            "memory_access_level": "PermissionLevel",
            "custom_settings": "Optional[...]"
          }
        },
        {
          "name": "AgentConfigResponse",
          "fields": {
            "agent_id": "str",
            "config_updated": "bool",
            "permissions_count": "int",
            "memory_access_level": "PermissionLevel",
            "fallback_configured": "bool",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "AgentConfigError",
          "fields": {
            "message": "str",
            "agent_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "AgentConfigGetRequest",
          "fields": {
            "agent_id": "str"
          }
        },
        {
          "name": "AgentConfigGetResponse",
          "fields": {
            "agent_id": "str",
            "permissions": "List[...]",
            "fallback_behavior": "Optional[...]",
            "memory_access_level": "PermissionLevel",
            "custom_settings": "Dict[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/agent_config",
        "/agent_config/status",
        "/agent_config/create",
        "/agent_config/update",
        "/agent_config/delete",
        "/agent_config/list",
        "/agent_config/get",
        "/agent_config/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/config/{agent_id}",
      "method": "DELETE",
      "status_code": 404,
      "module_name": "config",
      "matching_schemas": [
        "agent_config_schema"
      ],
      "best_schema": "agent_config_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "ToolPermission",
          "fields": {
            "tool_id": "str",
            "enabled": "bool",
            "permission_level": "PermissionLevel",
            "rate_limit": "Optional[...]"
          }
        },
        {
          "name": "FallbackBehavior",
          "fields": {
            "retry_count": "int",
            "fallback_agent": "Optional[...]",
            "error_response_template": "Optional[...]",
            "log_failures": "bool"
          }
        },
        {
          "name": "AgentConfigRequest",
          "fields": {
            "agent_id": "str",
            "permissions": "List[...]",
            "fallback_behavior": "Optional[...]",
            "memory_access_level": "PermissionLevel",
            "custom_settings": "Optional[...]"
          }
        },
        {
          "name": "AgentConfigResponse",
          "fields": {
            "agent_id": "str",
            "config_updated": "bool",
            "permissions_count": "int",
            "memory_access_level": "PermissionLevel",
            "fallback_configured": "bool",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "AgentConfigError",
          "fields": {
            "message": "str",
            "agent_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "AgentConfigGetRequest",
          "fields": {
            "agent_id": "str"
          }
        },
        {
          "name": "AgentConfigGetResponse",
          "fields": {
            "agent_id": "str",
            "permissions": "List[...]",
            "fallback_behavior": "Optional[...]",
            "memory_access_level": "PermissionLevel",
            "custom_settings": "Dict[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/agent_config",
        "/agent_config/status",
        "/agent_config/create",
        "/agent_config/update",
        "/agent_config/delete",
        "/agent_config/list",
        "/agent_config/get",
        "/agent_config/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/analyze",
      "method": "POST",
      "status_code": 404,
      "module_name": "analyze",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/critic/review",
      "method": "POST",
      "status_code": 404,
      "module_name": "critic",
      "matching_schemas": [
        "critic_schema"
      ],
      "best_schema": "critic_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "CriticReviewRequest",
          "fields": {
            "loop_id": "str",
            "agent_outputs": "Dict[...]",
            "project_id": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "CriticScores",
          "fields": {
            "technical_accuracy": "int",
            "ux_clarity": "int",
            "visual_design": "int",
            "monetization_strategy": "int"
          }
        },
        {
          "name": "CriticUsage",
          "fields": {
            "prompt_tokens": "int",
            "completion_tokens": "int",
            "total_tokens": "int"
          }
        },
        {
          "name": "CriticReviewResult",
          "fields": {
            "status": "str",
            "loop_id": "str",
            "reflection": "Optional[...]",
            "scores": "Optional[...]",
            "rejection": "Optional[...]",
            "rejection_reason": "Optional[...]",
            "usage": "Optional[...]",
            "timestamp": "Optional[...]",
            "message": "Optional[...]",
            "raw_response": "Optional[...]"
          }
        },
        {
          "name": "CriticRejectRequest",
          "fields": {
            "loop_id": "str",
            "reason": "str",
            "project_id": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "CriticRejectResult",
          "fields": {
            "status": "str",
            "loop_id": "str",
            "rejection": "bool",
            "rejection_reason": "str",
            "timestamp": "Optional[...]",
            "message": "Optional[...]"
          }
        },
        {
          "name": "CriticLogReasonRequest",
          "fields": {
            "loop_id": "str",
            "reason_type": "str",
            "reason_text": "str",
            "project_id": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "CriticLogReasonResult",
          "fields": {
            "status": "str",
            "loop_id": "str",
            "reason_type": "str",
            "reason_text": "str",
            "timestamp": "Optional[...]",
            "message": "Optional[...]"
          }
        },
        {
          "name": "CriticErrorResult",
          "fields": {
            "status": "str",
            "message": "str",
            "task": "Optional[...]",
            "tools": "Optional[...]",
            "project_id": "Optional[...]",
            "loop_id": "Optional[...]"
          }
        }
      ],
      "potential_routes": [
        "/critic",
        "/critic/status",
        "/critic/create",
        "/critic/update",
        "/critic/delete",
        "/critic/list",
        "/critic/get",
        "/critic/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/status",
      "method": "GET",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/debugger/trace",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/audit",
      "method": "POST",
      "status_code": 404,
      "module_name": "audit",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/status",
      "method": "POST",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/test",
      "method": "POST",
      "status_code": 404,
      "module_name": "test",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/close",
      "method": "POST",
      "status_code": 404,
      "module_name": "close",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/status/{export_id}",
      "method": "GET",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/status/{stream_id}",
      "method": "GET",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/status",
      "method": "POST",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/status",
      "method": "POST",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/status/{fix_id}",
      "method": "GET",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/drift_routes/status",
      "method": "GET",
      "status_code": 404,
      "module_name": "drift_routes",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/rollback",
      "method": "POST",
      "status_code": 404,
      "module_name": "rollback",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/rollback",
      "method": "POST",
      "status_code": 404,
      "module_name": "rollback",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/override",
      "method": "POST",
      "status_code": 404,
      "module_name": "override",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/loop/complete",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/loop/trace",
      "method": "GET",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/historian/log",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/loop/plan",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/loop/trace",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/loop/persona-reflect",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/loop/reset",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/loop/respond",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/critic/review",
      "method": "POST",
      "status_code": 404,
      "module_name": "critic",
      "matching_schemas": [
        "critic_schema"
      ],
      "best_schema": "critic_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "CriticReviewRequest",
          "fields": {
            "loop_id": "str",
            "agent_outputs": "Dict[...]",
            "project_id": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "CriticScores",
          "fields": {
            "technical_accuracy": "int",
            "ux_clarity": "int",
            "visual_design": "int",
            "monetization_strategy": "int"
          }
        },
        {
          "name": "CriticUsage",
          "fields": {
            "prompt_tokens": "int",
            "completion_tokens": "int",
            "total_tokens": "int"
          }
        },
        {
          "name": "CriticReviewResult",
          "fields": {
            "status": "str",
            "loop_id": "str",
            "reflection": "Optional[...]",
            "scores": "Optional[...]",
            "rejection": "Optional[...]",
            "rejection_reason": "Optional[...]",
            "usage": "Optional[...]",
            "timestamp": "Optional[...]",
            "message": "Optional[...]",
            "raw_response": "Optional[...]"
          }
        },
        {
          "name": "CriticRejectRequest",
          "fields": {
            "loop_id": "str",
            "reason": "str",
            "project_id": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "CriticRejectResult",
          "fields": {
            "status": "str",
            "loop_id": "str",
            "rejection": "bool",
            "rejection_reason": "str",
            "timestamp": "Optional[...]",
            "message": "Optional[...]"
          }
        },
        {
          "name": "CriticLogReasonRequest",
          "fields": {
            "loop_id": "str",
            "reason_type": "str",
            "reason_text": "str",
            "project_id": "str",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "CriticLogReasonResult",
          "fields": {
            "status": "str",
            "loop_id": "str",
            "reason_type": "str",
            "reason_text": "str",
            "timestamp": "Optional[...]",
            "message": "Optional[...]"
          }
        },
        {
          "name": "CriticErrorResult",
          "fields": {
            "status": "str",
            "message": "str",
            "task": "Optional[...]",
            "tools": "Optional[...]",
            "project_id": "Optional[...]",
            "loop_id": "Optional[...]"
          }
        }
      ],
      "potential_routes": [
        "/critic",
        "/critic/status",
        "/critic/create",
        "/critic/update",
        "/critic/delete",
        "/critic/list",
        "/critic/get",
        "/critic/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/validate",
      "method": "POST",
      "status_code": 404,
      "module_name": "validate",
      "matching_schemas": [
        "validate_schema_hash"
      ],
      "best_schema": "validate_schema_hash",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "ValidateSchemaHashRequest",
          "fields": {
            "route_path": "str",
            "expected_hash": "str"
          }
        },
        {
          "name": "ValidateSchemaHashResult",
          "fields": {
            "valid": "bool",
            "actual_hash": "str",
            "message": "str"
          }
        }
      ],
      "potential_routes": [
        "/validate_hash",
        "/validate_hash/status",
        "/validate_hash/create",
        "/validate_hash/update",
        "/validate_hash/delete",
        "/validate_hash/list",
        "/validate_hash/get",
        "/validate_hash/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/embed/batch",
      "method": "POST",
      "status_code": 404,
      "module_name": "embed",
      "matching_schemas": [
        "memory_embed_schema"
      ],
      "best_schema": "memory_embed_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "MemoryEmbedRequest",
          "fields": {
            "content": "Union[...]",
            "model": "EmbeddingModel",
            "dimension": "Optional[...]",
            "tags": "List[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]"
          }
        },
        {
          "name": "MemoryEmbedResponse",
          "fields": {
            "memory_id": "str",
            "embedding_size": "int",
            "model_used": "EmbeddingModel",
            "tags": "List[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "MemoryEmbedError",
          "fields": {
            "message": "str",
            "model": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "MemoryEmbedBatchRequest",
          "fields": {
            "items": "List[...]"
          }
        },
        {
          "name": "MemoryEmbedBatchResponse",
          "fields": {
            "results": "List[...]",
            "errors": "List[...]",
            "total_items": "int",
            "successful_items": "int",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/memory_embed",
        "/memory_embed/status",
        "/memory_embed/create",
        "/memory_embed/update",
        "/memory_embed/delete",
        "/memory_embed/list",
        "/memory_embed/get",
        "/memory_embed/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/api/memory/ping",
      "method": "GET",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/memory/write",
      "method": "POST",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/memory/read",
      "method": "GET",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/recall",
      "method": "GET",
      "status_code": 404,
      "module_name": "recall",
      "matching_schemas": [
        "memory_recall_schema"
      ],
      "best_schema": "memory_recall_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "MemoryRecallRequest",
          "fields": {
            "method": "RecallMethod",
            "query": "str",
            "limit": "int",
            "offset": "int",
            "sort_order": "RecallSortOrder",
            "start_date": "Optional[...]",
            "end_date": "Optional[...]",
            "agent_filter": "Optional[...]",
            "loop_filter": "Optional[...]"
          }
        },
        {
          "name": "MemoryEntry",
          "fields": {
            "memory_id": "str",
            "content": "Dict[...]",
            "tags": "List[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str"
          }
        },
        {
          "name": "MemoryRecallResponse",
          "fields": {
            "query": "str",
            "method": "RecallMethod",
            "total_results": "int",
            "returned_results": "int",
            "results": "List[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "MemoryRecallError",
          "fields": {
            "message": "str",
            "query": "Optional[...]",
            "method": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/memory_recall",
        "/memory_recall/status",
        "/memory_recall/create",
        "/memory_recall/update",
        "/memory_recall/delete",
        "/memory_recall/list",
        "/memory_recall/get",
        "/memory_recall/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/recall",
      "method": "POST",
      "status_code": 404,
      "module_name": "recall",
      "matching_schemas": [
        "memory_recall_schema"
      ],
      "best_schema": "memory_recall_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "MemoryRecallRequest",
          "fields": {
            "method": "RecallMethod",
            "query": "str",
            "limit": "int",
            "offset": "int",
            "sort_order": "RecallSortOrder",
            "start_date": "Optional[...]",
            "end_date": "Optional[...]",
            "agent_filter": "Optional[...]",
            "loop_filter": "Optional[...]"
          }
        },
        {
          "name": "MemoryEntry",
          "fields": {
            "memory_id": "str",
            "content": "Dict[...]",
            "tags": "List[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str"
          }
        },
        {
          "name": "MemoryRecallResponse",
          "fields": {
            "query": "str",
            "method": "RecallMethod",
            "total_results": "int",
            "returned_results": "int",
            "results": "List[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "MemoryRecallError",
          "fields": {
            "message": "str",
            "query": "Optional[...]",
            "method": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/memory_recall",
        "/memory_recall/status",
        "/memory_recall/create",
        "/memory_recall/update",
        "/memory_recall/delete",
        "/memory_recall/list",
        "/memory_recall/get",
        "/memory_recall/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/embed",
      "method": "POST",
      "status_code": 404,
      "module_name": "embed",
      "matching_schemas": [
        "memory_embed_schema"
      ],
      "best_schema": "memory_embed_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "MemoryEmbedRequest",
          "fields": {
            "content": "Union[...]",
            "model": "EmbeddingModel",
            "dimension": "Optional[...]",
            "tags": "List[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]"
          }
        },
        {
          "name": "MemoryEmbedResponse",
          "fields": {
            "memory_id": "str",
            "embedding_size": "int",
            "model_used": "EmbeddingModel",
            "tags": "List[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "MemoryEmbedError",
          "fields": {
            "message": "str",
            "model": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "MemoryEmbedBatchRequest",
          "fields": {
            "items": "List[...]"
          }
        },
        {
          "name": "MemoryEmbedBatchResponse",
          "fields": {
            "results": "List[...]",
            "errors": "List[...]",
            "total_items": "int",
            "successful_items": "int",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/memory_embed",
        "/memory_embed/status",
        "/memory_embed/create",
        "/memory_embed/update",
        "/memory_embed/delete",
        "/memory_embed/list",
        "/memory_embed/get",
        "/memory_embed/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/generate-component",
      "method": "POST",
      "status_code": 404,
      "module_name": "generate-component",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/journal",
      "method": "POST",
      "status_code": 404,
      "module_name": "journal",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/observe",
      "method": "POST",
      "status_code": 404,
      "module_name": "observe",
      "matching_schemas": [
        "observer_schema"
      ],
      "best_schema": "observer_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "ObserverTaskRequest",
          "fields": {
            "task": "str",
            "date": "Optional[...]",
            "tools": "Optional[...]"
          }
        },
        {
          "name": "ObservationEntry",
          "fields": {
            "date": "str",
            "memory_summary": "str",
            "behavior_observed": "Optional[...]",
            "anomalies": "Optional[...]",
            "vertical_progress": "Optional[...]",
            "loops_observed": "Optional[...]",
            "personality_notes": "Optional[...]",
            "philosophical_questions": "Optional[...]"
          }
        },
        {
          "name": "ObserverTaskResult",
          "fields": {
            "status": "str",
            "message": "str",
            "task": "str",
            "date": "str",
            "entry": "Optional[...]",
            "log_path": "Optional[...]",
            "timestamp": "str"
          }
        },
        {
          "name": "ObserverErrorResult",
          "fields": {
            "status": "str",
            "message": "str",
            "task": "Optional[...]",
            "timestamp": "str"
          }
        }
      ],
      "potential_routes": [
        "/observer",
        "/observer/status",
        "/observer/create",
        "/observer/update",
        "/observer/delete",
        "/observer/list",
        "/observer/get",
        "/observer/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/build-ui",
      "method": "POST",
      "status_code": 404,
      "module_name": "build-ui",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/api/orchestrator/status",
      "method": "GET",
      "status_code": 404,
      "module_name": "api",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/logs",
      "method": "POST",
      "status_code": 404,
      "module_name": "logs",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/enforce",
      "method": "POST",
      "status_code": 404,
      "module_name": "enforce",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/generate",
      "method": "GET",
      "status_code": 404,
      "module_name": "generate",
      "matching_schemas": [
        "plan_generate_schema"
      ],
      "best_schema": "plan_generate_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "PlanGenerateRequest",
          "fields": {
            "goal": "str",
            "plan_type": "PlanType",
            "format": "PlanFormat",
            "context": "Optional[...]",
            "constraints": "Optional[...]",
            "max_steps": "Optional[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]"
          }
        },
        {
          "name": "PlanStep",
          "fields": {
            "step_number": "int",
            "description": "str",
            "estimated_time": "Optional[...]",
            "dependencies": "Optional[...]"
          }
        },
        {
          "name": "PlanGenerateResponse",
          "fields": {
            "plan_id": "str",
            "goal": "str",
            "plan_type": "PlanType",
            "format": "PlanFormat",
            "steps": "Optional[...]",
            "content": "Optional[...]",
            "total_steps": "int",
            "estimated_completion_time": "Optional[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "PlanGenerateError",
          "fields": {
            "message": "str",
            "goal": "Optional[...]",
            "plan_type": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/plan_generate",
        "/plan_generate/status",
        "/plan_generate/create",
        "/plan_generate/update",
        "/plan_generate/delete",
        "/plan_generate/list",
        "/plan_generate/get",
        "/plan_generate/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/check",
      "method": "POST",
      "status_code": 404,
      "module_name": "check",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/generate",
      "method": "POST",
      "status_code": 404,
      "module_name": "generate",
      "matching_schemas": [
        "plan_generate_schema"
      ],
      "best_schema": "plan_generate_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "PlanGenerateRequest",
          "fields": {
            "goal": "str",
            "plan_type": "PlanType",
            "format": "PlanFormat",
            "context": "Optional[...]",
            "constraints": "Optional[...]",
            "max_steps": "Optional[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]"
          }
        },
        {
          "name": "PlanStep",
          "fields": {
            "step_number": "int",
            "description": "str",
            "estimated_time": "Optional[...]",
            "dependencies": "Optional[...]"
          }
        },
        {
          "name": "PlanGenerateResponse",
          "fields": {
            "plan_id": "str",
            "goal": "str",
            "plan_type": "PlanType",
            "format": "PlanFormat",
            "steps": "Optional[...]",
            "content": "Optional[...]",
            "total_steps": "int",
            "estimated_completion_time": "Optional[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "PlanGenerateError",
          "fields": {
            "message": "str",
            "goal": "Optional[...]",
            "plan_type": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/plan_generate",
        "/plan_generate/status",
        "/plan_generate/create",
        "/plan_generate/update",
        "/plan_generate/delete",
        "/plan_generate/list",
        "/plan_generate/get",
        "/plan_generate/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/reflect",
      "method": "POST",
      "status_code": 404,
      "module_name": "reflect",
      "matching_schemas": [
        "self_reflection_schema"
      ],
      "best_schema": "self_reflection_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "SelfInquiryRequest",
          "fields": {
            "loop_id": "str",
            "project_id": "str",
            "prompt": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_reflection",
        "/self_reflection/status",
        "/self_reflection/create",
        "/self_reflection/update",
        "/self_reflection/delete",
        "/self_reflection/list",
        "/self_reflection/get",
        "/self_reflection/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/run",
      "method": "POST",
      "status_code": 404,
      "module_name": "run",
      "matching_schemas": [
        "rerun_decision"
      ],
      "best_schema": "rerun_decision",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "RerunDecision",
          "fields": {
            "decision": "str",
            "loop_id": "str",
            "original_loop_id": "Optional[...]",
            "new_loop_id": "Optional[...]",
            "rerun_reason": "Optional[...]",
            "rerun_number": "Optional[...]",
            "reason": "Optional[...]",
            "orchestrator_persona": "Optional[...]",
            "rerun_limit_reached": "Optional[...]",
            "bias_echo_detected": "Optional[...]",
            "fatigue_threshold_exceeded": "Optional[...]",
            "force_finalized": "Optional[...]",
            "rerun_trigger": "Optional[...]",
            "rerun_reason_detail": "Optional[...]",
            "overridden_by": "Optional[...]",
            "alignment_score": "Optional[...]",
            "drift_score": "Optional[...]",
            "belief_conflict_flags": "Optional[...]",
            "safety_triggered": "Optional[...]",
            "safety_trigger_type": "Optional[...]",
            "safety_severity": "Optional[...]",
            "operator_triggered": "Optional[...]",
            "operator_id": "Optional[...]",
            "operator_reason": "Optional[...]",
            "depth": "Optional[...]",
            "depth_escalation": "Optional[...]",
            "depth_escalation_reason": "Optional[...]",
            "timestamp": "Optional[...]",
            "execution_priority": "Optional[...]",
            "schema_validated": "bool",
            "validation_timestamp": "Optional[...]",
            "validation_errors": "Optional[...]"
          }
        }
      ],
      "potential_routes": [
        "/rerun_decision",
        "/rerun_decision/status",
        "/rerun_decision/create",
        "/rerun_decision/update",
        "/rerun_decision/delete",
        "/rerun_decision/list",
        "/rerun_decision/get",
        "/rerun_decision/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/review",
      "method": "POST",
      "status_code": 404,
      "module_name": "review",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/reinforce",
      "method": "POST",
      "status_code": 404,
      "module_name": "reinforce",
      "matching_schemas": [
        "self_reinforcement_schema"
      ],
      "best_schema": "self_reinforcement_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "BeliefReinforcementRequest",
          "fields": {
            "loop_id": "str",
            "field": "str",
            "reinforcement_reason": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_reinforcement",
        "/self_reinforcement/status",
        "/self_reinforcement/create",
        "/self_reinforcement/update",
        "/self_reinforcement/delete",
        "/self_reinforcement/list",
        "/self_reinforcement/get",
        "/self_reinforcement/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/revise",
      "method": "POST",
      "status_code": 404,
      "module_name": "revise",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/reflect",
      "method": "POST",
      "status_code": 404,
      "module_name": "reflect",
      "matching_schemas": [
        "self_reflection_schema"
      ],
      "best_schema": "self_reflection_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "SelfInquiryRequest",
          "fields": {
            "loop_id": "str",
            "project_id": "str",
            "prompt": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_reflection",
        "/self_reflection/status",
        "/self_reflection/create",
        "/self_reflection/update",
        "/self_reflection/delete",
        "/self_reflection/list",
        "/self_reflection/get",
        "/self_reflection/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/reinforce",
      "method": "POST",
      "status_code": 404,
      "module_name": "reinforce",
      "matching_schemas": [
        "self_reinforcement_schema"
      ],
      "best_schema": "self_reinforcement_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "BeliefReinforcementRequest",
          "fields": {
            "loop_id": "str",
            "field": "str",
            "reinforcement_reason": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_reinforcement",
        "/self_reinforcement/status",
        "/self_reinforcement/create",
        "/self_reinforcement/update",
        "/self_reinforcement/delete",
        "/self_reinforcement/list",
        "/self_reinforcement/get",
        "/self_reinforcement/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/challenge",
      "method": "POST",
      "status_code": 404,
      "module_name": "challenge",
      "matching_schemas": [
        "self_challenge_schema"
      ],
      "best_schema": "self_challenge_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "BeliefChallengeRequest",
          "fields": {
            "loop_id": "str",
            "field": "str",
            "challenger": "str",
            "challenge_reason": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_challenge",
        "/self_challenge/status",
        "/self_challenge/create",
        "/self_challenge/update",
        "/self_challenge/delete",
        "/self_challenge/list",
        "/self_challenge/get",
        "/self_challenge/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/revise",
      "method": "POST",
      "status_code": 404,
      "module_name": "revise",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/revise",
      "method": "POST",
      "status_code": 404,
      "module_name": "revise",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/reinforce",
      "method": "POST",
      "status_code": 404,
      "module_name": "reinforce",
      "matching_schemas": [
        "self_reinforcement_schema"
      ],
      "best_schema": "self_reinforcement_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "BeliefReinforcementRequest",
          "fields": {
            "loop_id": "str",
            "field": "str",
            "reinforcement_reason": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_reinforcement",
        "/self_reinforcement/status",
        "/self_reinforcement/create",
        "/self_reinforcement/update",
        "/self_reinforcement/delete",
        "/self_reinforcement/list",
        "/self_reinforcement/get",
        "/self_reinforcement/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/reflect",
      "method": "POST",
      "status_code": 404,
      "module_name": "reflect",
      "matching_schemas": [
        "self_reflection_schema"
      ],
      "best_schema": "self_reflection_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "SelfInquiryRequest",
          "fields": {
            "loop_id": "str",
            "project_id": "str",
            "prompt": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_reflection",
        "/self_reflection/status",
        "/self_reflection/create",
        "/self_reflection/update",
        "/self_reflection/delete",
        "/self_reflection/list",
        "/self_reflection/get",
        "/self_reflection/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/challenge",
      "method": "POST",
      "status_code": 404,
      "module_name": "challenge",
      "matching_schemas": [
        "self_challenge_schema"
      ],
      "best_schema": "self_challenge_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "BeliefChallengeRequest",
          "fields": {
            "loop_id": "str",
            "field": "str",
            "challenger": "str",
            "challenge_reason": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_challenge",
        "/self_challenge/status",
        "/self_challenge/create",
        "/self_challenge/update",
        "/self_challenge/delete",
        "/self_challenge/list",
        "/self_challenge/get",
        "/self_challenge/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/revise",
      "method": "POST",
      "status_code": 404,
      "module_name": "revise",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/reinforce",
      "method": "POST",
      "status_code": 404,
      "module_name": "reinforce",
      "matching_schemas": [
        "self_reinforcement_schema"
      ],
      "best_schema": "self_reinforcement_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "BeliefReinforcementRequest",
          "fields": {
            "loop_id": "str",
            "field": "str",
            "reinforcement_reason": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_reinforcement",
        "/self_reinforcement/status",
        "/self_reinforcement/create",
        "/self_reinforcement/update",
        "/self_reinforcement/delete",
        "/self_reinforcement/list",
        "/self_reinforcement/get",
        "/self_reinforcement/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/evaluate",
      "method": "POST",
      "status_code": 404,
      "module_name": "evaluate",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/challenge",
      "method": "POST",
      "status_code": 404,
      "module_name": "challenge",
      "matching_schemas": [
        "self_challenge_schema"
      ],
      "best_schema": "self_challenge_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "BeliefChallengeRequest",
          "fields": {
            "loop_id": "str",
            "field": "str",
            "challenger": "str",
            "challenge_reason": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_challenge",
        "/self_challenge/status",
        "/self_challenge/create",
        "/self_challenge/update",
        "/self_challenge/delete",
        "/self_challenge/list",
        "/self_challenge/get",
        "/self_challenge/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/reflect",
      "method": "POST",
      "status_code": 404,
      "module_name": "reflect",
      "matching_schemas": [
        "self_reflection_schema"
      ],
      "best_schema": "self_reflection_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "SelfInquiryRequest",
          "fields": {
            "loop_id": "str",
            "project_id": "str",
            "prompt": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_reflection",
        "/self_reflection/status",
        "/self_reflection/create",
        "/self_reflection/update",
        "/self_reflection/delete",
        "/self_reflection/list",
        "/self_reflection/get",
        "/self_reflection/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/challenge",
      "method": "POST",
      "status_code": 404,
      "module_name": "challenge",
      "matching_schemas": [
        "self_challenge_schema"
      ],
      "best_schema": "self_challenge_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "BeliefChallengeRequest",
          "fields": {
            "loop_id": "str",
            "field": "str",
            "challenger": "str",
            "challenge_reason": "str",
            "initiator": "str"
          }
        }
      ],
      "potential_routes": [
        "/self_challenge",
        "/self_challenge/status",
        "/self_challenge/create",
        "/self_challenge/update",
        "/self_challenge/delete",
        "/self_challenge/list",
        "/self_challenge/get",
        "/self_challenge/search"
      ],
      "route_hints": []
    },
    {
      "route_path": "/analyze",
      "method": "POST",
      "status_code": 404,
      "module_name": "analyze",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/status",
      "method": "POST",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/status/{model_id}",
      "method": "GET",
      "status_code": 404,
      "module_name": "status",
      "matching_schemas": [],
      "best_schema": null,
      "fix_type": "missing_route",
      "priority": "low"
    },
    {
      "route_path": "/plan",
      "method": "POST",
      "status_code": 404,
      "module_name": "plan",
      "matching_schemas": [
        "plan_generate_schema"
      ],
      "best_schema": "plan_generate_schema",
      "fix_type": "missing_route",
      "priority": "low",
      "schema_models": [
        {
          "name": "PlanGenerateRequest",
          "fields": {
            "goal": "str",
            "plan_type": "PlanType",
            "format": "PlanFormat",
            "context": "Optional[...]",
            "constraints": "Optional[...]",
            "max_steps": "Optional[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]"
          }
        },
        {
          "name": "PlanStep",
          "fields": {
            "step_number": "int",
            "description": "str",
            "estimated_time": "Optional[...]",
            "dependencies": "Optional[...]"
          }
        },
        {
          "name": "PlanGenerateResponse",
          "fields": {
            "plan_id": "str",
            "goal": "str",
            "plan_type": "PlanType",
            "format": "PlanFormat",
            "steps": "Optional[...]",
            "content": "Optional[...]",
            "total_steps": "int",
            "estimated_completion_time": "Optional[...]",
            "agent_id": "Optional[...]",
            "loop_id": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        },
        {
          "name": "PlanGenerateError",
          "fields": {
            "message": "str",
            "goal": "Optional[...]",
            "plan_type": "Optional[...]",
            "timestamp": "str",
            "version": "str"
          }
        }
      ],
      "potential_routes": [
        "/plan_generate",
        "/plan_generate/status",
        "/plan_generate/create",
        "/plan_generate/update",
        "/plan_generate/delete",
        "/plan_generate/list",
        "/plan_generate/get",
        "/plan_generate/search"
      ],
      "route_hints": []
    }
  ],
  "summary": {
    "total_schemas": 41,
    "non_operational_endpoints": 84,
    "fix_recommendations": 84,
    "high_priority": 4,
    "medium_priority": 8,
    "low_priority": 72
  }
}