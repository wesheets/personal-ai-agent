{
  "timestamp": "20250425_2324",
  "total_endpoints": 119,
  "operational_count": 35,
  "non_operational_count": 84,
  "status_breakdown": {
    "404": 77,
    "500": 7
  },
  "module_breakdown": {
    "config": 3,
    "context": 2,
    "orchestrator": 3,
    "status": 9,
    "critic": 2,
    "analyze": 2,
    "audit": 1,
    "api": 13,
    "test": 1,
    "health": 8,
    "close": 1,
    "rollback": 2,
    "drift_routes": 1,
    "override": 1,
    "loop": 1,
    "embed": 2,
    "validate": 1,
    "generate-component": 1,
    "recall": 2,
    "observe": 1,
    "build-ui": 1,
    "journal": 1,
    "logs": 1,
    "check": 1,
    "enforce": 1,
    "run": 1,
    "review": 1,
    "reinforce": 4,
    "generate": 2,
    "reflect": 4,
    "revise": 4,
    "challenge": 4,
    "evaluate": 1,
    "plan": 1
  },
  "schema_match_count": 34,
  "no_schema_match_count": 50,
  "partial_match_count": 0,
  "non_operational_endpoints": [
    {
      "method": "POST",
      "route_path": "/config",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "agent_config_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/agent_config_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/agent_config_routes.py",
        "models": [
          {
            "name": "ToolPermission",
            "fields": {
              "tool_id": "str",
              "enabled": "bool",
              "permission_level": "PermissionLevel",
              "rate_limit": "Optional[...]"
            }
          },
          {
            "name": "FallbackBehavior",
            "fields": {
              "retry_count": "int",
              "fallback_agent": "Optional[...]",
              "error_response_template": "Optional[...]",
              "log_failures": "bool"
            }
          },
          {
            "name": "AgentConfigRequest",
            "fields": {
              "agent_id": "str",
              "permissions": "List[...]",
              "fallback_behavior": "Optional[...]",
              "memory_access_level": "PermissionLevel",
              "custom_settings": "Optional[...]"
            }
          },
          {
            "name": "AgentConfigResponse",
            "fields": {
              "agent_id": "str",
              "config_updated": "bool",
              "permissions_count": "int",
              "memory_access_level": "PermissionLevel",
              "fallback_configured": "bool",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentConfigError",
            "fields": {
              "message": "str",
              "agent_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentConfigGetRequest",
            "fields": {
              "agent_id": "str"
            }
          },
          {
            "name": "AgentConfigGetResponse",
            "fields": {
              "agent_id": "str",
              "permissions": "List[...]",
              "fallback_behavior": "Optional[...]",
              "memory_access_level": "PermissionLevel",
              "custom_settings": "Dict[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/context/{agent_id}",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": true,
      "schema_match": {
        "schema_name": "agent_context_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/agent_context_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/agent_context_routes.py",
        "models": [
          {
            "name": "MemoryUsage",
            "fields": {
              "total_entries": "int",
              "recent_entries": "int",
              "tags_count": "Dict[...]",
              "size_bytes": "Optional[...]"
            }
          },
          {
            "name": "LoopState",
            "fields": {
              "loop_id": "str",
              "current_step": "int",
              "total_steps": "int",
              "started_at": "str",
              "last_updated": "str",
              "state": "str"
            }
          },
          {
            "name": "LastAgentAction",
            "fields": {
              "agent_id": "str",
              "action_type": "str",
              "timestamp": "str",
              "status": "str",
              "details": "Optional[...]"
            }
          },
          {
            "name": "AgentContextRequest",
            "fields": {
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "include_memory_stats": "bool"
            }
          },
          {
            "name": "AgentContextResponse",
            "fields": {
              "agent_id": "str",
              "state": "AgentState",
              "loop_state": "Optional[...]",
              "last_action": "Optional[...]",
              "memory_usage": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentContextError",
            "fields": {
              "message": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/config/{agent_id}",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "agent_config_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/agent_config_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/agent_config_routes.py",
        "models": [
          {
            "name": "ToolPermission",
            "fields": {
              "tool_id": "str",
              "enabled": "bool",
              "permission_level": "PermissionLevel",
              "rate_limit": "Optional[...]"
            }
          },
          {
            "name": "FallbackBehavior",
            "fields": {
              "retry_count": "int",
              "fallback_agent": "Optional[...]",
              "error_response_template": "Optional[...]",
              "log_failures": "bool"
            }
          },
          {
            "name": "AgentConfigRequest",
            "fields": {
              "agent_id": "str",
              "permissions": "List[...]",
              "fallback_behavior": "Optional[...]",
              "memory_access_level": "PermissionLevel",
              "custom_settings": "Optional[...]"
            }
          },
          {
            "name": "AgentConfigResponse",
            "fields": {
              "agent_id": "str",
              "config_updated": "bool",
              "permissions_count": "int",
              "memory_access_level": "PermissionLevel",
              "fallback_configured": "bool",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentConfigError",
            "fields": {
              "message": "str",
              "agent_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentConfigGetRequest",
            "fields": {
              "agent_id": "str"
            }
          },
          {
            "name": "AgentConfigGetResponse",
            "fields": {
              "agent_id": "str",
              "permissions": "List[...]",
              "fallback_behavior": "Optional[...]",
              "memory_access_level": "PermissionLevel",
              "custom_settings": "Dict[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/context",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "agent_context_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/agent_context_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/agent_context_routes.py",
        "models": [
          {
            "name": "MemoryUsage",
            "fields": {
              "total_entries": "int",
              "recent_entries": "int",
              "tags_count": "Dict[...]",
              "size_bytes": "Optional[...]"
            }
          },
          {
            "name": "LoopState",
            "fields": {
              "loop_id": "str",
              "current_step": "int",
              "total_steps": "int",
              "started_at": "str",
              "last_updated": "str",
              "state": "str"
            }
          },
          {
            "name": "LastAgentAction",
            "fields": {
              "agent_id": "str",
              "action_type": "str",
              "timestamp": "str",
              "status": "str",
              "details": "Optional[...]"
            }
          },
          {
            "name": "AgentContextRequest",
            "fields": {
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "include_memory_stats": "bool"
            }
          },
          {
            "name": "AgentContextResponse",
            "fields": {
              "agent_id": "str",
              "state": "AgentState",
              "loop_state": "Optional[...]",
              "last_action": "Optional[...]",
              "memory_usage": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentContextError",
            "fields": {
              "message": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/orchestrator/validate_delegation",
      "status_code": 500,
      "status": "500 Internal Server Error",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "DELETE",
      "route_path": "/config/{agent_id}",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "agent_config_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/agent_config_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/agent_config_routes.py",
        "models": [
          {
            "name": "ToolPermission",
            "fields": {
              "tool_id": "str",
              "enabled": "bool",
              "permission_level": "PermissionLevel",
              "rate_limit": "Optional[...]"
            }
          },
          {
            "name": "FallbackBehavior",
            "fields": {
              "retry_count": "int",
              "fallback_agent": "Optional[...]",
              "error_response_template": "Optional[...]",
              "log_failures": "bool"
            }
          },
          {
            "name": "AgentConfigRequest",
            "fields": {
              "agent_id": "str",
              "permissions": "List[...]",
              "fallback_behavior": "Optional[...]",
              "memory_access_level": "PermissionLevel",
              "custom_settings": "Optional[...]"
            }
          },
          {
            "name": "AgentConfigResponse",
            "fields": {
              "agent_id": "str",
              "config_updated": "bool",
              "permissions_count": "int",
              "memory_access_level": "PermissionLevel",
              "fallback_configured": "bool",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentConfigError",
            "fields": {
              "message": "str",
              "agent_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "AgentConfigGetRequest",
            "fields": {
              "agent_id": "str"
            }
          },
          {
            "name": "AgentConfigGetResponse",
            "fields": {
              "agent_id": "str",
              "permissions": "List[...]",
              "fallback_behavior": "Optional[...]",
              "memory_access_level": "PermissionLevel",
              "custom_settings": "Dict[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/status",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "train_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/train_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/train_routes.py",
        "models": [
          {
            "name": "TrainRequest",
            "fields": {
              "model_type": "TrainingModel",
              "training_data": "Union[...]",
              "data_format": "TrainingDataFormat",
              "model_name": "str",
              "hyperparameters": "Optional[...]",
              "validation_split": "Optional[...]",
              "max_epochs": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "TrainingMetrics",
            "fields": {
              "accuracy": "Optional[...]",
              "precision": "Optional[...]",
              "recall": "Optional[...]",
              "f1_score": "Optional[...]",
              "loss": "float",
              "val_loss": "Optional[...]",
              "epochs_completed": "int",
              "training_time": "float"
            }
          },
          {
            "name": "TrainResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "model_type": "TrainingModel",
              "status": "str",
              "metrics": "Optional[...]",
              "examples_processed": "int",
              "model_size": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainError",
            "fields": {
              "message": "str",
              "model_type": "Optional[...]",
              "model_name": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainStatusRequest",
            "fields": {
              "model_id": "str"
            }
          },
          {
            "name": "TrainStatusResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "status": "str",
              "progress": "Optional[...]",
              "current_epoch": "Optional[...]",
              "total_epochs": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/orchestrator/check_recovery_authorization",
      "status_code": 500,
      "status": "500 Internal Server Error",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/orchestrator/handle_violation",
      "status_code": 500,
      "status": "500 Internal Server Error",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/critic/review",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/analyze",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "ash_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/ash_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/ash_routes.py",
        "models": [
          {
            "name": "AshAnalysisRequest",
            "fields": {
              "scenario_id": "str",
              "context": "Dict[...]",
              "constraints": "Optional[...]",
              "risk_tolerance": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "RiskFactor",
            "fields": {
              "factor_id": "str",
              "name": "str",
              "probability": "float",
              "impact": "float",
              "description": "str",
              "mitigation_strategies": "Optional[...]"
            }
          },
          {
            "name": "AshAnalysisResult",
            "fields": {
              "status": "str",
              "scenario_id": "str",
              "risk_assessment": "Optional[...]",
              "risk_factors": "Optional[...]",
              "anomalies_detected": "Optional[...]",
              "recommended_actions": "Optional[...]",
              "overall_risk_score": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "AshTestRequest",
            "fields": {
              "scenario_id": "str",
              "test_parameters": "Dict[...]",
              "expected_outcomes": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "TestResult",
            "fields": {
              "test_id": "str",
              "name": "str",
              "status": "str",
              "description": "str",
              "actual_outcome": "str",
              "expected_outcome": "Optional[...]"
            }
          },
          {
            "name": "AshTestResult",
            "fields": {
              "status": "str",
              "scenario_id": "str",
              "test_summary": "Optional[...]",
              "test_results": "Optional[...]",
              "anomalies_detected": "Optional[...]",
              "recommendations": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "AshErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "scenario_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/audit",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/api/debugger/trace",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/test",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "ash_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/ash_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/ash_routes.py",
        "models": [
          {
            "name": "AshAnalysisRequest",
            "fields": {
              "scenario_id": "str",
              "context": "Dict[...]",
              "constraints": "Optional[...]",
              "risk_tolerance": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "RiskFactor",
            "fields": {
              "factor_id": "str",
              "name": "str",
              "probability": "float",
              "impact": "float",
              "description": "str",
              "mitigation_strategies": "Optional[...]"
            }
          },
          {
            "name": "AshAnalysisResult",
            "fields": {
              "status": "str",
              "scenario_id": "str",
              "risk_assessment": "Optional[...]",
              "risk_factors": "Optional[...]",
              "anomalies_detected": "Optional[...]",
              "recommended_actions": "Optional[...]",
              "overall_risk_score": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "AshTestRequest",
            "fields": {
              "scenario_id": "str",
              "test_parameters": "Dict[...]",
              "expected_outcomes": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "TestResult",
            "fields": {
              "test_id": "str",
              "name": "str",
              "status": "str",
              "description": "str",
              "actual_outcome": "str",
              "expected_outcome": "Optional[...]"
            }
          },
          {
            "name": "AshTestResult",
            "fields": {
              "status": "str",
              "scenario_id": "str",
              "test_summary": "Optional[...]",
              "test_results": "Optional[...]",
              "anomalies_detected": "Optional[...]",
              "recommendations": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "AshErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "scenario_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/health",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/status",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "train_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/train_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/train_routes.py",
        "models": [
          {
            "name": "TrainRequest",
            "fields": {
              "model_type": "TrainingModel",
              "training_data": "Union[...]",
              "data_format": "TrainingDataFormat",
              "model_name": "str",
              "hyperparameters": "Optional[...]",
              "validation_split": "Optional[...]",
              "max_epochs": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "TrainingMetrics",
            "fields": {
              "accuracy": "Optional[...]",
              "precision": "Optional[...]",
              "recall": "Optional[...]",
              "f1_score": "Optional[...]",
              "loss": "float",
              "val_loss": "Optional[...]",
              "epochs_completed": "int",
              "training_time": "float"
            }
          },
          {
            "name": "TrainResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "model_type": "TrainingModel",
              "status": "str",
              "metrics": "Optional[...]",
              "examples_processed": "int",
              "model_size": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainError",
            "fields": {
              "message": "str",
              "model_type": "Optional[...]",
              "model_name": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainStatusRequest",
            "fields": {
              "model_id": "str"
            }
          },
          {
            "name": "TrainStatusResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "status": "str",
              "progress": "Optional[...]",
              "current_epoch": "Optional[...]",
              "total_epochs": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/status/{export_id}",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "export_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/export_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/export_routes.py",
        "models": [
          {
            "name": "ExportRequest",
            "fields": {
              "export_type": "ExportType",
              "export_id": "str",
              "format": "ExportFormat",
              "include_metadata": "bool",
              "filters": "Optional[...]",
              "start_date": "Optional[...]",
              "end_date": "Optional[...]",
              "max_items": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "ExportResponse",
            "fields": {
              "export_id": "str",
              "export_type": "ExportType",
              "format": "ExportFormat",
              "file_name": "str",
              "file_size": "int",
              "download_url": "str",
              "expires_at": "str",
              "items_exported": "int",
              "include_metadata": "bool",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "ExportError",
            "fields": {
              "message": "str",
              "export_type": "Optional[...]",
              "export_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "ExportStatusRequest",
            "fields": {
              "export_id": "str"
            }
          },
          {
            "name": "ExportStatusResponse",
            "fields": {
              "export_id": "str",
              "status": "str",
              "progress": "Optional[...]",
              "items_processed": "Optional[...]",
              "total_items": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "download_url": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/close",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "delegate_stream_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/delegate_stream_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/delegate_stream_routes.py",
        "models": [
          {
            "name": "StreamRequest",
            "fields": {
              "stream_type": "StreamType",
              "target_id": "str",
              "description": "str",
              "priority": "StreamPriority",
              "filters": "Optional[...]",
              "max_events": "Optional[...]",
              "timeout_seconds": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "StreamResponse",
            "fields": {
              "stream_id": "str",
              "stream_type": "StreamType",
              "target_id": "str",
              "status": "str",
              "connection_url": "str",
              "token": "str",
              "expires_at": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamError",
            "fields": {
              "message": "str",
              "stream_type": "Optional[...]",
              "target_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamStatusRequest",
            "fields": {
              "stream_id": "str"
            }
          },
          {
            "name": "StreamStatusResponse",
            "fields": {
              "stream_id": "str",
              "stream_type": "StreamType",
              "target_id": "str",
              "status": "str",
              "events_streamed": "int",
              "connected_clients": "int",
              "created_at": "str",
              "expires_at": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamCloseRequest",
            "fields": {
              "stream_id": "str",
              "reason": "Optional[...]"
            }
          },
          {
            "name": "StreamCloseResponse",
            "fields": {
              "stream_id": "str",
              "status": "str",
              "events_streamed": "int",
              "duration_seconds": "int",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamEvent",
            "fields": {
              "event_id": "str",
              "stream_id": "str",
              "event_type": "str",
              "source": "str",
              "data": "Dict[...]",
              "timestamp": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/status/{fix_id}",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "fix_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/fix_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/fix_routes.py",
        "models": [
          {
            "name": "FixRequest",
            "fields": {
              "fix_type": "FixType",
              "target_id": "str",
              "description": "str",
              "parameters": "Optional[...]",
              "force": "bool",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "FixResponse",
            "fields": {
              "fix_id": "str",
              "fix_type": "FixType",
              "target_id": "str",
              "status": "str",
              "changes_made": "List[...]",
              "warnings": "List[...]",
              "backup_id": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixError",
            "fields": {
              "message": "str",
              "fix_type": "Optional[...]",
              "target_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixStatusRequest",
            "fields": {
              "fix_id": "str"
            }
          },
          {
            "name": "FixStatusResponse",
            "fields": {
              "fix_id": "str",
              "fix_type": "FixType",
              "target_id": "str",
              "status": "str",
              "progress": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "changes_made": "Optional[...]",
              "warnings": "Optional[...]",
              "error_message": "Optional[...]",
              "backup_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixRollbackRequest",
            "fields": {
              "fix_id": "str",
              "reason": "Optional[...]"
            }
          },
          {
            "name": "FixRollbackResponse",
            "fields": {
              "fix_id": "str",
              "rollback_id": "str",
              "status": "str",
              "changes_reverted": "List[...]",
              "warnings": "List[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/status/{stream_id}",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "delegate_stream_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/delegate_stream_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/delegate_stream_routes.py",
        "models": [
          {
            "name": "StreamRequest",
            "fields": {
              "stream_type": "StreamType",
              "target_id": "str",
              "description": "str",
              "priority": "StreamPriority",
              "filters": "Optional[...]",
              "max_events": "Optional[...]",
              "timeout_seconds": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "StreamResponse",
            "fields": {
              "stream_id": "str",
              "stream_type": "StreamType",
              "target_id": "str",
              "status": "str",
              "connection_url": "str",
              "token": "str",
              "expires_at": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamError",
            "fields": {
              "message": "str",
              "stream_type": "Optional[...]",
              "target_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamStatusRequest",
            "fields": {
              "stream_id": "str"
            }
          },
          {
            "name": "StreamStatusResponse",
            "fields": {
              "stream_id": "str",
              "stream_type": "StreamType",
              "target_id": "str",
              "status": "str",
              "events_streamed": "int",
              "connected_clients": "int",
              "created_at": "str",
              "expires_at": "str",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamCloseRequest",
            "fields": {
              "stream_id": "str",
              "reason": "Optional[...]"
            }
          },
          {
            "name": "StreamCloseResponse",
            "fields": {
              "stream_id": "str",
              "status": "str",
              "events_streamed": "int",
              "duration_seconds": "int",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "StreamEvent",
            "fields": {
              "event_id": "str",
              "stream_id": "str",
              "event_type": "str",
              "source": "str",
              "data": "Dict[...]",
              "timestamp": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/status",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "train_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/train_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/train_routes.py",
        "models": [
          {
            "name": "TrainRequest",
            "fields": {
              "model_type": "TrainingModel",
              "training_data": "Union[...]",
              "data_format": "TrainingDataFormat",
              "model_name": "str",
              "hyperparameters": "Optional[...]",
              "validation_split": "Optional[...]",
              "max_epochs": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "TrainingMetrics",
            "fields": {
              "accuracy": "Optional[...]",
              "precision": "Optional[...]",
              "recall": "Optional[...]",
              "f1_score": "Optional[...]",
              "loss": "float",
              "val_loss": "Optional[...]",
              "epochs_completed": "int",
              "training_time": "float"
            }
          },
          {
            "name": "TrainResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "model_type": "TrainingModel",
              "status": "str",
              "metrics": "Optional[...]",
              "examples_processed": "int",
              "model_size": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainError",
            "fields": {
              "message": "str",
              "model_type": "Optional[...]",
              "model_name": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainStatusRequest",
            "fields": {
              "model_id": "str"
            }
          },
          {
            "name": "TrainStatusResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "status": "str",
              "progress": "Optional[...]",
              "current_epoch": "Optional[...]",
              "total_epochs": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/rollback",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "fix_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/fix_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/fix_routes.py",
        "models": [
          {
            "name": "FixRequest",
            "fields": {
              "fix_type": "FixType",
              "target_id": "str",
              "description": "str",
              "parameters": "Optional[...]",
              "force": "bool",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "FixResponse",
            "fields": {
              "fix_id": "str",
              "fix_type": "FixType",
              "target_id": "str",
              "status": "str",
              "changes_made": "List[...]",
              "warnings": "List[...]",
              "backup_id": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixError",
            "fields": {
              "message": "str",
              "fix_type": "Optional[...]",
              "target_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixStatusRequest",
            "fields": {
              "fix_id": "str"
            }
          },
          {
            "name": "FixStatusResponse",
            "fields": {
              "fix_id": "str",
              "fix_type": "FixType",
              "target_id": "str",
              "status": "str",
              "progress": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "changes_made": "Optional[...]",
              "warnings": "Optional[...]",
              "error_message": "Optional[...]",
              "backup_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixRollbackRequest",
            "fields": {
              "fix_id": "str",
              "reason": "Optional[...]"
            }
          },
          {
            "name": "FixRollbackResponse",
            "fields": {
              "fix_id": "str",
              "rollback_id": "str",
              "status": "str",
              "changes_reverted": "List[...]",
              "warnings": "List[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/status",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "train_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/train_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/train_routes.py",
        "models": [
          {
            "name": "TrainRequest",
            "fields": {
              "model_type": "TrainingModel",
              "training_data": "Union[...]",
              "data_format": "TrainingDataFormat",
              "model_name": "str",
              "hyperparameters": "Optional[...]",
              "validation_split": "Optional[...]",
              "max_epochs": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "TrainingMetrics",
            "fields": {
              "accuracy": "Optional[...]",
              "precision": "Optional[...]",
              "recall": "Optional[...]",
              "f1_score": "Optional[...]",
              "loss": "float",
              "val_loss": "Optional[...]",
              "epochs_completed": "int",
              "training_time": "float"
            }
          },
          {
            "name": "TrainResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "model_type": "TrainingModel",
              "status": "str",
              "metrics": "Optional[...]",
              "examples_processed": "int",
              "model_size": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainError",
            "fields": {
              "message": "str",
              "model_type": "Optional[...]",
              "model_name": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainStatusRequest",
            "fields": {
              "model_id": "str"
            }
          },
          {
            "name": "TrainStatusResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "status": "str",
              "progress": "Optional[...]",
              "current_epoch": "Optional[...]",
              "total_epochs": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/drift_routes/status",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/rollback",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "fix_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/fix_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/fix_routes.py",
        "models": [
          {
            "name": "FixRequest",
            "fields": {
              "fix_type": "FixType",
              "target_id": "str",
              "description": "str",
              "parameters": "Optional[...]",
              "force": "bool",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "FixResponse",
            "fields": {
              "fix_id": "str",
              "fix_type": "FixType",
              "target_id": "str",
              "status": "str",
              "changes_made": "List[...]",
              "warnings": "List[...]",
              "backup_id": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixError",
            "fields": {
              "message": "str",
              "fix_type": "Optional[...]",
              "target_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixStatusRequest",
            "fields": {
              "fix_id": "str"
            }
          },
          {
            "name": "FixStatusResponse",
            "fields": {
              "fix_id": "str",
              "fix_type": "FixType",
              "target_id": "str",
              "status": "str",
              "progress": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "changes_made": "Optional[...]",
              "warnings": "Optional[...]",
              "error_message": "Optional[...]",
              "backup_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "FixRollbackRequest",
            "fields": {
              "fix_id": "str",
              "reason": "Optional[...]"
            }
          },
          {
            "name": "FixRollbackResponse",
            "fields": {
              "fix_id": "str",
              "rollback_id": "str",
              "status": "str",
              "changes_reverted": "List[...]",
              "warnings": "List[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/override",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "GET",
      "route_path": "/health/config",
      "status_code": 500,
      "status": "500 Internal Server Error",
      "was_fixed": true,
      "schema_match": {
        "schema_name": "health_monitor_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/health_monitor_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/health_monitor_routes.py",
        "models": [
          {
            "name": "HealthMetric",
            "fields": {
              "name": "str",
              "value": "Union[...]",
              "unit": "Optional[...]",
              "threshold_warning": "Optional[...]",
              "threshold_critical": "Optional[...]",
              "status": "HealthStatus",
              "timestamp": "datetime"
            }
          },
          {
            "name": "ComponentHealth",
            "fields": {
              "component_id": "str",
              "component_name": "str",
              "component_type": "ComponentType",
              "status": "HealthStatus",
              "metrics": "List[...]",
              "last_checked": "datetime",
              "issues": "List[...]",
              "recommendations": "List[...]"
            }
          },
          {
            "name": "SystemHealthSummary",
            "fields": {
              "overall_status": "HealthStatus",
              "component_statuses": "Dict[...]",
              "critical_issues_count": "int",
              "warning_issues_count": "int",
              "healthy_components_count": "int",
              "total_components_count": "int",
              "last_updated": "datetime"
            }
          },
          {
            "name": "HealthCheckRequest",
            "fields": {
              "component_id": "Optional[...]",
              "component_type": "Optional[...]",
              "include_metrics": "bool",
              "include_recommendations": "bool"
            }
          },
          {
            "name": "HealthCheckResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "summary": "SystemHealthSummary",
              "components": "List[...]"
            }
          },
          {
            "name": "PredictiveMaintenanceRequest",
            "fields": {
              "component_id": "Optional[...]",
              "component_type": "Optional[...]",
              "time_horizon_hours": "int",
              "confidence_threshold": "float"
            }
          },
          {
            "name": "MaintenancePrediction",
            "fields": {
              "component_id": "str",
              "component_name": "str",
              "component_type": "ComponentType",
              "predicted_issue": "str",
              "confidence": "float",
              "time_to_failure": "Optional[...]",
              "recommended_action": "str",
              "priority": "str",
              "prediction_timestamp": "datetime"
            }
          },
          {
            "name": "PredictiveMaintenanceResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "predictions": "List[...]",
              "total_predictions_count": "int",
              "high_priority_count": "int",
              "medium_priority_count": "int",
              "low_priority_count": "int"
            }
          },
          {
            "name": "SelfHealingRequest",
            "fields": {
              "component_id": "str",
              "issue_description": "str",
              "suggested_actions": "List[...]",
              "auto_approve": "bool",
              "max_impact_level": "str"
            }
          },
          {
            "name": "HealingActionResult",
            "fields": {
              "action": "SelfHealingAction",
              "success": "bool",
              "timestamp": "datetime",
              "details": "str",
              "impact_level": "str",
              "duration_ms": "int"
            }
          },
          {
            "name": "SelfHealingResponse",
            "fields": {
              "request_id": "str",
              "component_id": "str",
              "timestamp": "datetime",
              "issue_resolved": "bool",
              "actions_performed": "List[...]",
              "current_status": "HealthStatus",
              "recommendations": "List[...]"
            }
          },
          {
            "name": "HealthMonitorConfigRequest",
            "fields": {
              "check_interval_seconds": "Optional[...]",
              "enable_predictive_maintenance": "Optional[...]",
              "enable_self_healing": "Optional[...]",
              "alert_thresholds": "Optional[...]",
              "excluded_components": "Optional[...]"
            }
          },
          {
            "name": "HealthMonitorConfigResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "current_config": "Dict",
              "changes_applied": "Dict",
              "restart_required": "bool"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/api/loop/trace",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/api/loop/complete",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/api/loop/persona-reflect",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/api/loop/plan",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/api/historian/log",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/api/loop/respond",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "DELETE",
      "route_path": "/loop/snapshot/{loop_id}",
      "status_code": 500,
      "status": "500 Internal Server Error",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/api/loop/trace",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/api/loop/reset",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/embed/batch",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "memory_embed_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/memory_embed_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/memory_embed_routes.py",
        "models": [
          {
            "name": "MemoryEmbedRequest",
            "fields": {
              "content": "Union[...]",
              "model": "EmbeddingModel",
              "dimension": "Optional[...]",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "MemoryEmbedResponse",
            "fields": {
              "memory_id": "str",
              "embedding_size": "int",
              "model_used": "EmbeddingModel",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryEmbedError",
            "fields": {
              "message": "str",
              "model": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryEmbedBatchRequest",
            "fields": {
              "items": "List[...]"
            }
          },
          {
            "name": "MemoryEmbedBatchResponse",
            "fields": {
              "results": "List[...]",
              "errors": "List[...]",
              "total_items": "int",
              "successful_items": "int",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/critic/review",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/validate",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "loop_validation_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/loop_validation_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/loop_validation_routes.py",
        "models": [
          {
            "name": "LoopValidationRequest",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "planned_agents": "List[...]",
              "expected_schema": "Dict[...]",
              "max_loops": "int",
              "context": "Optional[...]"
            }
          },
          {
            "name": "ValidationIssue",
            "fields": {
              "issue_type": "str",
              "severity": "str",
              "description": "str",
              "affected_component": "str"
            }
          },
          {
            "name": "ValidationRecommendation",
            "fields": {
              "recommendation_type": "str",
              "description": "str",
              "priority": "int"
            }
          },
          {
            "name": "LoopValidationResult",
            "fields": {
              "valid": "bool",
              "project_id": "str",
              "loop_id": "str",
              "issues": "List[...]",
              "recommendations": "List[...]",
              "validation_score": "float",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "LoopValidationError",
            "fields": {
              "status": "str",
              "message": "str",
              "project_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/api/memory/write",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "GET",
      "route_path": "/api/memory/read",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/generate-component",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "GET",
      "route_path": "/api/memory/ping",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/recall",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "memory_recall_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/memory_recall_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/memory_recall_routes.py",
        "models": [
          {
            "name": "MemoryRecallRequest",
            "fields": {
              "method": "RecallMethod",
              "query": "str",
              "limit": "int",
              "offset": "int",
              "sort_order": "RecallSortOrder",
              "start_date": "Optional[...]",
              "end_date": "Optional[...]",
              "agent_filter": "Optional[...]",
              "loop_filter": "Optional[...]"
            }
          },
          {
            "name": "MemoryEntry",
            "fields": {
              "memory_id": "str",
              "content": "Dict[...]",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str"
            }
          },
          {
            "name": "MemoryRecallResponse",
            "fields": {
              "query": "str",
              "method": "RecallMethod",
              "total_results": "int",
              "returned_results": "int",
              "results": "List[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryRecallError",
            "fields": {
              "message": "str",
              "query": "Optional[...]",
              "method": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/health",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "GET",
      "route_path": "/recall",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "memory_recall_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/memory_recall_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/memory_recall_routes.py",
        "models": [
          {
            "name": "MemoryRecallRequest",
            "fields": {
              "method": "RecallMethod",
              "query": "str",
              "limit": "int",
              "offset": "int",
              "sort_order": "RecallSortOrder",
              "start_date": "Optional[...]",
              "end_date": "Optional[...]",
              "agent_filter": "Optional[...]",
              "loop_filter": "Optional[...]"
            }
          },
          {
            "name": "MemoryEntry",
            "fields": {
              "memory_id": "str",
              "content": "Dict[...]",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str"
            }
          },
          {
            "name": "MemoryRecallResponse",
            "fields": {
              "query": "str",
              "method": "RecallMethod",
              "total_results": "int",
              "returned_results": "int",
              "results": "List[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryRecallError",
            "fields": {
              "message": "str",
              "query": "Optional[...]",
              "method": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/embed",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "memory_embed_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/memory_embed_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/memory_embed_routes.py",
        "models": [
          {
            "name": "MemoryEmbedRequest",
            "fields": {
              "content": "Union[...]",
              "model": "EmbeddingModel",
              "dimension": "Optional[...]",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "MemoryEmbedResponse",
            "fields": {
              "memory_id": "str",
              "embedding_size": "int",
              "model_used": "EmbeddingModel",
              "tags": "List[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryEmbedError",
            "fields": {
              "message": "str",
              "model": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "MemoryEmbedBatchRequest",
            "fields": {
              "items": "List[...]"
            }
          },
          {
            "name": "MemoryEmbedBatchResponse",
            "fields": {
              "results": "List[...]",
              "errors": "List[...]",
              "total_items": "int",
              "successful_items": "int",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/observe",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "GET",
      "route_path": "/api/orchestrator/status",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "orchestrator_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/orchestrator_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/orchestrator_router.py",
        "models": [
          {
            "name": "OrchestratorConsultRequest",
            "fields": {
              "project_id": "str",
              "query": "str",
              "context": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "OrchestratorInterpretRequest",
            "fields": {
              "project_id": "str",
              "content": "str",
              "content_type": "str",
              "context": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "OrchestratorPlanRequest",
            "fields": {
              "project_id": "str",
              "task": "str",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "TriggerResult",
            "fields": {
              "triggered_agent": "str",
              "timestamp": "str",
              "loop_count": "int",
              "reason": "str",
              "status": "str"
            }
          },
          {
            "name": "OrchestratorDecision",
            "fields": {
              "timestamp": "str",
              "loop_count": "int",
              "last_agent": "Optional[...]",
              "next_agent": "str",
              "reason": "str"
            }
          },
          {
            "name": "PlanStep",
            "fields": {
              "agent": "str",
              "purpose": "str"
            }
          },
          {
            "name": "OrchestratorPlan",
            "fields": {
              "project_id": "str",
              "timestamp": "str",
              "steps": "List[...]",
              "estimated_loops": "int",
              "current_loop": "int"
            }
          },
          {
            "name": "DelegationResult",
            "fields": {
              "project_id": "str",
              "timestamp": "str",
              "agent": "str",
              "task": "str",
              "status": "str"
            }
          },
          {
            "name": "ResolutionResult",
            "fields": {
              "project_id": "str",
              "timestamp": "str",
              "conflicts_found": "int",
              "conflicts_resolved": "int",
              "status": "str"
            }
          },
          {
            "name": "OrchestratorPlanResult",
            "fields": {
              "status": "str",
              "task": "str",
              "tools": "List[...]",
              "project_id": "str",
              "intent": "str",
              "action": "str",
              "timestamp": "str",
              "output": "str",
              "loop_id": "Optional[...]",
              "next_agent": "Optional[...]",
              "trigger_result": "Optional[...]",
              "reason": "Optional[...]",
              "completed_agent": "Optional[...]",
              "all_loops_complete": "Optional[...]",
              "decisions": "Optional[...]",
              "decision": "Optional[...]",
              "plan": "Optional[...]",
              "delegated_agent": "Optional[...]",
              "delegated_task": "Optional[...]",
              "delegation_result": "Optional[...]",
              "resolution": "Optional[...]",
              "error": "Optional[...]"
            }
          },
          {
            "name": "OrchestratorErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "task": "Optional[...]",
              "tools": "Optional[...]",
              "project_id": "Optional[...]",
              "intent": "Optional[...]",
              "action": "Optional[...]",
              "timestamp": "Optional[...]",
              "output": "Optional[...]",
              "error": "Optional[...]"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/health",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/build-ui",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/journal",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/logs",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "output_policy_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/output_policy_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/output_policy_routes.py",
        "models": [
          {
            "name": "OutputPolicyRequest",
            "fields": {
              "agent_id": "str",
              "output_type": "str",
              "content": "str",
              "context": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "OutputPolicyResult",
            "fields": {
              "approved": "bool",
              "content": "str",
              "violation_type": "Optional[...]",
              "reason": "Optional[...]",
              "action": "str",
              "risk_tags": "Optional[...]",
              "risk_details": "Optional[...]",
              "checked_at": "str"
            }
          },
          {
            "name": "PolicyLogEntry",
            "fields": {
              "agent_id": "str",
              "output_type": "str",
              "action": "str",
              "risk_tags": "List[...]",
              "timestamp": "str",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "PolicyLogRequest",
            "fields": {
              "agent_id": "Optional[...]",
              "output_type": "Optional[...]",
              "action": "Optional[...]",
              "limit": "int"
            }
          },
          {
            "name": "PolicyLogResponse",
            "fields": {
              "logs": "List[...]",
              "total": "int"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/health",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/check",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/enforce",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "output_policy_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/output_policy_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/output_policy_routes.py",
        "models": [
          {
            "name": "OutputPolicyRequest",
            "fields": {
              "agent_id": "str",
              "output_type": "str",
              "content": "str",
              "context": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "OutputPolicyResult",
            "fields": {
              "approved": "bool",
              "content": "str",
              "violation_type": "Optional[...]",
              "reason": "Optional[...]",
              "action": "str",
              "risk_tags": "Optional[...]",
              "risk_details": "Optional[...]",
              "checked_at": "str"
            }
          },
          {
            "name": "PolicyLogEntry",
            "fields": {
              "agent_id": "str",
              "output_type": "str",
              "action": "str",
              "risk_tags": "List[...]",
              "timestamp": "str",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "PolicyLogRequest",
            "fields": {
              "agent_id": "Optional[...]",
              "output_type": "Optional[...]",
              "action": "Optional[...]",
              "limit": "int"
            }
          },
          {
            "name": "PolicyLogResponse",
            "fields": {
              "logs": "List[...]",
              "total": "int"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/run",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/review",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/reinforce",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "GET",
      "route_path": "/generate",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "plan_generate_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/plan_generate_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/plan_generate_routes.py",
        "models": [
          {
            "name": "PlanGenerateRequest",
            "fields": {
              "goal": "str",
              "plan_type": "PlanType",
              "format": "PlanFormat",
              "context": "Optional[...]",
              "constraints": "Optional[...]",
              "max_steps": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "PlanStep",
            "fields": {
              "step_number": "int",
              "description": "str",
              "estimated_time": "Optional[...]",
              "dependencies": "Optional[...]"
            }
          },
          {
            "name": "PlanGenerateResponse",
            "fields": {
              "plan_id": "str",
              "goal": "str",
              "plan_type": "PlanType",
              "format": "PlanFormat",
              "steps": "Optional[...]",
              "content": "Optional[...]",
              "total_steps": "int",
              "estimated_completion_time": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "PlanGenerateError",
            "fields": {
              "message": "str",
              "goal": "Optional[...]",
              "plan_type": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/reflect",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/reflect",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/revise",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/generate",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "plan_generate_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/plan_generate_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/plan_generate_routes.py",
        "models": [
          {
            "name": "PlanGenerateRequest",
            "fields": {
              "goal": "str",
              "plan_type": "PlanType",
              "format": "PlanFormat",
              "context": "Optional[...]",
              "constraints": "Optional[...]",
              "max_steps": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "PlanStep",
            "fields": {
              "step_number": "int",
              "description": "str",
              "estimated_time": "Optional[...]",
              "dependencies": "Optional[...]"
            }
          },
          {
            "name": "PlanGenerateResponse",
            "fields": {
              "plan_id": "str",
              "goal": "str",
              "plan_type": "PlanType",
              "format": "PlanFormat",
              "steps": "Optional[...]",
              "content": "Optional[...]",
              "total_steps": "int",
              "estimated_completion_time": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "PlanGenerateError",
            "fields": {
              "message": "str",
              "goal": "Optional[...]",
              "plan_type": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/revise",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/revise",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/reinforce",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/reflect",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/reinforce",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/challenge",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/challenge",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/reinforce",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/revise",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/evaluate",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "pessimist_evaluation_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/pessimist_evaluation_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/pessimist_evaluation_routes.py",
        "models": [
          {
            "name": "AgentMapping",
            "fields": {
              "agent_id": "str",
              "role": "str",
              "priority": "Optional[...]",
              "dependencies": "Optional[...]"
            }
          },
          {
            "name": "LoopComponent",
            "fields": {
              "component_id": "str",
              "component_type": "str",
              "description": "str",
              "risk_level": "Optional[...]"
            }
          },
          {
            "name": "PessimistCheckRequest",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "loop_plan": "Dict[...]",
              "component_list": "List[...]",
              "agent_map": "List[...]",
              "context": "Optional[...]"
            }
          },
          {
            "name": "Risk",
            "fields": {
              "risk_id": "str",
              "risk_type": "str",
              "severity": "str",
              "description": "str",
              "affected_elements": "List[...]",
              "mitigation_suggestions": "Optional[...]"
            }
          },
          {
            "name": "RecommendedChange",
            "fields": {
              "change_id": "str",
              "change_type": "str",
              "priority": "int",
              "description": "str",
              "affected_elements": "List[...]",
              "expected_impact": "Optional[...]"
            }
          },
          {
            "name": "PessimistCheckResult",
            "fields": {
              "project_id": "str",
              "loop_id": "str",
              "confidence_score": "float",
              "approved": "bool",
              "risks": "List[...]",
              "recommended_changes": "List[...]",
              "evaluation_summary": "str",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "PessimistCheckError",
            "fields": {
              "status": "str",
              "message": "str",
              "project_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/challenge",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "GET",
      "route_path": "/health",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": true,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/analyze",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "ash_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/ash_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/ash_routes.py",
        "models": [
          {
            "name": "AshAnalysisRequest",
            "fields": {
              "scenario_id": "str",
              "context": "Dict[...]",
              "constraints": "Optional[...]",
              "risk_tolerance": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "RiskFactor",
            "fields": {
              "factor_id": "str",
              "name": "str",
              "probability": "float",
              "impact": "float",
              "description": "str",
              "mitigation_strategies": "Optional[...]"
            }
          },
          {
            "name": "AshAnalysisResult",
            "fields": {
              "status": "str",
              "scenario_id": "str",
              "risk_assessment": "Optional[...]",
              "risk_factors": "Optional[...]",
              "anomalies_detected": "Optional[...]",
              "recommended_actions": "Optional[...]",
              "overall_risk_score": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "AshTestRequest",
            "fields": {
              "scenario_id": "str",
              "test_parameters": "Dict[...]",
              "expected_outcomes": "Optional[...]",
              "tools": "Optional[...]"
            }
          },
          {
            "name": "TestResult",
            "fields": {
              "test_id": "str",
              "name": "str",
              "status": "str",
              "description": "str",
              "actual_outcome": "str",
              "expected_outcome": "Optional[...]"
            }
          },
          {
            "name": "AshTestResult",
            "fields": {
              "status": "str",
              "scenario_id": "str",
              "test_summary": "Optional[...]",
              "test_results": "Optional[...]",
              "anomalies_detected": "Optional[...]",
              "recommendations": "Optional[...]",
              "timestamp": "str",
              "message": "Optional[...]"
            }
          },
          {
            "name": "AshErrorResult",
            "fields": {
              "status": "str",
              "message": "str",
              "scenario_id": "Optional[...]",
              "timestamp": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/challenge",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "GET",
      "route_path": "/status/{model_id}",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "train_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/train_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/train_routes.py",
        "models": [
          {
            "name": "TrainRequest",
            "fields": {
              "model_type": "TrainingModel",
              "training_data": "Union[...]",
              "data_format": "TrainingDataFormat",
              "model_name": "str",
              "hyperparameters": "Optional[...]",
              "validation_split": "Optional[...]",
              "max_epochs": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "TrainingMetrics",
            "fields": {
              "accuracy": "Optional[...]",
              "precision": "Optional[...]",
              "recall": "Optional[...]",
              "f1_score": "Optional[...]",
              "loss": "float",
              "val_loss": "Optional[...]",
              "epochs_completed": "int",
              "training_time": "float"
            }
          },
          {
            "name": "TrainResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "model_type": "TrainingModel",
              "status": "str",
              "metrics": "Optional[...]",
              "examples_processed": "int",
              "model_size": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainError",
            "fields": {
              "message": "str",
              "model_type": "Optional[...]",
              "model_name": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainStatusRequest",
            "fields": {
              "model_id": "str"
            }
          },
          {
            "name": "TrainStatusResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "status": "str",
              "progress": "Optional[...]",
              "current_epoch": "Optional[...]",
              "total_epochs": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "POST",
      "route_path": "/plan",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/reflect",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": null
    },
    {
      "method": "POST",
      "route_path": "/status",
      "status_code": 404,
      "status": "404 Not Found",
      "was_fixed": false,
      "schema_match": {
        "schema_name": "train_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/train_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/train_routes.py",
        "models": [
          {
            "name": "TrainRequest",
            "fields": {
              "model_type": "TrainingModel",
              "training_data": "Union[...]",
              "data_format": "TrainingDataFormat",
              "model_name": "str",
              "hyperparameters": "Optional[...]",
              "validation_split": "Optional[...]",
              "max_epochs": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]"
            }
          },
          {
            "name": "TrainingMetrics",
            "fields": {
              "accuracy": "Optional[...]",
              "precision": "Optional[...]",
              "recall": "Optional[...]",
              "f1_score": "Optional[...]",
              "loss": "float",
              "val_loss": "Optional[...]",
              "epochs_completed": "int",
              "training_time": "float"
            }
          },
          {
            "name": "TrainResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "model_type": "TrainingModel",
              "status": "str",
              "metrics": "Optional[...]",
              "examples_processed": "int",
              "model_size": "Optional[...]",
              "agent_id": "Optional[...]",
              "loop_id": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainError",
            "fields": {
              "message": "str",
              "model_type": "Optional[...]",
              "model_name": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          },
          {
            "name": "TrainStatusRequest",
            "fields": {
              "model_id": "str"
            }
          },
          {
            "name": "TrainStatusResponse",
            "fields": {
              "model_id": "str",
              "model_name": "str",
              "status": "str",
              "progress": "Optional[...]",
              "current_epoch": "Optional[...]",
              "total_epochs": "Optional[...]",
              "estimated_completion": "Optional[...]",
              "error_message": "Optional[...]",
              "timestamp": "str",
              "version": "str"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/health/check/{component_id}",
      "status_code": 500,
      "status": "500 Internal Server Error",
      "was_fixed": true,
      "schema_match": {
        "schema_name": "health_monitor_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/health_monitor_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/health_monitor_routes.py",
        "models": [
          {
            "name": "HealthMetric",
            "fields": {
              "name": "str",
              "value": "Union[...]",
              "unit": "Optional[...]",
              "threshold_warning": "Optional[...]",
              "threshold_critical": "Optional[...]",
              "status": "HealthStatus",
              "timestamp": "datetime"
            }
          },
          {
            "name": "ComponentHealth",
            "fields": {
              "component_id": "str",
              "component_name": "str",
              "component_type": "ComponentType",
              "status": "HealthStatus",
              "metrics": "List[...]",
              "last_checked": "datetime",
              "issues": "List[...]",
              "recommendations": "List[...]"
            }
          },
          {
            "name": "SystemHealthSummary",
            "fields": {
              "overall_status": "HealthStatus",
              "component_statuses": "Dict[...]",
              "critical_issues_count": "int",
              "warning_issues_count": "int",
              "healthy_components_count": "int",
              "total_components_count": "int",
              "last_updated": "datetime"
            }
          },
          {
            "name": "HealthCheckRequest",
            "fields": {
              "component_id": "Optional[...]",
              "component_type": "Optional[...]",
              "include_metrics": "bool",
              "include_recommendations": "bool"
            }
          },
          {
            "name": "HealthCheckResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "summary": "SystemHealthSummary",
              "components": "List[...]"
            }
          },
          {
            "name": "PredictiveMaintenanceRequest",
            "fields": {
              "component_id": "Optional[...]",
              "component_type": "Optional[...]",
              "time_horizon_hours": "int",
              "confidence_threshold": "float"
            }
          },
          {
            "name": "MaintenancePrediction",
            "fields": {
              "component_id": "str",
              "component_name": "str",
              "component_type": "ComponentType",
              "predicted_issue": "str",
              "confidence": "float",
              "time_to_failure": "Optional[...]",
              "recommended_action": "str",
              "priority": "str",
              "prediction_timestamp": "datetime"
            }
          },
          {
            "name": "PredictiveMaintenanceResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "predictions": "List[...]",
              "total_predictions_count": "int",
              "high_priority_count": "int",
              "medium_priority_count": "int",
              "low_priority_count": "int"
            }
          },
          {
            "name": "SelfHealingRequest",
            "fields": {
              "component_id": "str",
              "issue_description": "str",
              "suggested_actions": "List[...]",
              "auto_approve": "bool",
              "max_impact_level": "str"
            }
          },
          {
            "name": "HealingActionResult",
            "fields": {
              "action": "SelfHealingAction",
              "success": "bool",
              "timestamp": "datetime",
              "details": "str",
              "impact_level": "str",
              "duration_ms": "int"
            }
          },
          {
            "name": "SelfHealingResponse",
            "fields": {
              "request_id": "str",
              "component_id": "str",
              "timestamp": "datetime",
              "issue_resolved": "bool",
              "actions_performed": "List[...]",
              "current_status": "HealthStatus",
              "recommendations": "List[...]"
            }
          },
          {
            "name": "HealthMonitorConfigRequest",
            "fields": {
              "check_interval_seconds": "Optional[...]",
              "enable_predictive_maintenance": "Optional[...]",
              "enable_self_healing": "Optional[...]",
              "alert_thresholds": "Optional[...]",
              "excluded_components": "Optional[...]"
            }
          },
          {
            "name": "HealthMonitorConfigResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "current_config": "Dict",
              "changes_applied": "Dict",
              "restart_required": "bool"
            }
          }
        ]
      }
    },
    {
      "method": "GET",
      "route_path": "/health/maintenance/predict/{component_id}",
      "status_code": 500,
      "status": "500 Internal Server Error",
      "was_fixed": true,
      "schema_match": {
        "schema_name": "health_monitor_schema",
        "schema_file": "/home/ubuntu/personal-ai-agent/app/schemas/health_monitor_schema.py",
        "route_file": "/home/ubuntu/personal-ai-agent/app/routes/health_monitor_routes.py",
        "models": [
          {
            "name": "HealthMetric",
            "fields": {
              "name": "str",
              "value": "Union[...]",
              "unit": "Optional[...]",
              "threshold_warning": "Optional[...]",
              "threshold_critical": "Optional[...]",
              "status": "HealthStatus",
              "timestamp": "datetime"
            }
          },
          {
            "name": "ComponentHealth",
            "fields": {
              "component_id": "str",
              "component_name": "str",
              "component_type": "ComponentType",
              "status": "HealthStatus",
              "metrics": "List[...]",
              "last_checked": "datetime",
              "issues": "List[...]",
              "recommendations": "List[...]"
            }
          },
          {
            "name": "SystemHealthSummary",
            "fields": {
              "overall_status": "HealthStatus",
              "component_statuses": "Dict[...]",
              "critical_issues_count": "int",
              "warning_issues_count": "int",
              "healthy_components_count": "int",
              "total_components_count": "int",
              "last_updated": "datetime"
            }
          },
          {
            "name": "HealthCheckRequest",
            "fields": {
              "component_id": "Optional[...]",
              "component_type": "Optional[...]",
              "include_metrics": "bool",
              "include_recommendations": "bool"
            }
          },
          {
            "name": "HealthCheckResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "summary": "SystemHealthSummary",
              "components": "List[...]"
            }
          },
          {
            "name": "PredictiveMaintenanceRequest",
            "fields": {
              "component_id": "Optional[...]",
              "component_type": "Optional[...]",
              "time_horizon_hours": "int",
              "confidence_threshold": "float"
            }
          },
          {
            "name": "MaintenancePrediction",
            "fields": {
              "component_id": "str",
              "component_name": "str",
              "component_type": "ComponentType",
              "predicted_issue": "str",
              "confidence": "float",
              "time_to_failure": "Optional[...]",
              "recommended_action": "str",
              "priority": "str",
              "prediction_timestamp": "datetime"
            }
          },
          {
            "name": "PredictiveMaintenanceResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "predictions": "List[...]",
              "total_predictions_count": "int",
              "high_priority_count": "int",
              "medium_priority_count": "int",
              "low_priority_count": "int"
            }
          },
          {
            "name": "SelfHealingRequest",
            "fields": {
              "component_id": "str",
              "issue_description": "str",
              "suggested_actions": "List[...]",
              "auto_approve": "bool",
              "max_impact_level": "str"
            }
          },
          {
            "name": "HealingActionResult",
            "fields": {
              "action": "SelfHealingAction",
              "success": "bool",
              "timestamp": "datetime",
              "details": "str",
              "impact_level": "str",
              "duration_ms": "int"
            }
          },
          {
            "name": "SelfHealingResponse",
            "fields": {
              "request_id": "str",
              "component_id": "str",
              "timestamp": "datetime",
              "issue_resolved": "bool",
              "actions_performed": "List[...]",
              "current_status": "HealthStatus",
              "recommendations": "List[...]"
            }
          },
          {
            "name": "HealthMonitorConfigRequest",
            "fields": {
              "check_interval_seconds": "Optional[...]",
              "enable_predictive_maintenance": "Optional[...]",
              "enable_self_healing": "Optional[...]",
              "alert_thresholds": "Optional[...]",
              "excluded_components": "Optional[...]"
            }
          },
          {
            "name": "HealthMonitorConfigResponse",
            "fields": {
              "request_id": "str",
              "timestamp": "datetime",
              "current_config": "Dict",
              "changes_applied": "Dict",
              "restart_required": "bool"
            }
          }
        ]
      }
    }
  ]
}