import React from 'react';
import { render, screen, waitFor, act } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import SystemStatusPanel from './promethiosfrontend/src/SystemStatusPanel';
import SystemSummaryPanel from './promethiosfrontend/src/SystemSummaryPanel';

// Mock fetch
global.fetch = jest.fn();

describe('SystemStatusPanel', () => {
  beforeEach(() => {
    fetch.mockClear();
  });

  it('renders loading state initially', () => {
    fetch.mockImplementationOnce(() => 
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({})
      })
    );

    render(<SystemStatusPanel projectId="test-project" />);
    expect(screen.getByText('Loading status...')).toBeInTheDocument();
  });

  it('renders status information when data is loaded', async () => {
    const mockStatus = {
      status: 'in_progress',
      agents_involved: ['hal', 'nova'],
      latest_agent_action: { action: 'Analyzing requirements' },
      next_step: 'Generate documentation',
      files_created: ['README.md', 'index.js']
    };

    fetch.mockImplementationOnce(() => 
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(mockStatus)
      })
    );

    render(<SystemStatusPanel projectId="test-project" />);
    
    await waitFor(() => {
      expect(screen.getByText('In Progress')).toBeInTheDocument();
      expect(screen.getByText('hal, nova')).toBeInTheDocument();
      expect(screen.getByText('Analyzing requirements')).toBeInTheDocument();
      expect(screen.getByText('Generate documentation')).toBeInTheDocument();
      expect(screen.getByText('2 files')).toBeInTheDocument();
    });
  });

  it('renders error state when fetch fails', async () => {
    fetch.mockImplementationOnce(() => 
      Promise.resolve({
        ok: false,
        status: 500
      })
    );

    render(<SystemStatusPanel projectId="test-project" />);
    
    await waitFor(() => {
      expect(screen.getByText('Failed to load system status')).toBeInTheDocument();
    });
  });
});

describe('SystemSummaryPanel', () => {
  beforeEach(() => {
    fetch.mockClear();
  });

  it('renders loading state initially', () => {
    fetch.mockImplementationOnce(() => 
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({})
      })
    );

    render(<SystemSummaryPanel projectId="test-project" />);
    expect(screen.getByText('Generating summary...')).toBeInTheDocument();
  });

  it('renders summary when data is loaded', async () => {
    const mockSummary = {
      summary: 'This project is a web application with user authentication and dashboard features.'
    };

    fetch.mockImplementationOnce(() => 
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(mockSummary)
      })
    );

    render(<SystemSummaryPanel projectId="test-project" />);
    
    await waitFor(() => {
      expect(screen.getByText('This project is a web application with user authentication and dashboard features.')).toBeInTheDocument();
      expect(screen.getByText(/Generated by SAGE/)).toBeInTheDocument();
    });
  });

  it('handles refresh button click', async () => {
    const mockSummary = {
      summary: 'Initial summary'
    };

    const updatedSummary = {
      summary: 'Updated summary'
    };

    // Mock initial fetch
    fetch.mockImplementationOnce(() => 
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(mockSummary)
      })
    );

    // Mock POST request for refresh
    fetch.mockImplementationOnce(() => 
      Promise.resolve({
        ok: true
      })
    );

    // Mock GET request after refresh
    fetch.mockImplementationOnce(() => 
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve(updatedSummary)
      })
    );

    render(<SystemSummaryPanel projectId="test-project" />);
    
    await waitFor(() => {
      expect(screen.getByText('Initial summary')).toBeInTheDocument();
    });

    const refreshButton = screen.getByText('Refresh Summary');
    userEvent.click(refreshButton);

    // Use fake timers to handle setTimeout
    jest.useFakeTimers();
    act(() => {
      jest.advanceTimersByTime(2000);
    });
    jest.useRealTimers();

    await waitFor(() => {
      expect(screen.getByText('Updated summary')).toBeInTheDocument();
    });
  });
});
