{
  "metadata": {
    "scm_version": "0.1.1",
    "generated_at": "2025-04-28T20:30:18.995861",
    "description": "System Component Map updated after Batch 2 Cognitive Expansion v1.0, including ArchitectOrchestrator, Forge/HAL cognitive upgrades, toolkit registry fixes, and Orchestrator variant stubs.",
    "last_updated": "2025-04-29T03:09:50.000000",
    "last_update_tag": "batch2_cognitive_v1.0",
    "last_update_timestamp": "2025-04-29T03:09:50.000000",
    "snapshot_info": {
      "batch_number": 2,
      "snapshot_type": "start",
      "created_at": "2025-04-29T00:53:58.644292",
      "description": "Initial state of SCM before Healing Batch 2"
    }
  },
  "components": [
    {
      "id": "app/agents/ash_agent.py",
      "type": "agent",
      "name": "ash_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "AshAgent"
        ],
        "functions": [
          "__init__",
          "execute",
          "analyze_scenario",
          "test_scenario",
          "process_analysis",
          "process_test"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "ash"
      }
    },
    {
      "id": "app/agents/ceo_agent.py",
      "type": "agent",
      "name": "ceo_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "CEOAgent"
        ],
        "functions": [
          "__init__",
          "execute",
          "process_review"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "ceo-agent"
      }
    },
    {
      "id": "app/agents/critic.py",
      "type": "agent",
      "name": "critic",
      "version": "unknown",
      "status": "active",
      "metadata": {
        "description": "Quality evaluation and standards enforcement specialist.",
        "classes": [
          "CriticAgent"
        ],
        "functions": [
          "__init__",
          "validate_input"
        ],
        "memory_ops": true,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "critic"
      }
    },
    {
      "id": "app/agents/cto_agent.py",
      "type": "agent",
      "name": "cto_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "CTOAgent"
        ],
        "functions": [
          "__init__",
          "run_agent",
          "run_cto_agent"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "cto"
      }
    },
    {
      "id": "app/agents/debug_analyzer_agent.py",
      "type": "agent",
      "name": "debug_analyzer_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "LoopIssue",
          "RepairSuggestion",
          "DebugAnalyzerAgent"
        ],
        "functions": [
          "read_project_state",
          "__init__",
          "dict",
          "__init__",
          "dict",
          "__init__",
          "validate_input",
          "_generate_repair_suggestions",
          "_calculate_confidence_score"
        ],
        "memory_ops": true,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "debugger"
      }
    },
    {
      "id": "app/agents/forge_agent.py",
      "type": "agent",
      "name": "forge-agent",
      "version": "1.1.0-cognitive-v1.0",
      "status": "active",
      "metadata": {
        "description": "Deep system builder agent responsible for creating components based on architectural plans.",
        "classes": [
          "ForgeAgent",
          "ForgeBuildRequest",
          "ComponentBuildResult",
          "ForgeBuildResult"
        ],
        "functions": [
          "__init__",
          "build_from_plan",
          "execute"
        ],
        "memory_ops": true,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "forge-agent",
        "tools": [
          "scaffold",
          "wire",
          "register",
          "test",
          "validate",
          "patch",
          "version_track"
        ],
        "cognitive_capabilities": [
          "build_from_plan",
          "scm_integration",
          "toolkit_access",
          "file_tree_completion"
        ]
      }
    },
    {
      "id": "app/agents/guardian_agent.py",
      "type": "agent",
      "name": "guardian_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "GuardianAgent"
        ],
        "functions": [
          "__init__",
          "execute",
          "_halt_system",
          "_notify_operator",
          "_rollback_loop",
          "_log_alert",
          "rollback_loop",
          "process_alert",
          "process_rollback"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "guardian"
      }
    },
    {
      "id": "app/agents/hal_agent.py",
      "type": "agent",
      "name": "hal-agent",
      "version": "1.1.0-cognitive-v1.0",
      "status": "active",
      "metadata": {
        "description": "Generates Minimum Viable Product (MVP) code for simple tasks, performs safety checks, and defers complex builds to Forge.",
        "classes": [
          "HALAgent",
          "HALResult"
        ],
        "functions": [
          "__init__",
          "generate_mvp_files",
          "execute",
          "_perform_safety_checks"
        ],
        "memory_ops": true,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "hal-agent",
        "tools": [
          "generate_mvp",
          "monitor",
          "validate",
          "defer"
        ],
        "cognitive_capabilities": [
          "generate_mvp_files",
          "defer_complex_tasks",
          "file_tree_completion",
          "safety_monitoring"
        ]
      }
    },
    {
      "id": "app/agents/lifetree_agent.py",
      "type": "agent",
      "name": "lifetree_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "LifeTreeAgent"
        ],
        "functions": [
          "__init__",
          "validate_input",
          "_extract_memory_structures",
          "_extract_emotional_tags",
          "_calculate_preservation_score",
          "handle_lifetree_task_sync",
          "handle_lifetree_task"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": null
      }
    },
    {
      "id": "app/agents/memory_agent.py",
      "type": "agent",
      "name": "memory_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "MemoryAgent"
        ],
        "functions": [
          "__init__",
          "execute",
          "_get_recent_logs",
          "_get_recent_logs_structured",
          "_get_all_logs",
          "_get_all_logs_structured",
          "_query_logs",
          "_search_logs",
          "_store_memory",
          "add_memory_entry",
          "run_memory_agent"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "memory-agent"
      }
    },
    {
      "id": "app/agents/neureal_agent.py",
      "type": "agent",
      "name": "neureal_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "NeurealAgent"
        ],
        "functions": [
          "__init__",
          "validate_input",
          "_extract_emotional_vectors",
          "_extract_sensory_layers",
          "_calculate_immersion_score",
          "handle_neureal_task_sync"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": null
      }
    },
    {
      "id": "app/agents/nova.py",
      "type": "agent",
      "name": "nova",
      "version": "unknown",
      "status": "active",
      "metadata": {
        "description": "UI component builder for React/HTML interfaces.",
        "classes": [
          "NovaAgent"
        ],
        "functions": [
          "write_memory",
          "read_project_state",
          "update_project_state",
          "increment_loop_count",
          "log_event",
          "__init__",
          "validate_input",
          "_generate_ui_components"
        ],
        "memory_ops": true,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "nova"
      }
    },
    {
      "id": "app/agents/observer_agent.py",
      "type": "agent",
      "name": "observer_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "ObservationEntry",
          "ObserverAgent"
        ],
        "functions": [
          "__init__",
          "to_dict",
          "__init__",
          "validate_input",
          "handle_observer_task"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "observer"
      }
    },
    {
      "id": "app/agents/ops_agent.py",
      "type": "agent",
      "name": "ops_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [],
        "functions": [
          "handle_ops_task"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "ops-agent"
      }
    },
    {
      "id": "app/agents/orchestrator_agent.py",
      "type": "agent",
      "name": "architect-orchestrator",
      "version": "1.1.0-cognitive-v1.0",
      "status": "active",
      "metadata": {
        "description": "Plans projects, architects file structures, and delegates build tasks to Forge/HAL.",
        "classes": [
          "OrchestratorAgent"
        ],
        "functions": [
          "__init__",
          "plan_project",
          "delegate_task",
          "architect_file_tree",
          "trigger_build",
          "reflect_on_result",
          "execute"
        ],
        "memory_ops": true,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "architect-orchestrator",
        "tools": [
          "plan_project",
          "delegate_task",
          "architect_file_tree",
          "trigger_build",
          "reflect_on_result"
        ],
        "cognitive_capabilities": [
          "project_planning",
          "task_delegation",
          "file_tree_architecting",
          "build_triggering",
          "result_reflection"
        ]
      }
    },
    {
      "id": "app/agents/pessimist_agent.py",
      "type": "agent",
      "name": "pessimist_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "PessimistAgent"
        ],
        "functions": [
          "__init__",
          "evaluate_summary_tone",
          "detect_optimism_bias",
          "detect_vague_summary",
          "detect_confidence_mismatch",
          "generate_pessimist_alert",
          "process_loop_summary",
          "inject_memory_alert"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "pessimist"
      }
    },
    {
      "id": "app/agents/sage.py",
      "type": "agent",
      "name": "sage",
      "version": "unknown",
      "status": "active",
      "metadata": {
        "description": "Belief analysis and emotional intelligence specialist.",
        "classes": [
          "SageAgent"
        ],
        "functions": [
          "__init__",
          "validate_input",
          "_generate_reflection"
        ],
        "memory_ops": true,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "sage"
      }
    },
    {
      "id": "app/agents/sitegen_agent.py",
      "type": "agent",
      "name": "sitegen_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "SiteGenAgent"
        ],
        "functions": [
          "__init__",
          "validate_input",
          "handle_sitegen_task_sync",
          "handle_sitegen_task"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "sitegen"
      }
    },
    {
      "id": "app/agents/skeptic_agent.py",
      "type": "agent",
      "name": "skeptic_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "SkepticAgent"
        ],
        "functions": [
          "__init__",
          "challenge_claim",
          "evaluate_argument",
          "identify_assumptions",
          "generate_counterargument",
          "skeptic_analysis"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "skeptic"
      }
    },
    {
      "id": "app/agents/trainer_agent.py",
      "type": "agent",
      "name": "trainer_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [],
        "functions": [
          "handle_trainer_task"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "trainer"
      }
    },
    {
      "id": "app/agents/drift_auto_healer_agent.py",
      "type": "agent",
      "name": "drift_auto_healer_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "DriftAutoHealerAgent"
        ],
        "functions": [],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "DriftAutoHealerAgent"
      }
    },
    {
      "id": "app/agents/drift_log_retriever_agent.py",
      "type": "agent",
      "name": "drift_log_retriever_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "DriftLogRetrieverAgent"
        ],
        "functions": [],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "DriftLogRetrieverAgent"
      }
    },
    {
      "id": "app/agents/plan_chainer_agent.py",
      "type": "agent",
      "name": "plan_chainer_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "PlanChainerAgent"
        ],
        "functions": [],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "PlanChainerAgent"
      }
    },
    {
      "id": "app/agents/plan_executor_agent.py",
      "type": "agent",
      "name": "plan_executor_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "PlanExecutorAgent"
        ],
        "functions": [],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "PlanExecutorAgent"
      }
    },
    {
      "id": "app/agents/plan_status_retriever_agent.py",
      "type": "agent",
      "name": "plan_status_retriever_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "PlanStatusRetrieverAgent"
        ],
        "functions": [],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "PlanStatusRetrieverAgent"
      }
    },
    {
      "id": "app/agents/reflection_analyzer_agent.py",
      "type": "agent",
      "name": "reflection_analyzer_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "ReflectionAnalyzerAgent"
        ],
        "functions": [],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "ReflectionAnalyzerAgent"
      }
    },
    {
      "id": "app/agents/reflection_chain_weaver_agent.py",
      "type": "agent",
      "name": "reflection_chain_weaver_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "ReflectionChainWeaverAgent"
        ],
        "functions": [],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "ReflectionChainWeaverAgent"
      }
    },
    {
      "id": "app/agents/reflection_scanner_agent.py",
      "type": "agent",
      "name": "reflection_scanner_agent",
      "version": "unknown",
      "status": "unknown",
      "metadata": {
        "description": "",
        "classes": [
          "ReflectionScannerAgent"
        ],
        "functions": [],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "ReflectionScannerAgent"
      }
    },
    {
      "id": "app/agents/sage_orchestrator_agent.py",
      "type": "agent",
      "name": "sage-orchestrator",
      "version": "1.1.0-cognitive-v1.0-stub",
      "status": "stub",
      "metadata": {
        "description": "Orchestrator variant focused on wisdom, reflection, and long-term strategy.",
        "classes": [
          "SageOrchestratorAgent"
        ],
        "functions": [
          "__init__",
          "execute"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "sage-orchestrator",
        "tools": [],
        "cognitive_capabilities": []
      }
    },
    {
      "id": "app/agents/planner_orchestrator_agent.py",
      "type": "agent",
      "name": "planner-orchestrator",
      "version": "1.1.0-cognitive-v1.0-stub",
      "status": "stub",
      "metadata": {
        "description": "Orchestrator variant focused on detailed task breakdown, scheduling, and dependency management.",
        "classes": [
          "PlannerOrchestratorAgent"
        ],
        "functions": [
          "__init__",
          "execute"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "planner-orchestrator",
        "tools": [],
        "cognitive_capabilities": []
      }
    },
    {
      "id": "app/agents/researcher_orchestrator_agent.py",
      "type": "agent",
      "name": "researcher-orchestrator",
      "version": "1.1.0-cognitive-v1.0-stub",
      "status": "stub",
      "metadata": {
        "description": "Orchestrator variant focused on information gathering, analysis, and knowledge synthesis.",
        "classes": [
          "ResearcherOrchestratorAgent"
        ],
        "functions": [
          "__init__",
          "execute"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": "researcher-orchestrator",
        "tools": [],
        "cognitive_capabilities": []
      }
    },
    {
      "id": "app/toolkit/registry/__init__.py",
      "type": "module",
      "name": "toolkit_registry",
      "version": "1.1.0-cognitive-v1.0",
      "status": "active",
      "metadata": {
        "description": "Implements the toolkit registry logic, loading tools from /app/tools and retrieving agent-specific tools from SCM.",
        "classes": [],
        "functions": [
          "_load_available_tools",
          "get_agent_authorized_tools",
          "get_agent_toolkit",
          "get_agent_role",
          "format_tools_prompt",
          "format_nova_prompt",
          "get_agent_themes"
        ],
        "memory_ops": false,
        "endpoints_defined": [],
        "is_core_mounted": false,
        "registry_key": null
      }
    }
  ],
  "relationships": [
    {
      "source": "app/agents/orchestrator_agent.py",
      "target": "app/agents/forge_agent.py",
      "type": "delegates_to",
      "description": "ArchitectOrchestrator delegates build tasks to Forge."
    },
    {
      "source": "app/agents/orchestrator_agent.py",
      "target": "app/agents/hal_agent.py",
      "type": "delegates_to",
      "description": "ArchitectOrchestrator delegates simple build tasks to HAL."
    },
    {
      "source": "app/agents/forge_agent.py",
      "target": "app/toolkit/registry/__init__.py",
      "type": "uses",
      "description": "Forge uses toolkit registry to get authorized tools."
    },
    {
      "source": "app/agents/hal_agent.py",
      "target": "app/agents/forge_agent.py",
      "type": "defers_to",
      "description": "HAL defers complex build tasks to Forge."
    }
  ]
}