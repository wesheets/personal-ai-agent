from fastapi import APIRouter, Query, HTTPException
import logging
import traceback

# Import agent runner module
from app.modules.agent_runner import AGENT_RUNNERS

# Configure logging
logger = logging.getLogger("routes.system_summary_routes")

router = APIRouter()

# Debug print to verify this file is loaded
print("‚úÖ SYSTEM SUMMARY ROUTES LOADED")

@router.post("/summary")
def generate_system_summary(project_id: str):
    """
    Generates a new narrative summary of system activities for a specific project.
    
    This endpoint triggers the SAGE agent to create a fresh summary of the project's
    current state and activities, regardless of whether a recent summary exists.
    
    Args:
        project_id: The project identifier
        
    Returns:
        Dict containing the newly generated narrative summary and metadata
    """
    try:
        # Debug logs to confirm agent_runner is being called
        logger.info(f"Generating new system summary for project: {project_id}")
        print(f"üîç Generating system summary for project: {project_id}")
        print(f"üîç Available agents: {list(AGENT_RUNNERS.keys())}")
        
        # Check if SAGE agent is available in AGENT_RUNNERS
        if "sage" not in AGENT_RUNNERS:
            logger.warning(f"SAGE agent not found in AGENT_RUNNERS, using fallback implementation")
            print(f"‚ö†Ô∏è SAGE agent not found in AGENT_RUNNERS, using fallback implementation")
            # Fallback implementation when SAGE agent is not available
            summary = f"System summary for project {project_id} (generated by fallback implementation)"
            return {
                "project_id": project_id,
                "summary": summary,
                "status": "success",
                "message": "Used fallback implementation because SAGE agent was not available"
            }
        
        # Get the SAGE agent runner function
        sage_runner = AGENT_RUNNERS["sage"]
        logger.info(f"Running SAGE agent for project: {project_id}")
        print(f"üèÉ Running SAGE agent for project: {project_id}")
        
        # Run the SAGE agent
        result = sage_runner("Generate system summary", project_id, [])
        
        # Check if the result contains a summary
        if "summary" in result:
            summary = result["summary"]
        else:
            summary = result.get("output", "No summary generated")
        
        logger.info(f"System summary generated successfully for project: {project_id}")
        print(f"‚úÖ System summary generated successfully for project: {project_id}")
        
        return {
            "project_id": project_id,
            "summary": summary,
            "status": "success"
        }
    except Exception as e:
        error_msg = f"Error generating system summary: {str(e)}"
        logger.error(error_msg)
        logger.error(traceback.format_exc())
        print(f"‚ùå {error_msg}")
        print(traceback.format_exc())
        
        # Return error response with fallback message
        return {
            "status": "error",
            "message": f"Summary generation failed: {str(e)}",
            "project_id": project_id,
            "summary": f"System summary generation failed for project {project_id}. Please try again later."
        }
