"""
NOVA Agent Schema

This module defines the schema for the NOVA agent's input and output.
The NOVA agent is responsible for UI component building in React/HTML.
"""

from typing import Dict, List, Any, Optional
from pydantic import BaseModel, Field

class UIComponent(BaseModel):
    """Details about a UI component generated by the NOVA agent."""
    type: str = Field(..., description="Type of UI component (e.g., component, page, layout)")
    name: str = Field(..., description="Name of the UI component")
    file_path: str = Field(..., description="File path where the component will be saved")
    code: str = Field(..., description="The actual React/HTML code for the component")

class NovaUIRequest(BaseModel):
    """
    Request schema for the NOVA agent to build UI components.
    """
    task: str = Field(..., description="Description of the UI components to be built")
    project_id: str = Field(..., description="Unique identifier for the project")
    tools: List[str] = Field(default_factory=list, description="List of tools to use for UI generation")
    component_type: Optional[str] = Field(None, description="Specific type of component to generate (e.g., form, dashboard, navigation)")
    style_guide: Optional[Dict[str, Any]] = Field(None, description="Style guide parameters for UI generation")
    
    class Config:
        schema_extra = {
            "example": {
                "task": "Create a dashboard and login form for a project management app",
                "project_id": "proj_123",
                "tools": ["build_ui", "generate_component"],
                "component_type": "dashboard",
                "style_guide": {
                    "primary_color": "#4285F4",
                    "font_family": "Roboto, sans-serif",
                    "border_radius": "4px"
                }
            }
        }

class NovaUIResult(BaseModel):
    """
    Response schema for the NOVA agent's UI building results.
    """
    status: str = Field(..., description="Status of the UI generation (success, error, blocked)")
    message: str = Field(..., description="Descriptive message about the result")
    project_id: str = Field(..., description="Project identifier that was processed")
    files_created: List[str] = Field(..., description="List of file paths created by the agent")
    ui_components: Optional[Dict[str, Any]] = Field(None, description="Generated UI components with their code")
    next_recommended_step: str = Field(..., description="Recommendation for the next step in the process")
    memory_tag: str = Field(..., description="Memory tag for storing the result")
    
    class Config:
        schema_extra = {
            "example": {
                "status": "success",
                "message": "NOVA completed task for proj_123",
                "project_id": "proj_123",
                "files_created": [
                    "src/components/Dashboard.jsx",
                    "src/components/LoginForm.jsx"
                ],
                "ui_components": {
                    "dashboard": {
                        "type": "component",
                        "name": "Dashboard",
                        "file_path": "src/components/Dashboard.jsx",
                        "code": "import React from 'react';\n// Dashboard component code..."
                    },
                    "login_form": {
                        "type": "component",
                        "name": "LoginForm",
                        "file_path": "src/components/LoginForm.jsx",
                        "code": "import React from 'react';\n// LoginForm component code..."
                    }
                },
                "next_recommended_step": "Run CRITIC to review NOVA's UI output",
                "memory_tag": "nova_ui_proj_123"
            }
        }

# Fallback schemas for graceful error handling
class NovaUIRequestFallback(BaseModel):
    """Fallback schema for NOVA UI requests with minimal required fields."""
    task: str = Field(..., description="Description of the UI components to be built")
    project_id: str = Field(..., description="Unique identifier for the project")

class NovaUIResultFallback(BaseModel):
    """Fallback schema for NOVA UI results with minimal required fields."""
    status: str = Field("error", description="Status of the UI generation")
    message: str = Field(..., description="Error message or minimal result description")
    project_id: str = Field(..., description="Project identifier that was processed")
    memory_tag: str = Field(..., description="Memory tag for storing the result")
