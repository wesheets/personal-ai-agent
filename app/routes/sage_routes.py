"""
SAGE Agent Routes

This module defines the API routes for the SAGE agent,
including the review endpoint for manual SAGE review.
"""

import logging
from fastapi import APIRouter, HTTPException, Depends
from typing import Dict, Any

# Import schemas
from app.schemas.sage_schema import SageReviewRequest, SageReviewResult

# Import SAGE agent functions
try:
    from app.agents.sage import review_loop_summary, run_sage_agent
    sage_available = True
except ImportError:
    sage_available = False
    logging.warning("⚠️ SAGE agent not available, routes will return errors")

# Create router
router = APIRouter(
    prefix="/sage",
    tags=["sage"],
    responses={404: {"description": "Not found"}},
)

@router.post("/review", response_model=SageReviewResult)
async def sage_review(request: SageReviewRequest):
    """
    Endpoint for manual SAGE review of loop summaries.
    
    This endpoint allows manual invocation of the SAGE agent to review
    a loop summary and extract key beliefs with confidence scores.
    
    Args:
        request: SageReviewRequest containing loop_id and summary_text
        
    Returns:
        SageReviewResult containing belief scores and reflection
    """
    if not sage_available:
        raise HTTPException(
            status_code=503,
            detail="SAGE agent is not available"
        )
    
    try:
        # Call SAGE review function
        result = await review_loop_summary(request.loop_id, request.summary_text)
        
        # Check for error status
        if isinstance(result, dict) and result.get("status") == "error":
            raise HTTPException(
                status_code=500,
                detail=result.get("message", "Unknown error in SAGE review")
            )
        
        return result
    
    except Exception as e:
        logging.error(f"Error in SAGE review endpoint: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error in SAGE review: {str(e)}"
        )

@router.post("/run")
async def run_sage(project_id: str, task: str = None):
    """
    Run the SAGE agent for a given project.
    
    This endpoint maintains backward compatibility with the original
    SAGE agent functionality.
    
    Args:
        project_id: The project identifier
        task: Optional task to execute
        
    Returns:
        Dict containing the execution result
    """
    if not sage_available:
        raise HTTPException(
            status_code=503,
            detail="SAGE agent is not available"
        )
    
    try:
        # Call original SAGE function
        result = run_sage_agent(project_id, task)
        
        return result
    
    except Exception as e:
        logging.error(f"Error running SAGE agent: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error running SAGE agent: {str(e)}"
        )



from pydantic import BaseModel, Field
from typing import List

# Assuming memory read function is available
try:
    from app.modules.memory_reader import read_memory # Or wherever read_memory is defined
    memory_reader_available = True
except ImportError:
    # Fallback mock if memory reader isn't found
    async def read_memory(project_id: str, tag: str):
        logging.warning(f"Mock read_memory called for {project_id} / {tag}")
        if tag == f"sage_beliefs_{project_id}":
            return [{"belief": "Mock belief 1", "confidence": 0.9}, {"belief": "Mock belief 2", "confidence": 0.7}]
        return None
    memory_reader_available = False
    logging.warning("⚠️ Memory reader not available, using mock for /beliefs endpoint")

class Belief(BaseModel):
    belief: str
    confidence: float
    evidence: Optional[List[str]] = None
    category: Optional[str] = None
    timestamp: Optional[str] = None

class SageBeliefsResponse(BaseModel):
    project_id: str
    beliefs: List[Belief]
    status: str

@router.get("/beliefs", response_model=SageBeliefsResponse)
async def get_sage_beliefs(project_id: str):
    """
    Retrieve the beliefs generated by the SAGE agent for a specific project.

    Args:
        project_id: The project identifier

    Returns:
        SageBeliefsResponse containing the list of beliefs
    """
    logger.info(f"Received request for SAGE beliefs for project: {project_id}")
    try:
        # Define the memory tag where SAGE beliefs might be stored
        belief_tag = f"sage_beliefs_{project_id}"
        
        # Attempt to read beliefs from memory
        beliefs_data = await read_memory(project_id=project_id, tag=belief_tag)
        
        if beliefs_data is None:
            logger.warning(f"No SAGE beliefs found in memory for project {project_id} with tag {belief_tag}")
            # Return empty list if no beliefs found
            return SageBeliefsResponse(project_id=project_id, beliefs=[], status="not_found")
            
        # Ensure beliefs_data is a list
        if not isinstance(beliefs_data, list):
             logger.error(f"Invalid format for SAGE beliefs data for project {project_id}: {type(beliefs_data)}")
             raise HTTPException(
                 status_code=500,
                 detail="Invalid belief data format found in memory"
             )

        # Validate and format beliefs
        beliefs_list = []
        for belief_item in beliefs_data:
            if isinstance(belief_item, dict):
                # Basic validation for required fields
                if "belief" in belief_item and "confidence" in belief_item:
                     beliefs_list.append(Belief(**belief_item))
                else:
                    logger.warning(f"Skipping invalid belief item for project {project_id}: {belief_item}")
            else:
                 logger.warning(f"Skipping non-dict belief item for project {project_id}: {belief_item}")

        logger.info(f"Successfully retrieved {len(beliefs_list)} SAGE beliefs for project: {project_id}")
        return SageBeliefsResponse(project_id=project_id, beliefs=beliefs_list, status="success")

    except Exception as e:
        logger.error(f"Error retrieving SAGE beliefs for project {project_id}: {str(e)}")
        logger.error(traceback.format_exc())
        raise HTTPException(
            status_code=500,
            detail=f"Error retrieving SAGE beliefs: {str(e)}"
        )

