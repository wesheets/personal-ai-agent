{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Loop Map Visualization Schema",
  "description": "Schema for loop map visualization data structure",
  "type": "object",
  "required": ["metadata", "nodes", "edges"],
  "properties": {
    "metadata": {
      "type": "object",
      "required": ["loop_id", "mode", "generated_at", "version"],
      "properties": {
        "loop_id": {
          "type": "string",
          "description": "Unique identifier for the loop",
          "pattern": "^loop_[0-9a-zA-Z]+$"
        },
        "mode": {
          "type": "string",
          "description": "Orchestrator mode used for visualization",
          "enum": ["fast", "balanced", "thorough", "research"]
        },
        "generated_at": {
          "type": "string",
          "description": "ISO 8601 timestamp of when the visualization was generated",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "description": "Version of the visualization schema"
        }
      }
    },
    "nodes": {
      "type": "array",
      "description": "Array of nodes in the visualization",
      "items": {
        "type": "object",
        "required": ["id", "type", "label", "data"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the node"
          },
          "type": {
            "type": "string",
            "description": "Type of the node",
            "enum": [
              "agent", 
              "memory", 
              "decision", 
              "reflection", 
              "loop_start", 
              "loop_end", 
              "rerun", 
              "operator", 
              "mode_change", 
              "depth_change"
            ]
          },
          "label": {
            "type": "string",
            "description": "Display label for the node"
          },
          "data": {
            "type": "object",
            "description": "Node-specific data",
            "properties": {
              "timestamp": {
                "type": "string",
                "description": "ISO 8601 timestamp of when the node was created",
                "format": "date-time"
              },
              "mode": {
                "type": "string",
                "description": "Orchestrator mode at the time of node creation",
                "enum": ["fast", "balanced", "thorough", "research"]
              }
            }
          }
        },
        "allOf": [
          {
            "if": {
              "properties": { "type": { "enum": ["agent"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["agent_name", "timestamp", "status"],
                  "properties": {
                    "agent_name": { "type": "string" },
                    "status": { "type": "string" },
                    "duration": { "type": "number" },
                    "depth": { "type": "integer" },
                    "reflection_intensity": { "type": "number" }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": { "type": { "enum": ["memory"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["memory_key", "timestamp", "operation"],
                  "properties": {
                    "memory_key": { "type": "string" },
                    "operation": { "type": "string" },
                    "value_type": { "type": "string" },
                    "access_count": { "type": "integer" }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": { "type": { "enum": ["decision"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["decision_type", "timestamp", "outcome"],
                  "properties": {
                    "decision_type": { "type": "string" },
                    "outcome": { "type": "string" },
                    "confidence": { "type": "number" },
                    "alternatives": { "type": "array" }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": { "type": { "enum": ["reflection"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["reflection_type", "timestamp", "agent"],
                  "properties": {
                    "reflection_type": { "type": "string" },
                    "agent": { "type": "string" }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": { "type": { "enum": ["loop_start", "loop_end"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["loop_id", "timestamp", "loop_count", "mode"],
                  "properties": {
                    "loop_count": { "type": "integer" }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": { "type": { "enum": ["rerun"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["reason", "timestamp", "loop_count"],
                  "properties": {
                    "reason": { "type": "string" },
                    "loop_count": { "type": "integer" }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": { "type": { "enum": ["operator"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["operation", "timestamp"],
                  "properties": {
                    "operation": { "type": "string" }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": { "type": { "enum": ["mode_change"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["old_mode", "new_mode", "reason", "timestamp"],
                  "properties": {
                    "old_mode": { 
                      "type": "string",
                      "enum": ["fast", "balanced", "thorough", "research"]
                    },
                    "new_mode": { 
                      "type": "string",
                      "enum": ["fast", "balanced", "thorough", "research"]
                    },
                    "reason": { "type": "string" }
                  }
                }
              }
            }
          },
          {
            "if": {
              "properties": { "type": { "enum": ["depth_change"] } }
            },
            "then": {
              "properties": {
                "data": {
                  "required": ["old_depth", "new_depth", "reason", "timestamp"],
                  "properties": {
                    "old_depth": { "type": "integer" },
                    "new_depth": { "type": "integer" },
                    "reason": { "type": "string" }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "edges": {
      "type": "array",
      "description": "Array of edges in the visualization",
      "items": {
        "type": "object",
        "required": ["source", "target", "type", "label", "data"],
        "properties": {
          "source": {
            "type": "string",
            "description": "ID of the source node"
          },
          "target": {
            "type": "string",
            "description": "ID of the target node"
          },
          "type": {
            "type": "string",
            "description": "Type of the edge",
            "enum": [
              "execution", 
              "memory_access", 
              "decision", 
              "reflection", 
              "rerun", 
              "operator", 
              "mode_transition", 
              "depth_transition"
            ]
          },
          "label": {
            "type": "string",
            "description": "Display label for the edge"
          },
          "data": {
            "type": "object",
            "description": "Edge-specific data",
            "properties": {
              "timestamp": {
                "type": "string",
                "description": "ISO 8601 timestamp of when the edge was created",
                "format": "date-time"
              }
            }
          }
        }
      }
    },
    "settings": {
      "type": "object",
      "description": "Visualization settings based on mode",
      "properties": {
        "detail_level": {
          "type": "string",
          "enum": ["minimal", "standard", "detailed", "comprehensive"]
        },
        "node_types_to_show": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "agent", 
              "memory", 
              "decision", 
              "reflection", 
              "loop_start", 
              "loop_end", 
              "rerun", 
              "operator", 
              "mode_change", 
              "depth_change"
            ]
          }
        },
        "edge_types_to_show": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "execution", 
              "memory_access", 
              "decision", 
              "reflection", 
              "rerun", 
              "operator", 
              "mode_transition", 
              "depth_transition"
            ]
          }
        },
        "include_timestamps": {
          "type": "boolean"
        },
        "include_memory_details": {
          "type": "boolean"
        },
        "include_agent_details": {
          "type": "boolean"
        },
        "include_decision_details": {
          "type": "boolean"
        },
        "include_uncertainty": {
          "type": "boolean"
        },
        "track_alternatives": {
          "type": "boolean"
        },
        "update_frequency": {
          "type": "string",
          "enum": ["end_only", "agent_completion", "real_time"]
        }
      }
    }
  }
}
